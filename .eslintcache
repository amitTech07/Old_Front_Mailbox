[{"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\routes.js":"2","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\store.js":"3","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\IdleTime.js":"4","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\root_reducer.js":"5","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\Login.jsx":"6","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\ChangePassword.jsx":"7","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\Signup.jsx":"8","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\UpdateProfile.jsx":"9","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Mailbox.jsx":"10","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\Layout.jsx":"11","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\ThreeColumnView.jsx":"12","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\preferences.jsx":"13","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\index.js":"14","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\config\\constants.js":"15","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\toaster\\Toaster.js":"16","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\apiLog\\LogApi.js":"17","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\action\\InboxAction.js":"18","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\dateFormat\\DateFormat.js":"19","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\HelpModal.jsx":"20","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\password_validation_frame.jsx":"21","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\loader\\Loading.js":"22","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Inbox.jsx":"23","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\api\\ApicallModule.jsx":"24","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\Navbar.jsx":"25","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\Sidebar.jsx":"26","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\ContainerComponent.jsx":"27","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\composeMail.jsx":"28","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailView.jsx":"29","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Sidebar.jsx":"30","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\Switch.jsx":"31","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\reducer\\index.js":"32","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\renderImage.js":"33","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\track.js":"34","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\annotation.js":"35","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\InboxNavbar.jsx":"36","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\Viewsearchbar.jsx":"37","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Viewcommentbox.jsx":"38","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Inbox.jsx":"39","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\compose_to.jsx":"40","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\tinyEditor.jsx":"41","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\drag_drop.jsx":"42","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailMarginComments.jsx":"43","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailBody.jsx":"44","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Commentbox.jsx":"45","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\DocView.jsx":"46","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Topreplaybuttons.jsx":"47","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\AddAttachment.jsx":"48","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\print\\printView.jsx":"49","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\action_types\\index.js":"50","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\profileDropdown\\index.js":"51","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\ForwardTo.jsx":"52","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\FolderAdd.jsx":"53","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\InboxList.jsx":"54","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\MarkLeave.jsx":"55"},{"size":443,"mtime":1665468460629,"results":"56","hashOfConfig":"57"},{"size":2405,"mtime":1665468460631,"results":"58","hashOfConfig":"57"},{"size":1039,"mtime":1665468460631,"results":"59","hashOfConfig":"57"},{"size":1584,"mtime":1665468460611,"results":"60","hashOfConfig":"57"},{"size":1685,"mtime":1665468460631,"results":"61","hashOfConfig":"57"},{"size":5281,"mtime":1665468460612,"results":"62","hashOfConfig":"57"},{"size":8907,"mtime":1665468460611,"results":"63","hashOfConfig":"57"},{"size":3685,"mtime":1665468460613,"results":"64","hashOfConfig":"57"},{"size":7459,"mtime":1665468460614,"results":"65","hashOfConfig":"57"},{"size":48233,"mtime":1665468460638,"results":"66","hashOfConfig":"57"},{"size":1380,"mtime":1665468460568,"results":"67","hashOfConfig":"57"},{"size":1633,"mtime":1665468460573,"results":"68","hashOfConfig":"57"},{"size":21749,"mtime":1665468460619,"results":"69","hashOfConfig":"57"},{"size":1359,"mtime":1665468460635,"results":"70","hashOfConfig":"57"},{"size":3195,"mtime":1665468460628,"results":"71","hashOfConfig":"57"},{"size":595,"mtime":1665468460636,"results":"72","hashOfConfig":"57"},{"size":772,"mtime":1665468460633,"results":"73","hashOfConfig":"57"},{"size":3956,"mtime":1665468460629,"results":"74","hashOfConfig":"57"},{"size":318,"mtime":1665468460633,"results":"75","hashOfConfig":"57"},{"size":747,"mtime":1665468460616,"results":"76","hashOfConfig":"57"},{"size":1423,"mtime":1665468460618,"results":"77","hashOfConfig":"57"},{"size":284,"mtime":1665468460635,"results":"78","hashOfConfig":"57"},{"size":36500,"mtime":1665468460637,"results":"79","hashOfConfig":"57"},{"size":1250,"mtime":1665468460632,"results":"80","hashOfConfig":"57"},{"size":6270,"mtime":1665468460622,"results":"81","hashOfConfig":"57"},{"size":20543,"mtime":1665468460625,"results":"82","hashOfConfig":"57"},{"size":11332,"mtime":1665468460565,"results":"83","hashOfConfig":"57"},{"size":20677,"mtime":1665468460626,"results":"84","hashOfConfig":"57"},{"size":69767,"mtime":1665468460642,"results":"85","hashOfConfig":"57"},{"size":24185,"mtime":1665468460572,"results":"86","hashOfConfig":"57"},{"size":1393,"mtime":1665468460616,"results":"87","hashOfConfig":"57"},{"size":8023,"mtime":1665468460630,"results":"88","hashOfConfig":"57"},{"size":977,"mtime":1665468460619,"results":"89","hashOfConfig":"57"},{"size":3706,"mtime":1665468460620,"results":"90","hashOfConfig":"57"},{"size":6650,"mtime":1665468460617,"results":"91","hashOfConfig":"57"},{"size":44964,"mtime":1665468460621,"results":"92","hashOfConfig":"57"},{"size":25550,"mtime":1665468460570,"results":"93","hashOfConfig":"57"},{"size":39505,"mtime":1665468460573,"results":"94","hashOfConfig":"57"},{"size":3872,"mtime":1665468460571,"results":"95","hashOfConfig":"57"},{"size":16325,"mtime":1665468460618,"results":"96","hashOfConfig":"57"},{"size":3394,"mtime":1665468460626,"results":"97","hashOfConfig":"57"},{"size":2898,"mtime":1665468460618,"results":"98","hashOfConfig":"57"},{"size":12360,"mtime":1665468460641,"results":"99","hashOfConfig":"57"},{"size":5311,"mtime":1665468460639,"results":"100","hashOfConfig":"57"},{"size":10145,"mtime":1665468460637,"results":"101","hashOfConfig":"57"},{"size":1263,"mtime":1665468460639,"results":"102","hashOfConfig":"57"},{"size":290,"mtime":1665468460638,"results":"103","hashOfConfig":"57"},{"size":2725,"mtime":1665468460639,"results":"104","hashOfConfig":"57"},{"size":14913,"mtime":1665468460624,"results":"105","hashOfConfig":"57"},{"size":1608,"mtime":1665468460630,"results":"106","hashOfConfig":"57"},{"size":8485,"mtime":1665468460624,"results":"107","hashOfConfig":"57"},{"size":9280,"mtime":1665468460621,"results":"108","hashOfConfig":"57"},{"size":4265,"mtime":1665468460620,"results":"109","hashOfConfig":"57"},{"size":6076,"mtime":1665468460572,"results":"110","hashOfConfig":"57"},{"size":12383,"mtime":1665468460622,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1euj2y6",{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\index.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\routes.js",["256","257"],"import { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Login from \"./Auth/Login\";\r\nimport Mailbox from \"./views/Mailbox\";\r\nimport Signup from \"./Auth/Signup\";\r\nimport UpdateProfile from \"./Auth/UpdateProfile\";\r\nimport { isLogin } from \"./util\";\r\nimport ChangePassword from \"./Auth/ChangePassword\";\r\nimport PreferencePage from \"../src/components/common/preferences\";\r\nimport ThreeColumnView from \"./3ColumnView/views/ThreeColumnView\";\r\nimport Layout from \"../src/3ColumnView/components/Layout\";\r\nimport { useEffect, useState } from \"react\";\r\nimport IdleTimer from \"./Auth/IdleTime\";\r\n\r\nfunction App() {\r\n  const [isTimeout, setIsTimeout] = useState(false);\r\n  const [isPreferencedChanged, setIsPreferenceChanged] = useState(false);\r\n  const [isProfileUpdated, setIsProfileUpdated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = new IdleTimer({\r\n      timeout: 1800, //expire after 10 seconds\r\n      onTimeout: () => {\r\n        setIsTimeout(true);\r\n      },\r\n      onExpired: () => {\r\n        setIsTimeout(true);\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      timer.cleanUp();\r\n    };\r\n  }, []);\r\n\r\n  const isAuthenticated = isLogin();\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {!isAuthenticated && <Redirect to=\"/\" />}\r\n      {isTimeout && <Redirect to=\"/\" />}\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route\r\n          path=\"/mail\"\r\n          render={() => (\r\n            <Mailbox\r\n              isPreferencedChanged={isPreferencedChanged}\r\n              setIsPreferenceChanged={setIsPreferenceChanged}\r\n              setIsProfileUpdated={setIsProfileUpdated}\r\n              isProfileUpdated={isProfileUpdated}\r\n            />\r\n          )}\r\n        />\r\n        <Route path=\"/signup\" component={Signup} />\r\n        <Route path=\"/re_password\" component={ChangePassword} />\r\n        <Route\r\n          path=\"/update_profile\"\r\n          render={() => (\r\n            <UpdateProfile setIsProfileUpdated={setIsProfileUpdated} />\r\n          )}\r\n        />\r\n        {/* <Route path=\"/test\" component={ThreeColumnView} />\r\n        <Route path=\"/3ColumnView\" component={Layout} /> */}\r\n        <Route\r\n          path=\"/preferences\"\r\n          render={() => (\r\n            <PreferencePage setIsPreferenceChanged={setIsPreferenceChanged} />\r\n          )}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\store.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\IdleTime.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\root_reducer.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\Login.jsx",["258","259","260","261"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { isLogin } from \"../util\";\r\nimport * as Api from \"../util/api/ApicallModule\";\r\nimport {\r\n  LOGIN,\r\n  // GET_PREFERENCES,\r\n  // USER_PROFILE,\r\n  LOGS_ADD,\r\n} from \"../config/constants\";\r\nimport Toaster from \"../util/toaster/Toaster\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { LogApi } from \"../util/apiLog/LogApi\";\r\nimport \"./Login.css\";\r\n\r\nconst Login = () => {\r\n  const [formData, setFormData] = useState({});\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  let isAuthenticate = isLogin();\r\n  const handleSignIn = async (event) => {\r\n    event.preventDefault();\r\n    if (document.querySelector(\"input[name=password]\").value === \"\") {\r\n      document.querySelector(\"input[name=password]\").style.border =\r\n        \"1px solid red\";\r\n      return false;\r\n    }\r\n    if (document.querySelector(\"input[name=user_name]\").value === \"\") {\r\n      document.querySelector(\"input[name=user_name]\").style.border =\r\n        \"1px solid red\";\r\n      return false;\r\n    }\r\n\r\n    setLoading(true);\r\n    let logData = {};\r\n    const logDataFunction = (type, mail_id, attachId) => {\r\n      logData = {\r\n        type: type,\r\n        mail_id: mail_id,\r\n        attach_id: attachId,\r\n      };\r\n    };\r\n\r\n    const resp = await Api.ApiHandle(LOGIN, formData, \"post\");\r\n    localStorage.setItem(\"limit\", 20);\r\n    if (resp && resp.status === 0) {\r\n      document.getElementById(\"frm\")?.reset();\r\n      setLoading(false);\r\n      Toaster(\"error\", resp.message);\r\n    } else if (resp && resp.status === 1) {\r\n      localStorage.setItem(\"auth\", resp.data);\r\n      logDataFunction(\"LOGIN\", 0, 0);\r\n\r\n      LogApi(logData);\r\n\r\n      // Api.ApiHandle(LOGS_ADD, { type: \"LOGIN\" }, \"POST\");\r\n      history.push(\"/mail\");\r\n    } else if (resp && resp.status === 2) {\r\n      localStorage.setItem(\"auth\", resp.data);\r\n      history.push(\"/re_password\");\r\n    } else {\r\n      document.getElementById(\"frm\")?.reset();\r\n      setLoading(false);\r\n      Toaster(\"error\", \"Something went wrong, please try again\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const _formData = { ...formData };\r\n    _formData[e.target.name] = e.target.value;\r\n\r\n    setFormData(_formData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"dummy-image\">\r\n        <div className=\"marque\">\r\n          <marquee direction=\"right\">This is basic example of marquee.</marquee>\r\n        </div>\r\n        <div className=\"nk-block nk-block-middle nk-auth-body center-box\">\r\n          <div className=\"brand-logo pb-5\"></div>\r\n          <div className=\"nk-block-head\">\r\n            <div className=\"nk-block-head-content\">\r\n              <h5 className=\"nk-block-title text-center\">Welcome to Mailbox</h5>\r\n            </div>\r\n          </div>\r\n          <form onSubmit={handleSignIn} id=\"frm\">\r\n            <div className=\"form-group\">\r\n              <div className=\"form-label-group\"></div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control form-control-lg\"\r\n                id=\"default-01\"\r\n                placeholder=\"Enter your username\"\r\n                name=\"user_name\"\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <div className=\"form-label-group\"></div>\r\n              <div className=\"form-control-wrap\">\r\n                <div\r\n                  tabIndex=\"-1\"\r\n                  className=\"form-icon form-icon-right passcode-switch\"\r\n                  data-target=\"password\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                >\r\n                  {showPassword && (\r\n                    <em className=\"passcode-icon icon-show icon ni ni-eye\"></em>\r\n                  )}\r\n                  {!showPassword && (\r\n                    <em className=\"passcode-icon icon-show icon ni ni-eye-off\"></em>\r\n                  )}\r\n                </div>\r\n                <input\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  className=\"form-control form-control-lg\"\r\n                  id=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  name=\"password\"\r\n                  onChange={handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-lg btn-primary btn-block\"\r\n                disabled={loading}\r\n              >\r\n                {loading ? (\r\n                  <Loader\r\n                    type=\"ThreeDots\"\r\n                    color=\"#FFF\"\r\n                    height={20}\r\n                    width={20}\r\n                  />\r\n                ) : (\r\n                  \"Sign In\"\r\n                )}\r\n              </button>\r\n            </div>\r\n          </form>\r\n          {/* <div className=\"form-note-s2 pt-4\">\r\n          New on our platform?\r\n          <NavLink exact to=\"/signup\">\r\n            Create an account\r\n          </NavLink>\r\n        </div> */}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\ChangePassword.jsx",["262"],"import { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Navbar from \"../components/navbar/Navbar\";\r\nimport { CHANGE_PASSWORD, LOGS_ADD } from \"../config/constants\";\r\nimport * as Api from \"../util/api/ApicallModule\";\r\nimport \"../Assets/CSS/dashlite.css\";\r\nimport Toaster from \"../util/toaster/Toaster\";\r\nimport {\r\n  updateActiveModule,\r\n  updateSeachText,\r\n  updateUnreadMailsCount,\r\n} from \"../redux/action/InboxAction\";\r\nimport { connect } from \"react-redux\";\r\nimport { validatePassword } from \"../util\";\r\nimport PasswordValidationFrame from \"../components/common/password_validation_frame\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport HelpModal from \"../components/common/HelpModal\";\r\n\r\nconst ChangePassword = (props) => {\r\n  const history = useHistory();\r\n\r\n  const [oldPassword, setOldPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\r\n  const [showNewPassword, setShowNewPassword] = useState(false);\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [rePassword, setRePassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [error, setError] = useState(\"\");\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const handleChangePassword = async (e) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      oldPassword: oldPassword,\r\n      newPassword: newPassword,\r\n      renewPassword: rePassword,\r\n    };\r\n    if (oldPassword === \"\") {\r\n      setError(\"* The current password field is required.\");\r\n    } else if (newPassword === \"\") {\r\n      setError(\"* The new password field is required.\");\r\n    } else if (rePassword === \"\") {\r\n      setError(\"* The confirm password field is required.\");\r\n    } else if (oldPassword === newPassword) {\r\n      setError(\"* old password and new password cannot be same.\");\r\n    } else if (newPassword !== rePassword) {\r\n      setError(`* The new password and confirmation password do not match.`);\r\n    } else {\r\n      setError(\"\");\r\n      setLoading(true);\r\n\r\n      let checkPasswordStrength = true;\r\n\r\n      Object.values(validatePassword(newPassword)).forEach((item) => {\r\n        if (!item) checkPasswordStrength = false;\r\n      });\r\n\r\n      if (checkPasswordStrength) {\r\n        logDataFunction(\"CHANGE PASSWORD\", 0, 0);\r\n        const resp = await Api.ApiHandle(\r\n          `${CHANGE_PASSWORD}`,\r\n          payload,\r\n          \"PUT\",\r\n          logData\r\n        );\r\n        if (resp.status === 1) {\r\n          Toaster(\"success\", \"Password changed successfully\");\r\n          setError(\"\");\r\n          setNewPassword(\"\");\r\n          setOldPassword(\"\");\r\n          setRePassword(\"\");\r\n          signOut();\r\n        } else {\r\n          setLoading(false);\r\n          Toaster(\"error\", resp.message);\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n        Toaster(\"error\", \"Enter password that satisfy all requirement\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const signOut = () => {\r\n    // let logData = {\r\n    //   type: \"PASSWORD CHANGE LOGOUT\",\r\n    // };\r\n    // Api.ApiHandle(LOGS_ADD, logData, \"POST\");\r\n    props.updateActiveModule(\"Unread\");\r\n    props.updateSeachText(\"\");\r\n    props?.updateUnreadMailsCount(0);\r\n    localStorage.removeItem(\"auth\");\r\n    localStorage.removeItem(\"_expiredTime\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-block nk-block-middle nk-auth-body\">\r\n        <div className=\"nk-block-head\">\r\n          <div className=\"nk-block-head-content\">\r\n            <div style={{ marginBottom: 60 }}>\r\n              <Navbar />\r\n            </div>\r\n            <HelpModal />\r\n            <div style={{ display: \"flex\" }}>\r\n              {props.location.state && (\r\n                <em\r\n                  className=\"icon ni ni-arrow-left\"\r\n                  style={{ marginRight: \"106%\", marginLeft: \"-112%\" }}\r\n                  onClick={() => {\r\n                    history.push(\"/mail\");\r\n                    props.updateActiveModule(\"Unread\");\r\n                  }}\r\n                />\r\n              )}\r\n              <h5 className=\"nk-block-title\">\r\n                {props.location.state\r\n                  ? \"Change Password\"\r\n                  : \"Create New Password\"}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ color: \"red\" }}>{error !== \"\" ? error : \"\"}</div>\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"current_password\">\r\n              Current Password\r\n            </label>\r\n            <input\r\n              type={showCurrentPassword ? \"text\" : \"password\"}\r\n              className=\"form-control form-control-lg\"\r\n              id=\"current_password\"\r\n              placeholder=\"Enter current password...\"\r\n              name=\"current_password\"\r\n              value={oldPassword}\r\n              onChange={(e) => setOldPassword(e.target.value)}\r\n            />\r\n            <div\r\n              tabIndex=\"-1\"\r\n              className=\"form-icon form-icon-right passcode-switch\"\r\n              data-target=\"password\"\r\n              style={{ marginTop: \"4%\" }}\r\n              onClick={() => setShowCurrentPassword(!showCurrentPassword)}\r\n            >\r\n              {showCurrentPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye\"></em>\r\n              )}\r\n              {!showCurrentPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye-off\"></em>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"new_password\">\r\n              New Password\r\n            </label>\r\n            <input\r\n              type={showNewPassword ? \"text\" : \"password\"}\r\n              className=\"form-control form-control-lg\"\r\n              id=\"new_password\"\r\n              placeholder=\"Enter new password... \"\r\n              name=\"new_password\"\r\n              value={newPassword}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n            />\r\n            <div\r\n              tabIndex=\"-1\"\r\n              className=\"form-icon form-icon-right passcode-switch\"\r\n              data-target=\"password\"\r\n              style={{ marginTop: \"4%\" }}\r\n              onClick={() => setShowNewPassword(!showNewPassword)}\r\n            >\r\n              {showNewPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye\"></em>\r\n              )}\r\n              {!showNewPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye-off\"></em>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {newPassword && (\r\n            <PasswordValidationFrame password={validatePassword(newPassword)} />\r\n          )}\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"re_password\">\r\n              Confirm New Password\r\n            </label>\r\n            <input\r\n              type={showPassword ? \"text\" : \"password\"}\r\n              className=\"form-control form-control-lg\"\r\n              id=\"re_password\"\r\n              placeholder=\"Re-enter new password...\"\r\n              name=\"re_password\"\r\n              value={rePassword}\r\n              onChange={(e) => setRePassword(e.target.value)}\r\n            />\r\n            <div\r\n              tabIndex=\"-1\"\r\n              className=\"form-icon form-icon-right passcode-switch\"\r\n              data-target=\"password\"\r\n              style={{ marginTop: \"4%\" }}\r\n              onClick={() => setShowPassword(!showPassword)}\r\n            >\r\n              {showPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye\"></em>\r\n              )}\r\n              {!showPassword && (\r\n                <em className=\"passcode-icon icon-show icon ni ni-eye-off\"></em>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"form-group\"\r\n            onClick={(e) => {\r\n              handleChangePassword(e);\r\n            }}\r\n          >\r\n            <button className=\"btn btn-lg btn-primary btn-block\">\r\n              {loading ? (\r\n                <Loader type=\"ThreeDots\" color=\"#FFF\" height={20} width={20} />\r\n              ) : props.location.state ? (\r\n                \"Update Password\"\r\n              ) : (\r\n                \"Create Password\"\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateActiveModule,\r\n  updateUnreadMailsCount,\r\n  updateSeachText,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(ChangePassword);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\Signup.jsx",["263","264","265","266","267","268"],"import { NavLink } from \"react-router-dom\";\r\nimport \"../Assets/CSS/dashlite.css\";\r\n\r\nconst Signup = () => {\r\n  return (\r\n    <>\r\n      <div class=\"nk-block nk-block-middle nk-auth-body\">\r\n        <div class=\"nk-block-head\">\r\n          <div class=\"nk-block-head-content\">\r\n            <h5 class=\"nk-block-title\">Register</h5>\r\n            <div class=\"nk-block-des\">\r\n              <p>Create New Account</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <form action=\"/demo3/pages/auths/auth-success.html\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\" for=\"name\">\r\n              Name\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-lg\"\r\n              id=\"name\"\r\n              placeholder=\"Enter your name\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\" for=\"email\">\r\n              Email or Username\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-lg\"\r\n              id=\"email\"\r\n              placeholder=\"Enter your email address or username\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\" for=\"password\">\r\n              Passcode\r\n            </label>\r\n            <div class=\"form-control-wrap\">\r\n              <a\r\n                tabindex=\"-1\"\r\n                href=\"#\"\r\n                class=\"form-icon form-icon-right passcode-switch\"\r\n                data-target=\"password\"\r\n              >\r\n                <em class=\"passcode-icon icon-show icon ni ni-eye\"></em>\r\n                <em class=\"passcode-icon icon-hide icon ni ni-eye-off\"></em>\r\n              </a>\r\n              <input\r\n                type=\"password\"\r\n                class=\"form-control form-control-lg\"\r\n                id=\"password\"\r\n                placeholder=\"Enter your passcode\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <div class=\"custom-control custom-control-xs custom-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"custom-control-input\"\r\n                id=\"checkbox\"\r\n              />\r\n              <label class=\"custom-control-label\" for=\"checkbox\">\r\n                I agree to Dashlite\r\n                <a tabindex=\"-1\" href=\"#\">\r\n                  Privacy Policy\r\n                </a>\r\n                &amp;\r\n                <a tabindex=\"-1\" href=\"#\">\r\n                  Terms.\r\n                </a>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <button class=\"btn btn-lg btn-primary btn-block\">Register</button>\r\n          </div>\r\n        </form>\r\n        <div class=\"form-note-s2 pt-4\">\r\n          Already have an account ?\r\n          <NavLink exact to=\"/\">\r\n            <strong>Sign in instead</strong>\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n      <div class=\"nk-block nk-auth-footer\">\r\n        <div class=\"nk-block-between\">\r\n          <ul class=\"nav nav-sm\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                Terms & Condition\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                Privacy Policy\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                Help\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\Auth\\UpdateProfile.jsx",["269","270","271","272"],"import { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Navbar from \"../components/navbar/Navbar\";\r\nimport { UPDATE_PROFILE, LOGS_ADD } from \"../config/constants\";\r\nimport * as Api from \"../util/api/ApicallModule\";\r\nimport \"../Assets/CSS/dashlite.css\";\r\nimport Toaster from \"../util/toaster/Toaster\";\r\nimport {\r\n  updateActiveModule,\r\n  updateSeachText,\r\n  updateUnreadMailsCount,\r\n  updateUnreadCall,\r\n  updateAllCall,\r\n  updateArchiveCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  clearUnreadCache,\r\n} from \"../redux/action/InboxAction\";\r\nimport { connect } from \"react-redux\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./UpdateProfile.css\";\r\nimport HelpModal from \"../components/common/HelpModal\";\r\n\r\nconst UpdateProfile = (props) => {\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  let formData = {\r\n    full_name: \"\",\r\n    room_number: \"\",\r\n    ext_number: \"\",\r\n    emp_id: \"\",\r\n  };\r\n  const [user, setUser] = useState(formData);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const { full_name, room_number, ext_number, emp_id } = user;\r\n\r\n  const updatingKeyApi = () => {\r\n    props.updateUnreadCall(0);\r\n\r\n    props.updateAllCall(0);\r\n\r\n    props.updateArchiveCall(0);\r\n\r\n    props.updateSentCall(0);\r\n\r\n    props.updateCrashedCall(0);\r\n\r\n    props.updateStarredCall(0);\r\n  };\r\n\r\n  const handleUpdateProfile = async (e) => {\r\n    e.preventDefault();\r\n    const format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\r\n    if (full_name === \"\") {\r\n      setError(\"* The Full Name field is required.\");\r\n    } else if (format.test(full_name)) {\r\n      setError(\"* Don't use Special character in your name.\");\r\n    } else if (ext_number === \"\") {\r\n      setError(\"* The Tel Extension field is required.\");\r\n    } else if (room_number === \"\") {\r\n      setError(\"* The Room Number field is required.\");\r\n    } else if (emp_id === \"\") {\r\n      setError(\"* The Employee Id field is required.\");\r\n    } else {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      const resp = await Api.ApiHandle(`${UPDATE_PROFILE}`, user, \"PUT\");\r\n      if (resp.status === 1) {\r\n        setLoading(false);\r\n        // updatingKeyApi();\r\n        props?.clearUnreadCache(0);\r\n        props?.setIsProfileUpdated(true);\r\n        Toaster(\"success\", \"Profile updated successfully\");\r\n        setError(\"\");\r\n        history.push(\"/mail\");\r\n      } else {\r\n        setLoading(false);\r\n        Toaster(\"error\", resp.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInputFields = (id, inputValue) => {\r\n    // Use numbers only pattern, from 0 to 9 with \\-\r\n    // var regex = /[^0-9\\-]/gi;\r\n    // Replace other characters that are not in regex pattern\r\n    // let value = inputValue.replace(regex, \"\")\r\n    if (id === \"room_number\") {\r\n      setUser({\r\n        ...user,\r\n        room_number: inputValue,\r\n      });\r\n    }\r\n    if (id === \"tel_extn\") {\r\n      setUser({\r\n        ...user,\r\n        ext_number: inputValue,\r\n      });\r\n    }\r\n    if (id === \"full_name\") {\r\n      setUser({\r\n        ...user,\r\n        full_name: inputValue,\r\n      });\r\n    }\r\n    if (id === \"emp_id\") {\r\n      setUser({\r\n        ...user,\r\n        emp_id: inputValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-block nk-block-middle nk-auth-body\">\r\n        <div className=\"nk-block-head\">\r\n          <div className=\"nk-block-head-content\">\r\n            <div style={{ marginBottom: 60 }}>\r\n              <Navbar />\r\n            </div>\r\n            <HelpModal />\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              {\r\n                <em\r\n                  className=\"icon ni ni-arrow-left\"\r\n                  style={{ marginRight: \"106%\", marginLeft: \"-112%\" }}\r\n                  onClick={() => {\r\n                    history.push(\"/mail\");\r\n                    props.updateActiveModule(\"Unread\");\r\n                  }}\r\n                />\r\n              }\r\n              <h5 className=\"nk-block-title\">Update Profile</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ color: \"red\" }}>{error !== \"\" ? error : \"\"}</div>\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"First Name\">\r\n              Full Name\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-lg\"\r\n              id=\"full_name\"\r\n              placeholder=\"Enter Full Name...\"\r\n              name=\"full_name\"\r\n              value={full_name}\r\n              maxLength={40}\r\n              minLength={6}\r\n              onChange={(e) => handleInputFields(e.target.id, e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"last_name\">\r\n              Tel. Extn\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-lg\"\r\n              id=\"tel_extn\"\r\n              placeholder=\"Enter Tel. Extn... \"\r\n              name=\"tel_extn\"\r\n              value={ext_number}\r\n              onChange={(e) => handleInputFields(e.target.id, e.target.value)}\r\n              maxLength=\"4\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"phone_number\">\r\n              Room Number\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              pattern=\"[0-9]{10}\"\r\n              className=\"input form-control form-control-lg\"\r\n              id=\"room_number\"\r\n              placeholder=\"Enter Room Number...\"\r\n              name=\"room_number\"\r\n              value={room_number}\r\n              onChange={(e) => handleInputFields(e.target.id, e.target.value)}\r\n              maxLength=\"5\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\" htmlFor=\"phone_number\">\r\n              Employee Id\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              pattern=\"[0-9]{10}\"\r\n              className=\"input form-control form-control-lg\"\r\n              id=\"emp_id\"\r\n              placeholder=\"Enter Employee id...\"\r\n              name=\"emp_id\"\r\n              value={emp_id}\r\n              onChange={(e) => handleInputFields(e.target.id, e.target.value)}\r\n              maxLength=\"10\"\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"form-group\"\r\n            onClick={(e) => {\r\n              handleUpdateProfile(e);\r\n            }}\r\n          >\r\n            <button\r\n              className=\"btn btn-lg btn-primary btn-block\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? (\r\n                <Loader type=\"ThreeDots\" color=\"#FFF\" height={20} width={20} />\r\n              ) : (\r\n                \"Submit\"\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// export default UpdateProfile\r\n\r\nconst mapActionToProps = {\r\n  updateActiveModule,\r\n  updateUnreadMailsCount,\r\n  updateSeachText,\r\n  updateUnreadCall,\r\n  updateAllCall,\r\n  updateArchiveCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  clearUnreadCache,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(UpdateProfile);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Mailbox.jsx",["273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"react-modal\";\r\nimport Axios from \"axios\";\r\n\r\nimport \"../Assets/CSS/2ColumnStyle.css\";\r\nimport \"../Assets/CSS/dashlite.css\";\r\n// import \"../Assets/fonts\";\r\nimport Navbar from \"../components/navbar/Navbar\";\r\nimport Sidebar from \"../components/sidebar/Sidebar\";\r\nimport Inbox from \"./Inbox\";\r\nimport * as Api from \"../util/api/ApicallModule\";\r\nimport { formatDateTime } from \"../util/dateFormat/DateFormat\";\r\nimport ComposeMail from \"../components/sidebar/composeMail\";\r\nimport { MAIL_ACTIONS } from \"../util\";\r\nimport {\r\n  GET_ALL_MAIL,\r\n  GET_STATION_FILTER,\r\n  GET_UNREAD_COUNT,\r\n  UPDATE_MAIL_BY_ID,\r\n  GET_TOTAL_MAIL_COUNT,\r\n  GET_FOLDER,\r\n  MOST_FREQUENT_STATUS,\r\n  GET_UNREAD_MAIL,\r\n  // GET_TOTAL_UNREAD_MAIL_COUNT,\r\n} from \"../config/constants\";\r\nimport {\r\n  updateUnreadMailsCount,\r\n  updateUserData,\r\n  updateSwitching,\r\n  updateUnreadCache,\r\n  updateUnreadCall,\r\n  updateArchiveCache,\r\n  updateArchiveCall,\r\n  updateAllCache,\r\n  updateAllCall,\r\n  updateSeachText,\r\n  updateSentCache,\r\n  updateSentCall,\r\n  updateStarredCache,\r\n  updateStarredCall,\r\n  updateCrashedCache,\r\n  updateCrashedCall,\r\n  updateActiveModule,\r\n  updateFolderCachedData,\r\n  updateMostFrequent,\r\n} from \"../redux/action/InboxAction\";\r\nimport MailView from \"./mailview/MailView\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { UNREAD_CONSTANTS_VALUES } from \"../util\";\r\nimport HelpModal from \"../components/common/HelpModal\";\r\nlet page = 1;\r\n\r\nlet total = 0;\r\nlet autoRefreshIntervalUnread;\r\nlet autoRefreshIntervalAll;\r\nlet autoRefreshIntervalCrashed;\r\nlet currentMailData;\r\n\r\nconst usePrevious = (value) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n};\r\n\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    height: \"0px\",\r\n    width: \"0px\",\r\n    zIndex: 2,\r\n  },\r\n  content: {\r\n    position: \"fixed\",\r\n    top: \"10px\",\r\n    left: \"0px\",\r\n    width: \"0px\",\r\n    height: \"0px\",\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    zIndex: \"10001\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n};\r\n\r\nconst Mailbox = (props) => {\r\n  let limit = localStorage.getItem(\"limit\");\r\n  // let limit = 20;\r\n\r\n  let logData = {};\r\n  const [nextClick, setNextClick] = useState(false);\r\n  const [dataNextPrevClick, setDataNextPrevClick] = useState();\r\n  const [clicked, setClicked] = useState();\r\n  const [prevCacheClicked, setPrevCacheClicked] = useState();\r\n  const [backButton, setBackButton] = useState(false);\r\n  const [isAction, setIsAction] = useState(false);\r\n  const [isMailAddedToFolder, setIsMailAddedToFolder] = useState(false);\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n\r\n  const cachedData = () => {\r\n    switch (props?.isActiveModule) {\r\n      case \"Unread\":\r\n        return props?.unreadCache?.current;\r\n      case \"Archive\":\r\n        return props?.archiveCache?.current;\r\n      case \"All\":\r\n        return props?.allCache?.current;\r\n      case \"Sent\":\r\n        return props?.sentCache?.current;\r\n      case \"Crashed\":\r\n        return props?.crashedCache?.current;\r\n      case \"Starred\":\r\n        return props?.starredCache?.current;\r\n\r\n      default:\r\n        return props?.inboxMailData;\r\n    }\r\n  };\r\n\r\n  const [activeModule, setActiveModule] = useState(\"inbox\");\r\n  const [inboxMailData, setInboxMailData] = useState([]);\r\n  const [noOfMails, setNoOfMails] = useState(0);\r\n  const [selectedMailId, setSelectedMailId] = useState(0);\r\n  const [filterOptions, setFilterOptions] = useState({\r\n    mail_action: MAIL_ACTIONS.UNREAD,\r\n  });\r\n  const prevFilter = usePrevious(filterOptions);\r\n  const [selectedStation, setSelectedstation] = useState([]);\r\n  const [visiable, setVisiable] = useState(false);\r\n  const [stationTag, setStationTag] = useState([]);\r\n  const [switchUser, setSwitchUser] = useState(false);\r\n  const [popupMail, setPopupMail] = useState(false);\r\n  const [loader, setLoader] = useState(true);\r\n  const [selectedMailTo, setSelectedMailTo] = useState([]);\r\n  const [mailIds, setMailIds] = useState([]);\r\n  const [uniqueMailId, setUniqueMailId] = useState(\"\");\r\n  const [selectedUserMailId, setSelectedUserMailId] = useState(0);\r\n  const [currentCount, setCurrentCount] = useState(0);\r\n  const [isLoadingForCount, setIsLoadingForCount] = useState(false);\r\n  const [designationId, setDesignationId] = useState(0);\r\n  const [countmail, setCountMail] = useState(0);\r\n  const [isFolderLoaderId, setIsFolderLoaderId] = useState(\"\");\r\n  const [disablePreviousNext, setDisablePreviousNext] = useState({\r\n    previous: true,\r\n    next: false,\r\n  });\r\n  currentMailData =\r\n    props?.filterOptions?.by_stations ||\r\n    props?.filterOptions?.search_data ||\r\n    typeof props.isActiveModule === \"number\"\r\n      ? inboxMailData\r\n      : cachedData();\r\n  useEffect(() => {\r\n    const ourRequest = Axios.CancelToken.source();\r\n    // const requestTotalCount = Axios.CancelToken.source();\r\n    if (typeof prevFilter !== \"undefined\" && prevFilter !== filterOptions) {\r\n      getAllMails(\"\", ourRequest.token);\r\n      // getTotalCount(\"\", requestTotalCount.token);\r\n    }\r\n    getUnreadCount(ourRequest.token);\r\n    if (\r\n      filterOptions.by_stations ||\r\n      filterOptions.search_data ||\r\n      filterOptions.folder\r\n    ) {\r\n      clearInterval(autoRefreshIntervalUnread);\r\n      clearInterval(autoRefreshIntervalAll);\r\n      clearInterval(autoRefreshIntervalCrashed);\r\n    }\r\n\r\n    return () => {\r\n      ourRequest.cancel(); // <-- 3rd step\r\n      // requestTotalCount.cancel();\r\n    };\r\n  }, [filterOptions]);\r\n\r\n  // useEffect(() => {\r\n  //   props.updateFolderCachedData(\"delete\");\r\n  //   if (props.isPreferencedChanged) {\r\n  //     window.location.reload();\r\n  //   }\r\n  // }, [props.isPreferencedChanged]);\r\n\r\n  // useEffect(() => {\r\n  //   fetchFolderData();\r\n  // }, [backButton, isAction]);\r\n  // const fetchFolderData = async () => {\r\n  //   if (backButton && isAction && typeof filterOptions?.folder === \"number\") {\r\n  //     setLoader(true);\r\n  //     const baseUrl = GET_ALL_MAIL;\r\n  //     let urlCurrent = `?limit=${limit}&pageNo=${page}`;\r\n  //     let urlNext = `?limit=${limit}&pageNo=${page + 1}`;\r\n  //     for (const [key, value] of Object.entries(filterOptions)) {\r\n  //       urlCurrent += `&${key}=${value}`;\r\n  //       urlNext += `&${key}=${value}`;\r\n  //     }\r\n  //     await getAllMailsApiCall(baseUrl, urlCurrent, \"\", \"current\");\r\n  //     await getAllMailsApiCall(baseUrl, urlNext, \"\", \"next\");\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    let token = localStorage.getItem(\"auth\");\r\n    if (token) {\r\n      window.history.pushState(null, null, window.location.href);\r\n      window.addEventListener(\"popstate\", function (event) {\r\n        window.history.pushState(null, null, window.location.href);\r\n      });\r\n    }\r\n    props.updateActiveModule(\"Unread\");\r\n    delete filterOptions.search_data;\r\n    props.updateSeachText({});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.switching) {\r\n      getUnreadCount();\r\n      setActiveModule(\"inbox\");\r\n    }\r\n  }, [props.switching]);\r\n\r\n  useEffect(() => {\r\n    if (props?.userData?.designations) {\r\n      setDesignationId(\r\n        () =>\r\n          props?.userData?.designations.filter((item) => {\r\n            if (item.default_desig) return item;\r\n          })[0]?.id\r\n      );\r\n      getAllMails();\r\n    }\r\n  }, [props?.userData]);\r\n\r\n  useEffect(() => {\r\n    const ourRequest = Axios.CancelToken.source();\r\n\r\n    if (switchUser) {\r\n      setActiveModule(\"inbox\");\r\n      setInboxMailData([{ loader: 1 }]);\r\n      setFilterOptions({ mail_action: MAIL_ACTIONS.UNREAD });\r\n      setSwitchUser(false);\r\n    }\r\n\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        clearInterval(autoRefreshIntervalAll);\r\n        clearInterval(autoRefreshIntervalCrashed);\r\n        if (limit) {\r\n          autoRefreshIntervalUnread = setInterval(() => {\r\n            callAutoRefreshUnread(ourRequest.token);\r\n          }, 300000);\r\n        }\r\n\r\n        break;\r\n      case \"All\":\r\n        clearInterval(autoRefreshIntervalUnread);\r\n        clearInterval(autoRefreshIntervalCrashed);\r\n\r\n        autoRefreshIntervalAll = setInterval(() => {\r\n          callAutoRefreshAll(ourRequest.token);\r\n        }, 300000);\r\n\r\n        break;\r\n      case \"Crashed\":\r\n        clearInterval(autoRefreshIntervalUnread);\r\n        clearInterval(autoRefreshIntervalAll);\r\n\r\n        autoRefreshIntervalCrashed = setInterval(() => {\r\n          callAutoRefreshCrashed(ourRequest.token);\r\n        }, 300000);\r\n\r\n        break;\r\n\r\n      default:\r\n        clearInterval(autoRefreshIntervalUnread);\r\n        clearInterval(autoRefreshIntervalAll);\r\n        clearInterval(autoRefreshIntervalCrashed);\r\n\r\n        break;\r\n    }\r\n  }, [props.isActiveModule]);\r\n\r\n  useEffect(() => {\r\n    fetchMostFrequentStatus();\r\n  }, []);\r\n  const fetchMostFrequentStatus = async () => {\r\n    logDataFunction(\"SELECT MOST FREQUENT / MOST RECENT\", 0, 0);\r\n    const resp = await Api.ApiHandle(MOST_FREQUENT_STATUS, \"\", \"GET\", logData);\r\n    if (resp && resp.status === 1) {\r\n      const freqStatus = Number(resp?.data?.recent_frequent_type);\r\n      props?.updateMostFrequent(freqStatus);\r\n    }\r\n  };\r\n\r\n  const getUnreadCount = async (cancelToken, auto) => {\r\n    logDataFunction(\"UNREAD COUNT MAIL\", 0, 0);\r\n    if (props?.unreadCall === 0 || auto) {\r\n      const resp = await Api.ApiHandle(\r\n        `${GET_UNREAD_COUNT}`,\r\n        \"\",\r\n\r\n        \"GET\",\r\n        logData,\r\n        cancelToken\r\n      );\r\n      if (resp && resp.status === 1) {\r\n        setLoader(false);\r\n        props?.updateUnreadMailsCount(resp.data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getAllMailsApiCall = async (baseUrl, url, cancelToken, pageType) => {\r\n    let mailData = [];\r\n\r\n    const resp = await Api.ApiHandle(\r\n      baseUrl + url,\r\n      \"\",\r\n      \"GET\",\r\n      logData,\r\n      cancelToken\r\n    );\r\n\r\n    if (resp && resp?.status === 1) {\r\n      resp.data.data.map((inbox) => {\r\n        const flags =\r\n          designationId === inbox?.From?.id\r\n            ? checkFlags(inbox.from_action)\r\n            : checkFlags(inbox.mail_action);\r\n        const obj = {\r\n          id:\r\n            // filterOptions.mail_action === \"69\"\r\n            //   ? filterOptions?.by_stations\r\n            //     ? inbox.id\r\n            //     : inbox.user_mail_id\r\n            //   :\r\n            inbox.id,\r\n          userMailId:\r\n            // filterOptions.mail_action === \"69\"\r\n            //   ? filterOptions?.by_stations\r\n            //     ? inbox?.user_mail_id\r\n            //     : inbox?.mail_id\r\n            //   :\r\n            inbox?.user_mail_id,\r\n          mailAction: inbox.mail_action,\r\n          from: inbox?.Mail?.Source?.designation,\r\n          sourceId: inbox?.Mail?.Source?.id,\r\n          actualFormId: inbox?.From?.id,\r\n          toId: inbox?.To?.id,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          branch: inbox?.Mail?.Source?.branch,\r\n          subject: inbox?.Mail?.subject,\r\n          op: inbox?.Mail?.op,\r\n          sentEnabled: inbox.sent_enabled,\r\n          timeStamp: formatDateTime(inbox?.updatedAt),\r\n          isReadEnabled: inbox?.is_read_enabled,\r\n          from_id: inbox?.From?.id,\r\n          fromIsReadEnabled: inbox?.from_read_enabled,\r\n          fromIsRead: inbox?.from_is_read,\r\n          fromAction: inbox?.from_action,\r\n          comments_data: inbox.comments_data,\r\n          To: inbox.To,\r\n          updatedAt: inbox?.updatedAt,\r\n          user_mail_ids: [inbox?.id],\r\n          attachment_ids: [inbox?.attachement_ids],\r\n          umail_id: inbox.comments_data[0]?.umail_id,\r\n          // FirstName: inbox?.Mail?.Source.designations?.first_name,\r\n        };\r\n        if (inbox.Mail) {\r\n          mailData.push({ ...obj, ...flags });\r\n        }\r\n      });\r\n\r\n      props.switching && props.updateSwitching(false);\r\n\r\n      if (!pageType) {\r\n        setInboxMailData(mailData);\r\n      } else {\r\n        let data = { key: pageType, data: mailData };\r\n        settingCache(data);\r\n      }\r\n      if (!filterOptions.by_stations) {\r\n        updateKeyForNextCall();\r\n      }\r\n      setLoader(false);\r\n    } else {\r\n      setLoader(false);\r\n    }\r\n\r\n    return mailData;\r\n  };\r\n\r\n  const updatingKeyForCall = () => {\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        props.updateUnreadCall(0);\r\n        break;\r\n      case \"All\":\r\n        props.updateAllCall(0);\r\n        break;\r\n      case \"Archive\":\r\n        props.updateArchiveCall(0);\r\n        break;\r\n      case \"Sent\":\r\n        props.updateSentCall(0);\r\n        break;\r\n      case \"Crashed\":\r\n        props.updateCrashedCall(0);\r\n        break;\r\n      case \"Starred\":\r\n        props.updateStarredCall(0);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getAllMails = async (type, cancelToken) => {\r\n    total = 0;\r\n\r\n    if (type === \"back\") {\r\n      page = page;\r\n    } else {\r\n      page = 1;\r\n    }\r\n    if (page <= 0) {\r\n      page = 1;\r\n    }\r\n\r\n    logDataFunction(\"GET ALL MAIL\", 0, 0);\r\n    let baseUrl = GET_ALL_MAIL;\r\n    let urlCurrent = `?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `?limit=${limit}&pageNo=${page + 1}`;\r\n\r\n    let totalCountURL = \"?\";\r\n    for (const [key, value] of Object.entries(filterOptions)) {\r\n      urlCurrent += `&${key}=${value}`;\r\n      urlNext += `&${key}=${value}`;\r\n\r\n      totalCountURL += `&${key}=${value}`;\r\n    }\r\n\r\n    // if (filterOptions.mail_action === \"69\") {\r\n    //   logDataFunction(\"GET UNREAD MAIL\", 0, 0);\r\n    //   baseUrl = GET_UNREAD_MAIL;\r\n    // }\r\n\r\n    getTotalCount(totalCountURL, \"\", type);\r\n    if (filterOptions.by_stations) {\r\n      logDataFunction(\"STATION FILTER\", 0, 0);\r\n      baseUrl = GET_STATION_FILTER;\r\n      updatingKeyForCall();\r\n      setLoader(true);\r\n      getAllMailsApiCall(baseUrl, urlCurrent, cancelToken);\r\n    } else if (filterOptions.search_data) {\r\n      logDataFunction(\"SEARCH FILTER\", 0, 0);\r\n      updatingKeyForCall();\r\n      setLoader(true);\r\n      getAllMailsApiCall(baseUrl, urlCurrent, cancelToken);\r\n    } else if (filterOptions.folder) {\r\n      logDataFunction(\"FOLDER FILTER\", 0, 0);\r\n      setLoader(true);\r\n      getAllMailsApiCall(baseUrl, urlCurrent, cancelToken);\r\n    } else if (keyForNextCall() === 0) {\r\n      setLoader(true);\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: false };\r\n      });\r\n\r\n      await getAllMailsApiCall(baseUrl, urlCurrent, \"\", \"current\");\r\n      await getAllMailsApiCall(baseUrl, urlNext, \"\", \"next\");\r\n\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: true };\r\n      });\r\n    } else if (type === \"refresh\") {\r\n      setLoader(true);\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: false };\r\n      });\r\n\r\n      getAllMailsApiCall(baseUrl, urlCurrent, \"\", \"current\");\r\n      await getAllMailsApiCall(baseUrl, urlNext, \"\", \"next\");\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: true };\r\n      });\r\n    }\r\n  };\r\n\r\n  const getNextClick = async () => {\r\n    setLoader(true);\r\n    const mailData = [];\r\n    let nextPage = page + 1;\r\n\r\n    logDataFunction(\"ALL MAIL ON NEXT CLICK\", 0, 0);\r\n    let baseUrl = GET_ALL_MAIL;\r\n    let url = `?limit=${limit}&pageNo=${nextPage}`;\r\n    let totalCountURL = \"?\";\r\n\r\n    for (const [key, value] of Object.entries(filterOptions)) {\r\n      url += `&${key}=${value}`;\r\n      totalCountURL += `&${key}=${value}`;\r\n    }\r\n\r\n    if (filterOptions.is_crashed) url += \"&is_crashed=0\";\r\n    if (filterOptions.by_stations) {\r\n      logDataFunction(\"NEXT CLICK ON STATION FILTER\", 0, 0);\r\n      baseUrl = GET_STATION_FILTER;\r\n    }\r\n\r\n    getTotalCount(totalCountURL);\r\n    const resp = await Api.ApiHandle(baseUrl + url, \"\", \"GET\");\r\n\r\n    if (resp && resp.status === 1) {\r\n      resp.data.data.map((inbox, i) => {\r\n        const flags =\r\n          designationId === inbox?.From?.id\r\n            ? checkFlags(inbox.from_action)\r\n            : checkFlags(inbox.mail_action);\r\n        const obj = {\r\n          id: inbox?.id,\r\n          userMailId: inbox?.user_mail_id,\r\n          mailAction: inbox.mail_action,\r\n          sourceId: inbox?.Mail?.Source?.id,\r\n          from: inbox?.Mail.Source?.designation,\r\n          actualFormId: inbox?.From?.id,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          branch: inbox?.Mail.Source?.branch,\r\n          subject: inbox?.Mail.subject,\r\n          op: inbox?.Mail.op,\r\n          sentEnabled: inbox.sent_enabled,\r\n          timeStamp: formatDateTime(inbox?.updatedAt),\r\n          isReadEnabled: inbox?.is_read_enabled,\r\n          from_id: inbox?.From?.id,\r\n          fromAction: inbox?.from_action,\r\n          fromIsReadEnabled: inbox?.from_read_enabled,\r\n          fromIsRead: inbox?.from_is_read,\r\n          comments_data: inbox.comments_data,\r\n          To: inbox.To,\r\n\r\n          attachment_ids: [inbox?.attachment_ids],\r\n          umail_id: inbox.comments_data[0]?.umail_id,\r\n        };\r\n        if (inbox.Mail) {\r\n          mailData.push({ ...obj, ...flags });\r\n        }\r\n      });\r\n      // total = limit * page;\r\n      // total = total > totalCount ? totalCount : total;\r\n\r\n      setInboxMailData(mailData);\r\n      let data = { key: \"next\", data: mailData };\r\n      settingCache(data);\r\n\r\n      setLoader(false);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const getNextClickCache = async () => {\r\n    const ourRequest = Axios.CancelToken.source();\r\n    page = page + 1;\r\n    let totalCountURL = \"?\";\r\n    logDataFunction(\"GET NEXT PAGE CACHE\", 0, 0);\r\n    let baseUrl =\r\n      // filterOptions.mail_action === '69' ? GET_UNREAD_MAIL :\r\n      GET_ALL_MAIL;\r\n    let urlCurrent = `?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `?limit=${limit}&pageNo=${page + 1}`;\r\n    let urlPrevious =\r\n      page === 1\r\n        ? `?limit=${limit}&pageNo=${page}`\r\n        : `?limit=${limit}&pageNo=${page - 1}`;\r\n\r\n    for (const [key, value] of Object.entries(filterOptions)) {\r\n      urlCurrent += `&${key}=${value}`;\r\n      urlNext += `&${key}=${value}`;\r\n      urlPrevious += `&${key}=${value}`;\r\n\r\n      totalCountURL += `&${key}=${value}`;\r\n    }\r\n    if (filterOptions.by_stations) {\r\n      logDataFunction(\"GET CACHE MAIL ON NEXT CLICK BY STATION FILTER\", 0, 0);\r\n      baseUrl = GET_STATION_FILTER;\r\n    }\r\n    getTotalCount(totalCountURL, \"\");\r\n    let data1, data2;\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        data1 = { key: \"previous\", data: props.unreadCache.current };\r\n        settingCache(data1);\r\n        if (!(props.unreadCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.unreadCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      case \"All\":\r\n        data1 = { key: \"previous\", data: props.allCache.current };\r\n        settingCache(data1);\r\n        if (!(props.allCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.allCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      case \"Archive\":\r\n        data1 = { key: \"previous\", data: props.archiveCache.current };\r\n        settingCache(data1);\r\n        if (!(props.archiveCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.archiveCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      case \"Sent\":\r\n        data1 = { key: \"previous\", data: props.sentCache.current };\r\n        settingCache(data1);\r\n\r\n        if (!(props.sentCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.sentCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      case \"Crashed\":\r\n        data1 = { key: \"previous\", data: props.crashedCache.current };\r\n        settingCache(data1);\r\n        if (!(props.crashedCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.crashedCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      case \"Starred\":\r\n        data1 = { key: \"previous\", data: props.starredCache.current };\r\n        settingCache(data1);\r\n        if (!(props.starredCache.next.length === 0)) {\r\n          data2 = { key: \"current\", data: props.starredCache.next };\r\n          settingCache(data2);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (\r\n      typeof props.isActiveModule === \"number\" ||\r\n      filterOptions.by_stations ||\r\n      filterOptions.search_data\r\n    ) {\r\n      getAllMailsApiCall(baseUrl, urlCurrent, ourRequest.token);\r\n    } else {\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: false };\r\n      });\r\n\r\n      await getAllMailsApiCall(baseUrl, urlNext, ourRequest.token, \"next\");\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, next: true };\r\n      });\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const getPreviousClickCache = async () => {\r\n    // setCountMail(countmail - 1);\r\n    const ourRequest = Axios.CancelToken.source();\r\n\r\n    page = page - 1;\r\n    let totalCountURL = \"?\";\r\n    logDataFunction(\"GET PREVIOS PAGE CACHE\", 0, 0);\r\n    let baseUrl =\r\n      // filterOptions.mail_action === '69' ? GET_UNREAD_MAIL :\r\n      GET_ALL_MAIL;\r\n\r\n    if (page <= 0) {\r\n      page = 1;\r\n    }\r\n\r\n    let urlCurrent = `?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `?limit=${limit}&pageNo=${page + 1}`;\r\n    let urlPrevious =\r\n      page === 1\r\n        ? `?limit=${limit}&pageNo=${page}`\r\n        : `?limit=${limit}&pageNo=${page - 1}`;\r\n    for (const [key, value] of Object.entries(filterOptions)) {\r\n      urlCurrent += `&${key}=${value}`;\r\n      urlNext += `&${key}=${value}`;\r\n      urlPrevious += `&${key}=${value}`;\r\n\r\n      totalCountURL += `&${key}=${value}`;\r\n    }\r\n    if (filterOptions.by_stations) {\r\n      logDataFunction(\r\n        \"GET CACHE MAIL ON PREVIOUS CLICK BY STATION FILTER\",\r\n        0,\r\n        0\r\n      );\r\n\r\n      baseUrl = GET_STATION_FILTER;\r\n    }\r\n    getTotalCount(totalCountURL, \"\");\r\n    let data1, data2;\r\n\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        data1 = { key: \"current\", data: props.unreadCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.unreadCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      case \"All\":\r\n        data1 = { key: \"current\", data: props.allCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.allCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      case \"Archive\":\r\n        data1 = { key: \"current\", data: props.archiveCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.archiveCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      case \"Sent\":\r\n        data1 = { key: \"current\", data: props.sentCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.sentCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      case \"Crashed\":\r\n        data1 = { key: \"current\", data: props.crashedCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.crashedCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      case \"Starred\":\r\n        data1 = { key: \"current\", data: props.starredCache.previous };\r\n        settingCache(data1);\r\n        data2 = { key: \"next\", data: props.starredCache.current };\r\n        settingCache(data2);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (\r\n      typeof props.isActiveModule === \"number\" ||\r\n      filterOptions.by_stations ||\r\n      filterOptions.search_data\r\n    ) {\r\n      getAllMailsApiCall(baseUrl, urlCurrent, ourRequest.token);\r\n    } else {\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, previous: false };\r\n      });\r\n      await getAllMailsApiCall(\r\n        baseUrl,\r\n        urlPrevious,\r\n        ourRequest.token,\r\n        \"previous\"\r\n      );\r\n      setDisablePreviousNext((prev) => {\r\n        return { ...prev, previous: true };\r\n      });\r\n    }\r\n  };\r\n\r\n  const getPrevClick = async (e) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setLoader(true);\r\n    const mailData = [];\r\n\r\n    let prevPage = page - 1;\r\n    page = page - 1;\r\n\r\n    if (page <= 0) {\r\n      prevPage = 1;\r\n      page = 1;\r\n    }\r\n\r\n    logDataFunction(\"ALL MAIL ON PREVIOUS CLICK\", 0, 0);\r\n    let baseUrl = GET_ALL_MAIL;\r\n    let url = `?limit=${limit}&pageNo=${prevPage}`;\r\n    let totalCountURL = \"?\";\r\n\r\n    for (const [key, value] of Object.entries(filterOptions)) {\r\n      url += `&${key}=${value}`;\r\n      totalCountURL += `&${key}=${value}`;\r\n    }\r\n\r\n    if (filterOptions.is_crashed) url += \"&is_crashed=0\";\r\n    if (filterOptions.by_stations) {\r\n      logDataFunction(\"PREVIOUS CLICK ON STATION FILTER\", 0, 0);\r\n      baseUrl = GET_STATION_FILTER;\r\n    }\r\n    getTotalCount(totalCountURL);\r\n    const resp = await Api.ApiHandle(baseUrl + url, \"\", \"GET\");\r\n\r\n    if (resp && resp.status === 1) {\r\n      resp.data.data.map((inbox, i) => {\r\n        const flags =\r\n          designationId === inbox?.From?.id\r\n            ? checkFlags(inbox.from_action)\r\n            : checkFlags(inbox.mail_action);\r\n        const obj = {\r\n          id: inbox?.id,\r\n          userMailId: inbox?.user_mail_id,\r\n          sourceId: inbox?.Mail?.Source?.id,\r\n          mailAction: inbox.mail_action,\r\n          from: inbox?.Mail.Source?.designation,\r\n          actualFormId: inbox?.From?.id,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          branch: inbox?.Mail.Source?.branch,\r\n          subject: inbox?.Mail.subject,\r\n          op: inbox?.Mail.op,\r\n          sentEnabled: inbox.sent_enabled,\r\n          timeStamp: formatDateTime(inbox?.updatedAt),\r\n          isReadEnabled: inbox?.is_read_enabled,\r\n          fromAction: inbox?.from_action,\r\n          from_id: inbox?.From?.id,\r\n          fromIsReadEnabled: inbox?.from_read_enabled,\r\n          fromIsRead: inbox?.from_is_read,\r\n          comments_data: inbox.comments_data,\r\n          To: inbox.To,\r\n\r\n          attachment_ids: [inbox?.attachment_ids],\r\n          umail_id: inbox.comments_data[0]?.umail_id,\r\n        };\r\n        if (inbox.Mail) {\r\n          mailData.push({ ...obj, ...flags });\r\n        }\r\n      });\r\n      // total = limit * page;\r\n      // total = total > totalCount ? totalCount : total;\r\n\r\n      setInboxMailData(mailData);\r\n      let data = { key: \"previous\", data: mailData };\r\n      settingCache(data);\r\n\r\n      setLoader(false);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const callAutoRefreshUnread = async (cancelToken) => {\r\n    logDataFunction(\"REFRESH UNREAD MAIL\", 0, 0);\r\n\r\n    let urlCurrent = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page + 1}`;\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: false };\r\n    });\r\n\r\n    await getAllMailsApiCall(urlCurrent, `&mail_action=69`, \"\", \"current\");\r\n    await getAllMailsApiCall(urlNext, `&mail_action=69`, \"\", \"next\");\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: true };\r\n    });\r\n\r\n    getUnreadCount(cancelToken, \"autoRefresh\");\r\n    getTotalCount(`?&mail_action=69`, cancelToken);\r\n    props.updateAllCall(0);\r\n    props.updateCrashedCall(0);\r\n  };\r\n\r\n  const callAutoRefreshAll = async (cancelToken) => {\r\n    logDataFunction(\"REFRESH ALL\", 0, 0);\r\n    let urlCurrent = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page + 1}`;\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: false };\r\n    });\r\n\r\n    await getAllMailsApiCall(urlCurrent, \"\", \"\", \"current\");\r\n    await getAllMailsApiCall(urlNext, \"\", \"\", \"next\");\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: true };\r\n    });\r\n\r\n    getUnreadCount(cancelToken, \"autoRefresh\");\r\n    getTotalCount(`?`, cancelToken);\r\n\r\n    props.updateUnreadCall(0);\r\n    props.updateCrashedCall(0);\r\n  };\r\n\r\n  const callAutoRefreshCrashed = async (cancelToken) => {\r\n    logDataFunction(\"REFRESH CRASHED MAIL\", 0, 0);\r\n    let urlCurrent = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page}`;\r\n    let urlNext = `${GET_ALL_MAIL}?limit=${limit}&pageNo=${page + 1}`;\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: false };\r\n    });\r\n\r\n    await getAllMailsApiCall(urlCurrent, \"&mail_action=95\", \"\", \"current\");\r\n    await getAllMailsApiCall(urlNext, \"&mail_action=95\", \"\", \"next\");\r\n    setDisablePreviousNext((prev) => {\r\n      return { ...prev, next: true };\r\n    });\r\n\r\n    getUnreadCount(cancelToken, \"autoRefresh\");\r\n    getTotalCount(`?&mail_action=95`, cancelToken);\r\n\r\n    props.updateUnreadCall(0);\r\n    props.updateAllCall(0);\r\n  };\r\n\r\n  const settingCache = (mailData) => {\r\n    switch (props?.isActiveModule) {\r\n      case \"Unread\":\r\n        props.updateUnreadCache(mailData);\r\n        break;\r\n      case \"Archive\":\r\n        props.updateArchiveCache(mailData);\r\n        break;\r\n      case \"All\":\r\n        props?.updateAllCache(mailData);\r\n        break;\r\n      case \"Sent\":\r\n        props.updateSentCache(mailData);\r\n        break;\r\n      case \"Crashed\":\r\n        props.updateCrashedCache(mailData);\r\n        break;\r\n      case \"Starred\":\r\n        props.updateStarredCache(mailData);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const keyForNextCall = () => {\r\n    switch (props?.isActiveModule) {\r\n      case \"Unread\":\r\n        logDataFunction(\"UNREAD\", 0, 0);\r\n        return props?.unreadCall;\r\n      case \"Archive\":\r\n        logDataFunction(\"ARCHIVE\", 0, 0);\r\n        return props?.archiveCall;\r\n      case \"All\":\r\n        logDataFunction(\"ALL\", 0, 0);\r\n        return props?.allCall;\r\n      case \"Sent\":\r\n        logDataFunction(\"SENT\", 0, 0);\r\n        return props?.sentCall;\r\n      case \"Crashed\":\r\n        logDataFunction(\"CRASHED\", 0, 0);\r\n        return props?.crashedCall;\r\n      case \"Starred\":\r\n        logDataFunction(\"STARRED\", 0, 0);\r\n        return props?.starredCall;\r\n\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  const updateKeyForNextCall = () => {\r\n    switch (props?.isActiveModule) {\r\n      case \"Unread\":\r\n        props.unreadCall === 0\r\n          ? props.updateUnreadCall(1)\r\n          : props?.updateUnreadCall(0);\r\n        break;\r\n      case \"Archive\":\r\n        props?.archiveCall === 0\r\n          ? props?.updateArchiveCall(1)\r\n          : props?.updateArchiveCall(0);\r\n        break;\r\n      case \"All\":\r\n        props?.allCall === 0\r\n          ? props?.updateAllCall(1)\r\n          : props?.updateAllCall(0);\r\n        break;\r\n      case \"Sent\":\r\n        props?.sentCall === 0\r\n          ? props?.updateSentCall(1)\r\n          : props?.updateSentCall(0);\r\n        break;\r\n      case \"Crashed\":\r\n        props?.crashedCall === 0\r\n          ? props?.updateCrashedCall(1)\r\n          : props?.updateCrashedCall(0);\r\n        break;\r\n      case \"Starred\":\r\n        props?.starredCall === 0\r\n          ? props?.updateStarredCall(1)\r\n          : props?.updateStarredCall(0);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const updateFlagsState = (isRead, isCrashed, isStarred) => {\r\n    const flags = {};\r\n    flags.isRead = isRead;\r\n    flags.isCrashed = isCrashed;\r\n    flags.isStarred = isStarred;\r\n    return flags;\r\n  };\r\n\r\n  const checkFlags = (mailAction) => {\r\n    let flags = {};\r\n    switch (mailAction) {\r\n      case \"99\":\r\n        flags = updateFlagsState(false, true, false);\r\n        break;\r\n      case \"98\":\r\n        flags = updateFlagsState(true, true, false);\r\n        break;\r\n      case \"97\":\r\n        flags = updateFlagsState(false, true, true);\r\n        break;\r\n      case \"96\":\r\n        flags = updateFlagsState(true, true, true);\r\n        break;\r\n      case \"89\":\r\n        flags = updateFlagsState(false, false, false);\r\n        break;\r\n      case \"88\":\r\n        flags = updateFlagsState(true, false, false);\r\n        break;\r\n      case \"86\":\r\n        flags = updateFlagsState(false, false, true);\r\n      case \"87\":\r\n        flags = updateFlagsState(true, false, true);\r\n        break;\r\n      case \"79\":\r\n        flags = updateFlagsState(false, false, true);\r\n        break;\r\n      case \"78\":\r\n        flags = updateFlagsState(true, false, true);\r\n        break;\r\n      case \"69\":\r\n        flags = updateFlagsState(false, false, false);\r\n        break;\r\n      case \"68\":\r\n        flags = updateFlagsState(true, false, false);\r\n        break;\r\n      default:\r\n        flags = updateFlagsState(false, false, false);\r\n    }\r\n    return flags;\r\n  };\r\n\r\n  const getMailId = async (inbox) => {\r\n    if (inbox) {\r\n      let inboxTo = inbox?.To;\r\n      setSelectedMailId(inbox?.id);\r\n      setSelectedUserMailId(inbox.userMailId);\r\n      updateMail(inbox);\r\n      if (!Array.isArray(inbox?.To)) {\r\n        inboxTo = [inbox?.To];\r\n      }\r\n      setSelectedMailTo(inboxTo);\r\n    } else {\r\n      setPopupMail(true);\r\n      await getNextClick();\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (popupMail) {\r\n      if (inboxMailData[0]) {\r\n        setSelectedMailId(inboxMailData[0]?.id);\r\n        updateMail(inboxMailData[0]);\r\n        setPopupMail(false);\r\n      } else {\r\n        setPopupMail(false);\r\n        await getPrevClick();\r\n      }\r\n    }\r\n  }, [inboxMailData]);\r\n\r\n  const updateMail = async (inbox) => {\r\n    if (filterOptions.is_sent !== 1) {\r\n      if (designationId === inbox?.from_id) {\r\n        if (UNREAD_CONSTANTS_VALUES.includes(inbox.fromAction)) {\r\n          props.unreadMailsCount === 0\r\n            ? props.updateUnreadMailsCount(0)\r\n            : props.updateUnreadMailsCount(props.unreadMailsCount - 1);\r\n        }\r\n      } else {\r\n        if (UNREAD_CONSTANTS_VALUES.includes(inbox.mailAction)) {\r\n          props.unreadMailsCount === 0\r\n            ? props.updateUnreadMailsCount(0)\r\n            : props.updateUnreadMailsCount(props.unreadMailsCount - 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    let params = {};\r\n\r\n    if (filterOptions.is_sent !== 1) {\r\n      if (\r\n        UNREAD_CONSTANTS_VALUES.includes(inbox.fromAction) &&\r\n        designationId === inbox.actualFormId\r\n      ) {\r\n        params = createParams(inbox.fromAction, \"mail_action\");\r\n\r\n        callUpdateApi(\r\n          params,\r\n          inbox.id,\r\n          designationId,\r\n          inbox.actualFormId,\r\n          inbox\r\n        );\r\n      }\r\n\r\n      if (\r\n        UNREAD_CONSTANTS_VALUES.includes(inbox.mailAction) &&\r\n        designationId !== inbox.actualFormId\r\n      ) {\r\n        params = createParams(inbox.mailAction, \"mail_action\");\r\n\r\n        callUpdateApi(\r\n          params,\r\n          inbox.id,\r\n          designationId,\r\n          inbox.actualFormId,\r\n          inbox\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateCacheState = (inbox) => {\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    if (designationId == inbox?.actualFormId) {\r\n      inbox.fromAction = updateActions(inbox?.fromAction);\r\n    } else {\r\n      inbox.mailAction = updateActions(inbox?.mailAction);\r\n    }\r\n  };\r\n\r\n  const updateActions = (action) => {\r\n    if (props.isActiveModule === \"Unread\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"89\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"68\", \"69\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"All\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"89\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateUnreadCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"68\", \"69\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"Crashed\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"Starred\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      }\r\n    } else {\r\n      if ([\"99\", \"97\", \"89\", \"86\", \"79\", \"69\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      }\r\n    }\r\n\r\n    switch (action) {\r\n      case \"99\":\r\n        return \"98\";\r\n      case \"98\":\r\n        return \"98\";\r\n\r\n      case \"97\":\r\n        return \"96\";\r\n      case \"96\":\r\n        return \"96\";\r\n\r\n      case \"89\":\r\n        return \"88\";\r\n      case \"88\":\r\n        return \"88\";\r\n\r\n      case \"86\":\r\n        return \"87\";\r\n\r\n      case \"87\":\r\n        return \"87\";\r\n\r\n      case \"79\":\r\n        return \"78\";\r\n      case \"78\":\r\n        return \"78\";\r\n\r\n      case \"69\":\r\n        return \"68\";\r\n      case \"68\":\r\n        return \"68\";\r\n      case \"67\":\r\n        return \"67\";\r\n      default:\r\n    }\r\n  };\r\n\r\n  const callUpdateApi = (params, id, designationId, actualFormId, mailData) => {\r\n    logDataFunction(\"UPDATE ON STARRED\", id, 0);\r\n    if (Object.keys(params).length > 0) {\r\n      params.is_read_mail = 1;\r\n\r\n      params.commentData = {};\r\n      params.userMailId = mailData.userMailId;\r\n\r\n      if (mailData && mailData.comments_data.length > 0) {\r\n        params.commentData = {\r\n          umail_id: mailData.comments_data[0].umail_id,\r\n          user_mail_id: mailData.comments_data[0].user_mail_id,\r\n        };\r\n      }\r\n\r\n      updateCacheState(mailData);\r\n      Api.ApiHandle(`${UPDATE_MAIL_BY_ID}/${id}`, params, \"put\", logData);\r\n\r\n      params.action_type = 1;\r\n      Api.ApiHandle(`/api/mails/updateById/${id}`, params, \"put\", logData);\r\n    }\r\n  };\r\n\r\n  const createParams = (action, key) => {\r\n    // if (inbox && inbox.id == currentId) action = inbox.mailAction;\r\n\r\n    let params = {};\r\n    switch (action) {\r\n      case \"99\":\r\n        params[key] = \"98\";\r\n        break;\r\n      case \"97\":\r\n        params[key] = \"96\";\r\n        break;\r\n      case \"89\":\r\n        params[key] = \"88\";\r\n        break;\r\n      case \"86\":\r\n        params[key] = \"87\";\r\n        break;\r\n      case \"79\":\r\n        params[key] = \"78\";\r\n        break;\r\n      case \"69\":\r\n        params[key] = \"68\";\r\n        break;\r\n    }\r\n\r\n    return params;\r\n  };\r\n\r\n  const getTotalCount = async (totalCountURL, cancelToken) => {\r\n    logDataFunction(\"MAIL TOTAL COUNT\", 0, 0);\r\n    setIsLoadingForCount(true);\r\n    const resp = await Api.ApiHandle(\r\n      // filterOptions.mail_action === '69'\r\n      //   ? GET_TOTAL_UNREAD_MAIL_COUNT + totalCountURL\r\n      //   :\r\n      GET_TOTAL_MAIL_COUNT + totalCountURL,\r\n      \"\",\r\n      \"GET\",\r\n      logData,\r\n      cancelToken\r\n    );\r\n    let total = 0;\r\n    if (resp && resp.status) {\r\n      if (page !== 1) {\r\n        total = limit * page;\r\n      } else {\r\n        total = limit;\r\n      }\r\n      if (total > resp.data) {\r\n        total = resp.data;\r\n      } else {\r\n        total = total > inboxMailData.length ? total : inboxMailData.length;\r\n      }\r\n\r\n      setCurrentCount(total);\r\n      setNoOfMails(resp.data);\r\n      setIsLoadingForCount(false);\r\n\r\n      return resp.data;\r\n    } else {\r\n      setIsLoadingForCount(false);\r\n    }\r\n  };\r\n\r\n  const openComposeModel = () => setVisiable(true);\r\n\r\n  const closeComposeModel = () => setVisiable(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-app-root\">\r\n        {/* next component */}\r\n        <HelpModal />\r\n        <div className=\"nk-main \">\r\n          <div className=\"nk-wrap \">\r\n            <Navbar\r\n              autoRefreshIntervalUnread={autoRefreshIntervalUnread}\r\n              autoRefreshIntervalAll={autoRefreshIntervalAll}\r\n              autoRefreshIntervalCrashed={autoRefreshIntervalCrashed}\r\n              setSwitchUser={setSwitchUser}\r\n              setFilterOptions={setFilterOptions}\r\n              setActiveModule={setActiveModule}\r\n            />\r\n            {/* next component */}\r\n            <div className=\"nk-content p-0\">\r\n              <div className=\"nk-content-inner\">\r\n                <div className=\"nk-content-body\">\r\n                  <div className=\"nk-ibx\">\r\n                    <Sidebar\r\n                      setActiveModule={setActiveModule}\r\n                      getAllMails={getAllMails}\r\n                      setFilterOptions={setFilterOptions}\r\n                      filterOptions={filterOptions}\r\n                      setInboxMailData={setInboxMailData}\r\n                      page={page}\r\n                      openComposeModel={openComposeModel}\r\n                      isAction={isAction}\r\n                      setIsAction={setIsAction}\r\n                      loader={loader}\r\n                      isFolderLoaderId={isFolderLoaderId}\r\n                      isMailAddedToFolder={isMailAddedToFolder}\r\n                      setIsMailAddedToFolder={setIsMailAddedToFolder}\r\n                      setLoader={setLoader}\r\n                    />\r\n                    <div className=\"nk-ibx-body bg-white\">\r\n                      {activeModule === \"inbox\" ? (\r\n                        <Inbox\r\n                          setActiveModule={setActiveModule}\r\n                          getMailId={getMailId}\r\n                          inboxMailData={inboxMailData}\r\n                          noOfMails={noOfMails}\r\n                          activeModule={activeModule}\r\n                          getAllMails={getAllMails}\r\n                          getNextClick={getNextClickCache}\r\n                          getPrevClick={getPreviousClickCache}\r\n                          total={currentCount}\r\n                          setFilterOptions={setFilterOptions}\r\n                          filterOptions={filterOptions}\r\n                          userData={props.userData}\r\n                          selectedStation={selectedStation}\r\n                          setSelectedstation={setSelectedstation}\r\n                          stationTag={stationTag}\r\n                          setStationTag={setStationTag}\r\n                          loader={loader}\r\n                          setLoader={setLoader}\r\n                          setMailIds={setMailIds}\r\n                          setUniqueMailId={setUniqueMailId}\r\n                          isLoadingForCount={isLoadingForCount}\r\n                          page={page}\r\n                          currentMailData={currentMailData}\r\n                          disablePreviousNext={disablePreviousNext}\r\n                          keyForNextCall={keyForNextCall}\r\n                          setCountMail={setCountMail}\r\n                          setClicked={setClicked}\r\n                          setPrevCacheClicked={setPrevCacheClicked}\r\n                          backButton={backButton}\r\n                          isAction={isAction}\r\n                          setIsFolderLoaderId={setIsFolderLoaderId}\r\n                          setIsMailAddedToFolder={setIsMailAddedToFolder}\r\n                        />\r\n                      ) : (\r\n                        <MailView\r\n                          setActiveModule={setActiveModule}\r\n                          mailId={selectedMailId}\r\n                          getAllMails={getAllMails}\r\n                          filterOptions={filterOptions}\r\n                          inboxMailData={inboxMailData}\r\n                          setSelectedMailId={setSelectedMailId}\r\n                          updateMail={updateMail}\r\n                          getMailId={getMailId}\r\n                          checkFlags={checkFlags}\r\n                          selectedMailTo={selectedMailTo}\r\n                          mailIds={mailIds}\r\n                          setUniqueMailId={setUniqueMailId}\r\n                          uniqueMailId={uniqueMailId}\r\n                          currentMailData={currentMailData}\r\n                          selectedUserMailId={selectedUserMailId}\r\n                          getNextClick={getNextClickCache}\r\n                          getPrevClick={getPreviousClickCache}\r\n                          disablePreviousNext={props?.disablePreviousNext}\r\n                          loader={loader}\r\n                          setLoader={setLoader}\r\n                          total={props.total}\r\n                          page={page}\r\n                          noOfMails={noOfMails}\r\n                          countmail={countmail}\r\n                          setCountMail={setCountMail}\r\n                          dataNextPrevClick={dataNextPrevClick}\r\n                          setNextClick={setNextClick}\r\n                          clicked={clicked}\r\n                          setClicked={setClicked}\r\n                          prevCacheClicked={prevCacheClicked}\r\n                          setPrevCacheClicked={setPrevCacheClicked}\r\n                          setBackButton={setBackButton}\r\n                          setIsAction={setIsAction}\r\n                          setIsMailAddedToFolder={setIsMailAddedToFolder}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {visiable && (\r\n          <Modal\r\n            // className=\"modal fade\"\r\n            isOpen={visiable}\r\n            style={customStyles}\r\n            shouldCloseOnEsc={false}\r\n            id=\"compose-mail\"\r\n            width=\"720\"\r\n            effect=\"fadeInUp\"\r\n            shouldCloseOnOverlayClick={false}\r\n            onRequestClose={closeComposeModel}\r\n          >\r\n            <ComposeMail\r\n              closeModel={closeComposeModel}\r\n              userData={props.userData}\r\n            />\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateUnreadMailsCount,\r\n  updateUserData,\r\n  updateSwitching,\r\n  updateUnreadCache,\r\n  updateUnreadCall,\r\n  updateArchiveCache,\r\n  updateArchiveCall,\r\n  updateSeachText,\r\n  updateAllCache,\r\n  updateAllCall,\r\n  updateSentCache,\r\n  updateSentCall,\r\n  updateStarredCache,\r\n  updateStarredCall,\r\n  updateCrashedCache,\r\n  updateCrashedCall,\r\n  updateActiveModule,\r\n  updateFolderCachedData,\r\n  updateMostFrequent,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  unreadMailsCount: state.unreadMailsCount,\r\n  userData: state.userData,\r\n  stationList: state.stationList,\r\n  isActiveModule: state.isActiveModule,\r\n  switching: state.switching,\r\n  unreadCall: state.unreadCall,\r\n  archiveCall: state.archiveCall,\r\n  allCall: state.allCall,\r\n  sentCall: state.sentCall,\r\n  starredCall: state.starredCall,\r\n  sentCache: state.sentCache,\r\n  starredCache: state.starredCache,\r\n  crashedCache: state.crashedCache,\r\n  crashedCall: state.crashedCall,\r\n  unreadCache: state.unreadCache,\r\n  archiveCache: state.archiveCache,\r\n  allCache: state.allCache,\r\n  folderCachedData: state.folderCachedData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Mailbox);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\Layout.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\ThreeColumnView.jsx",["298","299","300","301"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import Navbar from \"../components/Navbar\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport \"../Assets/CSS/3ColumnStyle.css\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\n\r\n\r\n\r\nconst ThreeColumnView = (props) => {\r\n  const [activeModule, setActiveModule] = useState(\"inbox\");\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"nk-app-root\">\r\n        {/* next component */}\r\n        <div className=\"nk-main \">\r\n          <div className=\"nk-wrap \">\r\n            <Navbar />\r\n\r\n            {/* next component */}\r\n\r\n            {/* next component */}  \r\n            <div class=\"nk-content p-0\">\r\n              <div class=\"nk-content-inner\">\r\n                <div class=\"nk-content-body\">\r\n                  <div class=\"nk-ibx\">\r\n                    <Sidebar/>\r\n                    {/* <div class=\"nk-ibx-body body-width bg-white\">               \r\n                      {activeModule === 'inbox'?\r\n                        <Inbox setActiveModule={setActiveModule} />\r\n                        :\r\n                        <MailView activeModule={activeModule} setActiveModule={setActiveModule} />  \r\n                      }                     \r\n                    </div> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n\r\n      {/* new component*/}\r\n\r\n      {/* new component */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ThreeColumnView);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\preferences.jsx",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317"],"import { useState, useEffect } from \"react\";\r\nimport Navbar from \"../navbar/Navbar\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import { CHANGE_PASSWORD } from \"../config/constants\";\r\n// import * as Api from \"../util/api/ApicallModule\";\r\n// import Toaster from \"../util/toaster/Toaster\";\r\nimport \"../../Assets/CSS/dashlite.css\";\r\nimport ColViewImage1 from \"../../Assets/images/2ColView.JPG\";\r\nimport ColViewImage2 from \"../../Assets/images/3ColView.JPG\";\r\nimport {\r\n  GET_ALL_STATION,\r\n  ADD_PREFERENCES,\r\n  GET_PREFERENCES,\r\n  ADD_PREFERENCES_MAIL_PER_PAGE,\r\n  MOST_FREQUENT_STATUS,\r\n} from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Loading from \"../../util/loader/Loading\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport Switch from \"./Switch\";\r\n\r\nimport {\r\n  updateUserData,\r\n  updateUnreadCall,\r\n  updateUnreadMailsCount,\r\n  updateArchiveCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateAllCall,\r\n  updateMostFrequent,\r\n  clearUnreadCache,\r\n  updateFolderCachedData,\r\n} from \"../../redux/action/InboxAction\";\r\nimport HelpModal from \"./HelpModal\";\r\n\r\nconst PreferenceForm = (props) => {\r\n  let limitOfMail = localStorage.getItem(\"limit\");\r\n  const [layoutPreference, setLayoutPreference] = useState(\"\");\r\n  const [station, setStations] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [hideStationList, setHideStaionList] = useState([]);\r\n  const [importantStationList, setImportantStaionList] = useState([]);\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  const [selectedImportantStations, setSelectedImportantStations] = useState(\r\n    []\r\n  );\r\n  const [disableboth, setDisableBoth] = useState({\r\n    mailPerPage: true,\r\n    UpdatePreference: true,\r\n  });\r\n\r\n  const [selectedHideStations, setSelectedHideStations] = useState([]);\r\n  const [inputValue, setInputValue] = useState();\r\n  const [preferencefilter, setPreferenceFilter] = useState({\r\n    isMostFrequent: false,\r\n    isMostRecent: true,\r\n  });\r\n  const [id, setId] = useState(\"\");\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    updatingKeyApi();\r\n    setInputValue(limitOfMail);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAllStations();\r\n    getPreferences();\r\n  }, [props?.userData]);\r\n\r\n  useEffect(() => {\r\n    if (selectedHideStations.length > 0) {\r\n      const selectedImportantStationsIds = selectedHideStations.map(\r\n        (data) => data.id\r\n      );\r\n\r\n      const newArray = station.filter(\r\n        (value) => !selectedImportantStationsIds.includes(value.id)\r\n      );\r\n\r\n      setImportantStaionList(newArray);\r\n    } else setImportantStaionList(station);\r\n  }, [selectedHideStations]);\r\n\r\n  useEffect(() => {\r\n    if (selectedImportantStations.length > 0) {\r\n      const selectedImportantStationsIds = selectedImportantStations.map(\r\n        (data) => data.id\r\n      );\r\n\r\n      const newArray = station.filter(\r\n        (value) => !selectedImportantStationsIds.includes(value.id)\r\n      );\r\n      setHideStaionList(newArray);\r\n    } else setHideStaionList(station);\r\n  }, [selectedImportantStations]);\r\n\r\n  useEffect(() => {\r\n    fetchMostFrequentStatus();\r\n  }, []);\r\n\r\n  const fetchMostFrequentStatus = async () => {\r\n    setLoading(true);\r\n    logDataFunction(\"SELECT MOST FREQUENT / MOST RECENT\", 0, 0);\r\n    const resp = await Api.ApiHandle(MOST_FREQUENT_STATUS, \"\", \"GET\", logData);\r\n    if (resp && resp?.status === 1) {\r\n      setLoading(false);\r\n      props?.updateMostFrequent(Number(resp?.data?.recent_frequent_type));\r\n      if (Number(resp?.data?.recent_frequent_type) === 1) {\r\n        setPreferenceFilter({\r\n          ...preferencefilter,\r\n          isMostFrequent: 1,\r\n          isMostRecent: 0,\r\n        });\r\n      } else {\r\n        setPreferenceFilter({\r\n          ...preferencefilter,\r\n          isMostRecent: 1,\r\n          isMostFrequent: 0,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getAllStations = async () => {\r\n    logDataFunction(\"ALL STATION\", 0, 0);\r\n    const resp = await Api.ApiHandle(GET_ALL_STATION, \"\", \"GET\", logData);\r\n\r\n    if (resp?.status === 1) {\r\n      const options = [];\r\n\r\n      resp.data.forEach((station) => {\r\n        let _option = {};\r\n        _option[\"value\"] = station.branch;\r\n        _option[\"label\"] = station.branch;\r\n        _option[\"id\"] = station.id;\r\n\r\n        options.push(_option);\r\n      });\r\n      setStations(options);\r\n      setHideStaionList(options);\r\n      setImportantStaionList(options);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPreferences = async () => {\r\n    let desginationId = 0;\r\n    logDataFunction(\"GET PREFERENCE\", 0, 0);\r\n    const resp = await Api.ApiHandle(GET_PREFERENCES, \"\", \"GET\", logData);\r\n\r\n    if (resp && resp?.status === 1) {\r\n      if (resp.data.length > 0) {\r\n        setDataToFields(resp.data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const setDataToFields = (preferences) => {\r\n    preferences.forEach((preference) => {\r\n      if (preference.category === \"view\")\r\n        setLayoutPreference(preference.p_value);\r\n      else if (\r\n        preference.category === \"station\" &&\r\n        preference.sub_category === \"hide\"\r\n      ) {\r\n        const selectedSationIds = preference.p_value.split(\",\");\r\n        const selectedStation = station.filter((value) =>\r\n          selectedSationIds.includes(value.id.toString())\r\n        );\r\n        setSelectedHideStations(selectedStation);\r\n      } else if (\r\n        preference.category === \"station\" &&\r\n        preference.sub_category === \"important\"\r\n      ) {\r\n        const selectedSationIds = preference.p_value.split(\",\");\r\n        const selectedStation = station.filter((value) =>\r\n          selectedSationIds.includes(value.id.toString())\r\n        );\r\n        setSelectedImportantStations(selectedStation);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleImportantSelect = (selectedStation) => {\r\n    setDisableBoth((prev) => {\r\n      return { ...prev, UpdatePreference: false };\r\n    });\r\n    setSelectedImportantStations(selectedStation);\r\n  };\r\n\r\n  const handleHideSelect = (selectedStation) => {\r\n    setDisableBoth((prev) => {\r\n      return { ...prev, UpdatePreference: false };\r\n    });\r\n    setSelectedHideStations(selectedStation);\r\n  };\r\n\r\n  const updatePreference = async () => {\r\n    const payload = preferencePayload();\r\n    logDataFunction(\"CLICK ON  UPDATE PREFERENCE\", 0, 0);\r\n    const resp = await Api.ApiHandle(ADD_PREFERENCES, payload, \"POST\", logData);\r\n\r\n    if (resp?.status === 1) {\r\n      Toaster(\"success\", \"Preferences saved sucessfully\");\r\n      setDisableBoth((prev) => {\r\n        return { ...prev, UpdatePreference: true };\r\n      });\r\n      if (layoutPreference === \"2ColView\") {\r\n        history.push(\"/mail\");\r\n      }\r\n      if (layoutPreference === \"3ColView\") {\r\n        history.push(\"/3ColumnView\");\r\n      }\r\n    } else {\r\n      Toaster(\"error\", resp.message || \"Some thing went wrong\");\r\n      setDisableBoth((prev) => {\r\n        return { ...prev, UpdatePreference: true };\r\n      });\r\n    }\r\n    localStorage.setItem(\"layoutView\", layoutPreference);\r\n    // // if (layoutPreference === \"2ColView\") history.push(\"/mail\");\r\n    // // else history.push(\"/3ColumnView\");\r\n  };\r\n  const updatingKeyApi = () => {\r\n    props.updateUnreadCall(0);\r\n\r\n    props.updateAllCall(0);\r\n\r\n    props.updateArchiveCall(0);\r\n\r\n    props.updateSentCall(0);\r\n\r\n    props.updateCrashedCall(0);\r\n\r\n    props.updateStarredCall(0);\r\n  };\r\n\r\n  const updatePreferenceMailPerPage = async () => {\r\n    if (inputValue < 15) {\r\n      Toaster(\"error\", \"Mails/Page Cannot Be Less Than 15\");\r\n      setDisableBoth((prev) => {\r\n        return { ...prev, mailPerPage: true };\r\n      });\r\n      return;\r\n    } else {\r\n      localStorage.setItem(\"limit\", inputValue);\r\n      props.setIsPreferenceChanged(true);\r\n      const payload = preferencePayloadMailPerPage();\r\n      logDataFunction(\"CLICK ON  UPDATE PREFERENCE MAIL/PAGE\", 0, 0);\r\n      setIsDisabled(true);\r\n      props?.updateFolderCachedData(\"delete\");\r\n      const resp = await Api.ApiHandle(\r\n        ADD_PREFERENCES_MAIL_PER_PAGE,\r\n        payload,\r\n        \"PUT\",\r\n        logData\r\n      );\r\n      if (resp?.status === 1) {\r\n        // updatingKeyApi();\r\n        props?.clearUnreadCache(0);\r\n        setIsDisabled(false);\r\n        Toaster(\"success\", \"Preferences saved sucessfully\");\r\n        setDisableBoth((prev) => {\r\n          return { ...prev, mailPerPage: true };\r\n        });\r\n      } else {\r\n        Toaster(\"error\", resp.message || \"Some thing went wrong\");\r\n        setDisableBoth((prev) => {\r\n          return { ...prev, mailPerPage: true };\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const preferencePayload = () => {\r\n    let desginationId = 0;\r\n    const payload = [];\r\n\r\n    props?.userData?.designations.forEach((designation) => {\r\n      if (designation.default_desig) desginationId = designation.id;\r\n    });\r\n\r\n    payload.push(paramsImportantStation(desginationId));\r\n\r\n    payload.push(paramsHideStation(desginationId));\r\n\r\n    if (layoutPreference.length > 0) {\r\n      const layoutPreferencePayload = {\r\n        designation: desginationId,\r\n        category: \"view\",\r\n        sub_category: \"\",\r\n        p_value: layoutPreference,\r\n      };\r\n\r\n      payload.push(layoutPreferencePayload);\r\n    }\r\n\r\n    return payload;\r\n  };\r\n  const preferencePayloadMailPerPage = () => {\r\n    const PreferencePayload = {\r\n      category: \"mail_per_page\",\r\n      sub_category: \"\",\r\n      mails_per_page: inputValue,\r\n    };\r\n\r\n    return PreferencePayload;\r\n  };\r\n\r\n  const paramsHideStation = (desginationId) => {\r\n    const data = {};\r\n    let ids = \"\";\r\n    data[\"designation\"] = desginationId;\r\n    data[\"category\"] = \"station\";\r\n    data[\"sub_category\"] = \"hide\";\r\n\r\n    selectedHideStations.map((station) => {\r\n      ids += `${station.id},`;\r\n    });\r\n    data[\"p_value\"] = ids.substring(0, ids.length - 1);\r\n\r\n    return data;\r\n  };\r\n\r\n  const paramsImportantStation = (desginationId) => {\r\n    const data = {};\r\n    let ids = \"\";\r\n    data[\"designation\"] = desginationId;\r\n    data[\"category\"] = \"station\";\r\n    data[\"sub_category\"] = \"important\";\r\n\r\n    selectedImportantStations.map((station) => {\r\n      ids += `${station.id},`;\r\n    });\r\n    data[\"p_value\"] = ids.substring(0, ids.length - 1);\r\n\r\n    return data;\r\n  };\r\n\r\n  const goBack = () => {\r\n    window.history.go(-1);\r\n  };\r\n\r\n  function limit(element) {\r\n    // var max_chars = 2;\r\n    // if (element.value.length > max_chars) {\r\n    //   element.value = element.value.substr(0, max_chars);\r\n    // }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setDisableBoth((prev) => {\r\n      return { ...prev, mailPerPage: false };\r\n    });\r\n    const { value } = e.target;\r\n    if (value <= 100) {\r\n      setInputValue(value);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    setId(\"\");\r\n    if (\r\n      (preferencefilter.isMostFrequent && Boolean(props?.isMostFrequent)) ||\r\n      (preferencefilter.isMostRecent && !Boolean(props?.isMostFrequent))\r\n    ) {\r\n      Toaster(\r\n        \"error\",\r\n        \"Please Select Different option,you have already chosen this\"\r\n      );\r\n      return;\r\n    } else {\r\n      let payload = {\r\n        category: \"most_freq_type\",\r\n        sub_category: \"\",\r\n        recent_frequent_type: preferencefilter.isMostFrequent ? \"1\" : \"0\",\r\n      };\r\n      const resp = await Api.ApiHandle(\r\n        ADD_PREFERENCES_MAIL_PER_PAGE,\r\n        payload,\r\n        \"PUT\",\r\n        logData\r\n      );\r\n      if (resp && resp?.status === 1) {\r\n        Toaster(\"success\", \"Updated Successfully\");\r\n        props?.updateMostFrequent(Number(payload[\"recent_frequent_type\"]));\r\n        history.push(\"/mail\");\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {!loading && (\r\n        <div className=\"preference-container\">\r\n          <div className=\"nk-block-head\">\r\n            <div className=\"nk-block-head-content\">\r\n              <div style={{ marginBottom: 60 }}>\r\n                <Navbar />\r\n              </div>\r\n              <HelpModal />\r\n              <div className=\"row\">\r\n                <em\r\n                  className=\"icon ni ni-chevron-left back-icon\"\r\n                  onClick={goBack}\r\n                ></em>\r\n                <h3 className=\"nk-block-title preference-text\">\r\n                  Change Preferences\r\n                </h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <h6 className=\"sub-heading sub-heading-preference\">\r\n            <em\r\n              style={{ marginRight: 5, fontSize: 15 }}\r\n              className=\"icon ni ni-bullet-fill\"\r\n            ></em>\r\n            Change layout preference\r\n          </h6>\r\n\r\n          <form className=\"form-data\">\r\n            <div className=\"form-content\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"inlineRadioOptions\"\r\n                id=\"radio1\"\r\n                value=\"2ColView\"\r\n                checked={layoutPreference === \"2ColView\"}\r\n                onChange={() => setLayoutPreference(\"2ColView\")}\r\n              />\r\n              <label className=\"ml-2\" htmlFor=\"radio1\">\r\n                2 Column View\r\n              </label>\r\n              <img className=\"layout-img\" src={ColViewImage1} />\r\n\r\n              <input\r\n                type=\"radio\"\r\n                name=\"inlineRadioOptions\"\r\n                className=\"ml-3\"\r\n                id=\"radio2\"\r\n                value=\"3ColView\"\r\n                checked={layoutPreference === \"3ColView\"}\r\n                onChange={() =>\r\n                  Toaster(\"error\", \"Still under developing phase\")\r\n                }\r\n              />\r\n              <label className=\"ml-2\" htmlFor=\"radio2\">\r\n                3 Column View\r\n              </label>\r\n              <img className=\"layout-img\" src={ColViewImage2} />\r\n            </div>\r\n\r\n            <h6 className=\"sub-heading preference-bottom-heading\">\r\n              <em\r\n                style={{ marginRight: 5, fontSize: 15 }}\r\n                className=\"icon ni ni-bullet-fill\"\r\n              ></em>\r\n              Change station preference\r\n            </h6>\r\n            <div className=\"row ml-3 preference-bottom\">\r\n              <div className=\"station-preference\">\r\n                <p className=\"label\" style={{ fontWeight: \"bold\" }}>\r\n                  Hide station\r\n                </p>\r\n                <Select\r\n                  isMulti\r\n                  name=\"hide-Stations\"\r\n                  value={selectedHideStations}\r\n                  options={hideStationList}\r\n                  placeholder=\"Select branch name\"\r\n                  onChange={handleHideSelect}\r\n                  isClearable={true}\r\n                />\r\n                {selectedHideStations?.map((hid, i) => {\r\n                  return (\r\n                    <div\r\n                      className=\"preference-hide-station-list\"\r\n                      key={`hideStationList${i}`}\r\n                    >\r\n                      <em\r\n                        style={{ marginRight: 8, fontSize: 15 }}\r\n                        class=\"icon ni ni-scissor\"\r\n                      ></em>\r\n                      <span className=\"preference-hide-station-text\">\r\n                        {hid.value}\r\n                      </span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <div className=\"station-preference ml-5\">\r\n                <p style={{ fontWeight: \"bold\" }}>Important station</p>\r\n                <Select\r\n                  isMulti\r\n                  name=\"important-Stations\"\r\n                  value={selectedImportantStations}\r\n                  options={importantStationList}\r\n                  placeholder=\"Select branch name\"\r\n                  onChange={handleImportantSelect}\r\n                  isClearable={true}\r\n                />\r\n                {selectedImportantStations?.map((imp, i) => {\r\n                  return (\r\n                    <div\r\n                      key={`importantStationList${i}`}\r\n                      className=\"preference-hide-station-list\"\r\n                    >\r\n                      <em\r\n                        class=\"icon ni ni-clipboad-check-fill\"\r\n                        style={{ marginRight: 8, fontSize: 15 }}\r\n                      ></em>\r\n                      <span className=\"preference-hide-station-text\">\r\n                        {imp.value}\r\n                      </span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <div className=\"form-group mt-4 preference-update-button\">\r\n                <button\r\n                  type=\"button\"\r\n                  id=\"myButton\"\r\n                  disabled={disableboth.UpdatePreference}\r\n                  className=\"btn btn-lg btn-primary\"\r\n                  onClick={updatePreference}\r\n                  style={{ height: 37 }}\r\n                >\r\n                  Update Preference\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {/* <h6 className=\"sub-heading preference-bottom-heading\">\r\n                <em\r\n                  style={{ marginRight: 5, fontSize: 15 }}\r\n                  className=\"icon ni ni-bullet-fill\"\r\n                ></em>\r\n                Mails/Page\r\n              </h6>\r\n\r\n              <div className=\"mail-per-page-preference ml-3 row ml-3\">\r\n                <input\r\n                  className=\"inputMailsPerPage\"\r\n                  type=\"number\"\r\n                  id=\"number\"\r\n                  value={inputValue}\r\n                  min={15}\r\n                  max={100}\r\n                  onChange={(e) => handleChange(e)}\r\n                  onKeyPress={(event) => {\r\n                    if (!/[0-9]/.test(event.key)) {\r\n                      event.preventDefault();\r\n                    }\r\n                  }}\r\n                />\r\n                <div className=\"form-group ml-5\">\r\n                  <button\r\n                    type=\"button\"\r\n                    disabled={disableboth.mailPerPage || isDisabled}\r\n                    className=\"btn btn-lg btn-primary\"\r\n                    onClick={updatePreferenceMailPerPage}\r\n                    style={{ height: 37 }}\r\n                  >\r\n                    Update Mails/Page\r\n                  </button>\r\n                </div>\r\n              </div> */}\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <div>\r\n                  <h6 className=\"sub-heading preference-bottom-heading\">\r\n                    <em\r\n                      style={{ marginRight: 5, fontSize: 15 }}\r\n                      className=\"icon ni ni-bullet-fill\"\r\n                    ></em>\r\n                    Select Most Frequent / Most recent\r\n                  </h6>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    maxWidth: \"600px\",\r\n                    padding: \"10px\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <input\r\n                      type=\"radio\"\r\n                      placeholder=\"Most Recent\"\r\n                      id=\"recent\"\r\n                      checked={preferencefilter.isMostRecent}\r\n                      onChange={(e) => {\r\n                        setPreferenceFilter({\r\n                          ...preferencefilter,\r\n                          isMostFrequent: false,\r\n                          isMostRecent: true,\r\n                        });\r\n                        setId(e.target?.id);\r\n                      }}\r\n                    />\r\n                    <label>&nbsp;Most Recent</label>\r\n                  </div>\r\n                  <div style={{ padding: \"10px\" }}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      placeholder=\"Most Frequent\"\r\n                      id=\"frequent\"\r\n                      checked={preferencefilter.isMostFrequent}\r\n                      onChange={(e) => {\r\n                        setPreferenceFilter({\r\n                          ...preferencefilter,\r\n                          isMostFrequent: true,\r\n                          isMostRecent: false,\r\n                        });\r\n                        setId(e.target?.id);\r\n                      }}\r\n                    />\r\n                    <label>&nbsp;Most Frequent</label>\r\n                  </div>\r\n                  <button\r\n                    onClick={handleClick}\r\n                    disabled={id === \"\"}\r\n                    type=\"button\"\r\n                    style={{ height: 30 }}\r\n                    className=\"btn btn-lg btn-primary\"\r\n                  >\r\n                    Apply\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {loading && (\r\n        <div className=\"preference-loader\">\r\n          <Loading />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateUserData,\r\n  updateUnreadCall,\r\n  updateUnreadMailsCount,\r\n  updateArchiveCall,\r\n  updateAllCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateMostFrequent,\r\n  clearUnreadCache,\r\n  updateFolderCachedData,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state?.userData,\r\n  isMostFrequent: state.isMostFrequent,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(PreferenceForm);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\index.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\config\\constants.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\toaster\\Toaster.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\apiLog\\LogApi.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\action\\InboxAction.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\dateFormat\\DateFormat.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\HelpModal.jsx",["318","319"],"import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./HelpModal.css\";\r\nconst HelpModal = () => {\r\n  const handleClick = () => {\r\n    var modal = document.getElementById(\"myModal\");\r\n    modal.style.display = \"none\";\r\n  };\r\n  return (\r\n    <div id=\"myModal\" className=\"help-modal\">\r\n      <div className=\"help-modal-content\">\r\n        <span onClick={handleClick} className=\"close\">\r\n          &times;\r\n        </span>\r\n        <p className=\"help-header\">Help Section</p>\r\n        <div className=\"data\">\r\n          <span>Contacts:180</span>\r\n          <a target=\"_blank\" href=\"https://support.local\">\r\n            Support\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelpModal;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\password_validation_frame.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\loader\\Loading.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Inbox.jsx",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336"],"import { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  updateCrashedCall,\r\n  updateUnreadCall,\r\n  updateAllCall,\r\n  updateStarredCall,\r\n  updateArchiveCall,\r\n  updateFolderCachedData,\r\n} from \"../redux/action/InboxAction\";\r\n\r\nimport InboxNavbar from \"../components/navbar/InboxNavbar\";\r\nimport * as Api from \"../util/api/ApicallModule\";\r\nimport { UPDATE_MAIL_BY_ID } from \"../config/constants\";\r\nimport Loading from \"../util/loader/Loading\";\r\nimport { UNREAD_CONSTANTS_VALUES, MAIL_ACTIONS } from \"../util\";\r\n\r\nconst Inbox = (props) => {\r\n  const cachedData = () => {\r\n    switch (props?.isActiveModule) {\r\n      case \"Unread\":\r\n        return props?.unreadCache?.current;\r\n      case \"Archive\":\r\n        return props?.archiveCache?.current;\r\n      case \"All\":\r\n        return props?.allCache?.current;\r\n      case \"Sent\":\r\n        return props?.sentCache?.current;\r\n      case \"Crashed\":\r\n        return props?.crashedCache?.current;\r\n      case \"Starred\":\r\n        return props?.starredCache?.current;\r\n\r\n      default:\r\n        return props?.inboxMailData;\r\n    }\r\n  };\r\n\r\n  let logData = {};\r\n  const isFolderExist =\r\n    props?.folderCachedData[props?.isActiveModule]?.isFolderCached;\r\n  // const folderData = props?.folderCachedData[props?.isActiveModule]?.current;\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  let mailData =\r\n    props?.filterOptions.by_stations || props?.filterOptions.search_data\r\n      ? props?.inboxMailData\r\n      : cachedData();\r\n\r\n  const keyFilterLoader = () => {\r\n    if (\r\n      props?.filterOptions.by_stations ||\r\n      props?.filterOptions.search_data ||\r\n      props?.filterOptions.folder\r\n    ) {\r\n      if (props.total === 0) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    } else return props.keyForNextCall();\r\n  };\r\n\r\n  const filterMailData = mailData.map((item) => item.id);\r\n  const [star, setStar] = useState(null);\r\n  const [isMailAllSelect, setMailAllSelect] = useState({\r\n    partialSelect: false,\r\n    fullSelect: false,\r\n  });\r\n  const [selectedMail, setSelectedMail] = useState([]);\r\n  const [selectedMailData, setSelectedMailData] = useState([]);\r\n  const [meMailData, setMeMailData] = useState([]);\r\n  const [designationId, setDesignationId] = useState(0);\r\n  const [newMailData, setNewMailData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let designationId;\r\n    if (props && props?.userData && props?.userData?.designations)\r\n      designationId = props?.userData?.designations.filter((item) => {\r\n        if (item.default_desig) return item;\r\n      })[0]?.id;\r\n\r\n    setDesignationId(designationId);\r\n  }, [props?.userData]);\r\n\r\n  useEffect(() => {\r\n    if (props.backButton && props.isAction) {\r\n      props?.updateFolderCachedData(\"delete\");\r\n    }\r\n  }, [props.backButton, props.isAction]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selectedMail.length === filterMailData.length &&\r\n      filterMailData.length !== 0\r\n    ) {\r\n      changeMailSelect(true, false);\r\n    } else if (selectedMail.length !== 0) {\r\n      changeMailSelect(false, true);\r\n    } else {\r\n      changeMailSelect(false, false);\r\n    }\r\n  }, [selectedMail]);\r\n\r\n  useEffect(() => {\r\n    setSelectedMail([]);\r\n    setNewMailData(mailData);\r\n    const meMailId = [];\r\n    if (designationId) {\r\n      mailData.forEach((item) => {\r\n        if (item.from_id === designationId) meMailId.push(item.id);\r\n      });\r\n\r\n      setMeMailData(meMailId);\r\n    }\r\n  }, [mailData]);\r\n\r\n  useEffect(() => {\r\n    props?.setLoader(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selectedMail.length === filterMailData.length &&\r\n      filterMailData.length !== 0\r\n    ) {\r\n      changeMailSelect(true, false);\r\n    } else if (selectedMail.length !== 0) {\r\n      changeMailSelect(false, true);\r\n    } else {\r\n      changeMailSelect(false, false);\r\n    }\r\n  }, [selectedMail]);\r\n\r\n  useEffect(() => {\r\n    setSelectedMail([]);\r\n    setSelectedMailData([]);\r\n    const meMailId = [];\r\n    if (designationId) {\r\n      mailData.forEach((item) => {\r\n        if (item.from_id === designationId) meMailId.push(item.id);\r\n      });\r\n\r\n      setMeMailData(meMailId);\r\n    }\r\n  }, [mailData, designationId]);\r\n\r\n  const setMailView = () => {\r\n    props.setActiveModule(\"mailView\");\r\n  };\r\n\r\n  const toggleStarredComponent = () => {\r\n    setStar((star) => !star);\r\n  };\r\n\r\n  const handleStarredResponse = async (inbox) => {\r\n    let params = {\r\n      mail_action: createParams(inbox),\r\n      userMailId: inbox.userMailId,\r\n    };\r\n\r\n    inbox.isStarred = !inbox.isStarred;\r\n    logDataFunction(\r\n      inbox.isStarred ? \"STARRED\" : \"UNSTARRED\",\r\n      inbox.userMailId,\r\n      0\r\n    );\r\n    const active = props.isActiveModule;\r\n    if (props.isActiveModule === \"Unread\") {\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateStarredCall(0);\r\n    } else if (props.isActiveModule === \"Archive\") {\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateStarredCall(0);\r\n    } else if (props.isActiveModule === \"All\") {\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateStarredCall(0);\r\n      props.updateUnreadCall(0);\r\n      props.updateArchiveCall(0);\r\n    } else if (props.isActiveModule === \"Crashed\") {\r\n      props.updateAllCall(0);\r\n      props.updateStarredCall(0);\r\n      props.updateUnreadCall(0);\r\n    } else if (props.isActiveModule === \"Starred\") {\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateUnreadCall(0);\r\n      props.updateArchiveCall(0);\r\n    } else {\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateStarredCall(0);\r\n      props.updateUnreadCall(0);\r\n      props.updateArchiveCall(0);\r\n    }\r\n    // await Api.ApiHandle(`${UPDATE_STAR}${inbox?.id}`, params, \"PUT\");\r\n    params.action_type = 1;\r\n    await Api.ApiHandle(\r\n      `/api/mails/updateById/${inbox?.id}`,\r\n      params,\r\n      \"put\",\r\n      logData\r\n    );\r\n  };\r\n\r\n  const typeCheck = (type, params, inbox) => {\r\n    type === \"from\" ? (inbox.fromAction = params) : (inbox.mailAction = params);\r\n  };\r\n\r\n  const createParams = (inbox) => {\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    let params = \"\";\r\n    let action = \"\";\r\n    let type = \"\";\r\n    if (designationId === inbox?.from_id) {\r\n      action = inbox?.fromAction;\r\n      type = \"from\";\r\n    } else {\r\n      action = inbox?.mailAction;\r\n      type = \"to\";\r\n    }\r\n\r\n    switch (action) {\r\n      case \"99\":\r\n        params = \"97\";\r\n\r\n        break;\r\n      case \"98\":\r\n        params = \"96\";\r\n\r\n        break;\r\n      case \"97\":\r\n        params = \"99\";\r\n\r\n        break;\r\n      case \"96\":\r\n        params = \"98\";\r\n\r\n        break;\r\n      case \"89\":\r\n        params = \"86\";\r\n\r\n        break;\r\n      case \"88\":\r\n        params = \"87\";\r\n\r\n        break;\r\n      case \"87\":\r\n        params = \"88\";\r\n\r\n        break;\r\n      case \"86\":\r\n        params = \"89\";\r\n\r\n        break;\r\n      case \"79\":\r\n        params = \"69\";\r\n\r\n        break;\r\n      case \"78\":\r\n        params = \"68\";\r\n\r\n        break;\r\n      case \"69\":\r\n        params = \"79\";\r\n\r\n        break;\r\n      case \"68\":\r\n        params = \"78\";\r\n\r\n        break;\r\n    }\r\n\r\n    typeCheck(type, params, inbox);\r\n    return params;\r\n  };\r\n\r\n  const updateFromIsRead = async (inbox) => {\r\n    logDataFunction(\"UPDATE MAIL FROM ISREAD\", 0, 0);\r\n    if (designationId === inbox.actualFormId) {\r\n      if (inbox?.fromIsReadEnabled === 0) {\r\n        const payload = { is_read_mail: 1 };\r\n        await Api.ApiHandle(\r\n          `${UPDATE_MAIL_BY_ID}/${inbox.id}`,\r\n          payload,\r\n\r\n          \"PUT\",\r\n          logData\r\n        );\r\n        payload.action_type = 1;\r\n        await Api.ApiHandle(\r\n          `/api/mails/updateById/${inbox.id}`,\r\n          payload,\r\n\r\n          \"put\",\r\n          logData\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateMailSelect = (e, data) => {\r\n    const { id, checked } = e.target;\r\n\r\n    if (checked) {\r\n      setSelectedMail((prev) => [...prev, parseInt(id)]);\r\n      setSelectedMailData((prev) => [...prev, data]);\r\n    } else {\r\n      let tmpSelectedMails = [...selectedMail];\r\n      tmpSelectedMails.splice(tmpSelectedMails.indexOf(parseInt(id)), 1);\r\n      setSelectedMail(tmpSelectedMails);\r\n\r\n      setSelectedMailData(\r\n        selectedMailData.filter((item) => item.id !== parseInt(id))\r\n      );\r\n    }\r\n  };\r\n\r\n  const changeMailSelect = (fullSelect, partialSelect) => {\r\n    setMailAllSelect(() => ({\r\n      fullSelect: fullSelect,\r\n      partialSelect: partialSelect,\r\n    }));\r\n  };\r\n\r\n  const updateMailIds = (mailIds, uniqueMailId, index) => {\r\n    localStorage.setItem(\"indexing\", index);\r\n    props.setMailIds([mailIds]);\r\n    props.setUniqueMailId(uniqueMailId);\r\n  };\r\n\r\n  const returnBackgroundColorOfMail = (inbox, mailAction, fromMailAction) => {\r\n    if (props?.filterOptions?.is_sent === 1) return \"\";\r\n\r\n    if (inbox.actualFormId === designationId) {\r\n      return [\r\n        MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n        MAIL_ACTIONS.CRASHED_UNREAD,\r\n      ].includes(fromMailAction)\r\n        ? \"#FF4F4F\"\r\n        : [\r\n            MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n            MAIL_ACTIONS.COMPOSED_UNREAD,\r\n          ].includes(fromMailAction)\r\n        ? \"#F3E779\"\r\n        : \"\";\r\n    }\r\n\r\n    return [\r\n      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n      MAIL_ACTIONS.CRASHED_UNREAD,\r\n    ].includes(mailAction)\r\n      ? \"#FF4F4F\"\r\n      : [\r\n          MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n          MAIL_ACTIONS.COMPOSED_UNREAD,\r\n        ].includes(mailAction)\r\n      ? \"#F3E779\"\r\n      : \"\";\r\n  };\r\n\r\n  const returnTextColorOfMail = (inbox, mailAction) => {\r\n    if (props?.filterOptions?.is_sent === 1) return { color: \"#707070\" };\r\n\r\n    return [\r\n      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n      MAIL_ACTIONS.CRASHED_UNREAD,\r\n    ].includes(mailAction)\r\n      ? { color: \"white\" }\r\n      : { color: \"#707070\" };\r\n  };\r\n\r\n  const updateCacheState = (inbox) => {\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    if (designationId == inbox?.actualFormId) {\r\n      inbox.fromAction = updateActions(inbox?.fromAction);\r\n    } else {\r\n      inbox.mailAction = updateActions(inbox?.mailAction);\r\n    }\r\n  };\r\n\r\n  const handleFolderCached = () => {\r\n    if (props?.folderCachedData !== undefined) {\r\n      props?.updateFolderCachedData(\"delete\");\r\n    }\r\n  };\r\n\r\n  const updateActions = (action) => {\r\n    // const active = props.isActiveModule;\r\n    // if (\r\n    //   active === 'Unread' ||\r\n    //   active === 'Crashed' ||\r\n    //   active === 'Starred' ||\r\n    //   active === 'Read' ||\r\n    //   active === 'Archive'\r\n    // ) {\r\n    //   handleFolderCached();\r\n    // }\r\n    if (props.isActiveModule === \"Unread\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"89\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"68\", \"69\"].includes(action)) {\r\n        props.updateAllCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"All\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"89\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateUnreadCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"68\", \"69\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"Crashed\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n      } else if ([\"99\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      }\r\n    } else if (props.isActiveModule === \"Starred\") {\r\n      if ([\"97\", \"96\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n      } else if ([\"86\", \"87\"]) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      } else if ([\"79\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n      }\r\n    } else {\r\n      if ([\"99\", \"97\", \"89\", \"86\", \"79\", \"69\"].includes(action)) {\r\n        props.updateUnreadCall(0);\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n      }\r\n    }\r\n\r\n    switch (action) {\r\n      case \"99\":\r\n        return \"98\";\r\n      case \"98\":\r\n        return \"98\";\r\n\r\n      case \"97\":\r\n        return \"96\";\r\n      case \"96\":\r\n        return \"96\";\r\n\r\n      case \"89\":\r\n        return \"88\";\r\n      case \"88\":\r\n        return \"88\";\r\n\r\n      case \"86\":\r\n        return \"87\";\r\n\r\n      case \"87\":\r\n        return \"87\";\r\n\r\n      case \"79\":\r\n        return \"78\";\r\n      case \"78\":\r\n        return \"78\";\r\n\r\n      case \"69\":\r\n        return \"68\";\r\n      case \"68\":\r\n        return \"68\";\r\n      case \"67\":\r\n        return \"67\";\r\n      default:\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InboxNavbar\r\n        noOfMails={props.noOfMails}\r\n        mailData={mailData}\r\n        mailDataLength={mailData.length}\r\n        getAllMails={props.getAllMails}\r\n        getNextClick={props.getNextClick}\r\n        getPrevClick={props.getPrevClick}\r\n        total={props.total}\r\n        setFilterOptions={props.setFilterOptions}\r\n        filterOptions={props.filterOptions}\r\n        setMailAllSelect={setMailAllSelect}\r\n        isMailAllSelect={isMailAllSelect}\r\n        selectedMail={selectedMail}\r\n        selectedMailData={selectedMailData}\r\n        setSelectedMailData={setSelectedMailData}\r\n        setSelectedMail={setSelectedMail}\r\n        filterMailData={filterMailData}\r\n        meMailData={meMailData}\r\n        activeModule={props?.activeModule}\r\n        selectedStation={props?.selectedStation}\r\n        setSelectedstation={props?.setSelectedstation}\r\n        stationTag={props?.stationTag}\r\n        setStationTag={props?.setStationTag}\r\n        loader={props?.loader}\r\n        setLoader={props.setLoader}\r\n        setIsFolderLoaderId={props.setIsFolderLoaderId}\r\n        isLoadingForCount={props?.isLoadingForCount}\r\n        disablePreviousNext={props?.disablePreviousNext}\r\n        setIsMailAddedToFolder={props?.setIsMailAddedToFolder}\r\n      />\r\n      <div\r\n        className=\"nk-ibx-list jumbotron-overflow\"\r\n        style={{ overflow: \"auto\" }}\r\n        ref={props.inboxConatinerRef}\r\n      >\r\n        {mailData.length === 0 && keyFilterLoader() === 0 ? (\r\n          <Loading />\r\n        ) : mailData.length === 0 ? (\r\n          <div style={{ margin: \"auto\" }}>\r\n            <h2>No Mails Found</h2>\r\n          </div>\r\n        ) : (\r\n          mailData.map((inbox, i) => {\r\n            return (\r\n              <div\r\n                key={i}\r\n                className=\"mails-main\"\r\n                id=\"mails-main\"\r\n                style={{\r\n                  marginBottom: \"-2px\",\r\n                }}\r\n                onClick={() => updateMailIds(inbox.id, inbox.userMailId, i)}\r\n                // onMouseOver={() => {\r\n                //   listingMouseOverEvent(i, \"in\");\r\n                // }}\r\n                // onMouseOut={() => {\r\n                //   listingMouseOverEvent(i, \"out\");\r\n                // }}\r\n              >\r\n                {props?.filterOptions?.is_sent !== 1 && (\r\n                  <div\r\n                    id=\"inside-mails-main\"\r\n                    className={`nk-ibx-item ${\r\n                      props?.filterOptions?.is_sent === 1\r\n                        ? \"active\"\r\n                        : inbox.actualFormId !== designationId &&\r\n                          UNREAD_CONSTANTS_VALUES.includes(inbox?.mailAction)\r\n                        ? \"\"\r\n                        : inbox.actualFormId === designationId &&\r\n                          UNREAD_CONSTANTS_VALUES.includes(inbox?.fromAction)\r\n                        ? \"\"\r\n                        : \"active\"\r\n                    }`}\r\n                    style={{\r\n                      float: \"left\",\r\n                      width: 87,\r\n                      backgroundColor: returnBackgroundColorOfMail(\r\n                        inbox,\r\n                        inbox?.mailAction,\r\n                        inbox?.fromAction\r\n                      ),\r\n                      color:\r\n                        props?.filterOptions?.is_sent !== 1 &&\r\n                        inbox.from_id !== designationId\r\n                          ? [\r\n                              MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                              MAIL_ACTIONS.CRASHED_UNREAD,\r\n                              MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n                              MAIL_ACTIONS.COMPOSED_UNREAD,\r\n                            ].includes(inbox?.mailAction)\r\n                            ? \"#fff\"\r\n                            : \"#707070\"\r\n                          : [\r\n                              MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                              MAIL_ACTIONS.CRASHED_UNREAD,\r\n                              MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n                              MAIL_ACTIONS.COMPOSED_UNREAD,\r\n                            ].includes(inbox?.fromAction)\r\n                          ? \"#fff\"\r\n                          : \"#707070\",\r\n                    }}\r\n                  >\r\n                    {props?.filterOptions?.is_crashed !== 1 &&\r\n                      props?.filterOptions?.is_starred !== 1 && (\r\n                        <div className=\"nk-ibx-item-elem nk-ibx-item-check checkbox\">\r\n                          <div className=\"custom-control custom-control-sm custom-checkbox\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input nk-dt-item-check\"\r\n                              id={inbox.id}\r\n                              onChange={(e) => updateMailSelect(e, inbox)}\r\n                              checked={\r\n                                selectedMail.includes(inbox.id) ? true : false\r\n                              }\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={inbox.id}\r\n                            ></label>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    <div\r\n                      className=\"nk-ibx-item-elem nk-ibx-item-star star-align\"\r\n                      style={\r\n                        inbox?.sourceId !== designationId\r\n                          ? { float: \"right\", marginTop: 0 }\r\n                          : { float: \"right\", marginTop: \"80%\" }\r\n                      }\r\n                    >\r\n                      {inbox?.sourceId !== designationId && (\r\n                        <div className=\"asterisk\">\r\n                          {inbox?.isStarred ? (\r\n                            <em\r\n                              className={`asterisk-on icon ni ni-star-fill`}\r\n                              onClick={() => {\r\n                                handleStarredResponse(inbox);\r\n                                toggleStarredComponent();\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <em\r\n                              className={`asterisk-off icon ni ni-star`}\r\n                              onClick={() => {\r\n                                handleStarredResponse(inbox);\r\n                                toggleStarredComponent();\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div\r\n                  style={{\r\n                    backgroundColor: returnBackgroundColorOfMail(\r\n                      inbox,\r\n                      inbox?.mailAction,\r\n                      inbox?.fromAction\r\n                    ),\r\n                    color:\r\n                      props?.filterOptions?.is_sent !== 1 &&\r\n                      inbox.from_id !== designationId\r\n                        ? [\r\n                            MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                            MAIL_ACTIONS.CRASHED_UNREAD,\r\n                            MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n                            MAIL_ACTIONS.COMPOSED_UNREAD,\r\n                          ].includes(inbox?.mailAction)\r\n                          ? \"#fff\"\r\n                          : \"#707070\"\r\n                        : [\r\n                            MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                            MAIL_ACTIONS.CRASHED_UNREAD,\r\n                            MAIL_ACTIONS.COMPOSED_STARRED_UNREAD,\r\n                            MAIL_ACTIONS.COMPOSED_UNREAD,\r\n                          ].includes(inbox?.fromAction)\r\n                        ? \"#fff\"\r\n                        : \"#707070\",\r\n                  }}\r\n                  id=\"inside-mails-main\"\r\n                  className={`nk-ibx-item ${\r\n                    props?.filterOptions?.is_sent === 1\r\n                      ? \"active\"\r\n                      : inbox.actualFormId !== designationId &&\r\n                        UNREAD_CONSTANTS_VALUES.includes(inbox?.mailAction)\r\n                      ? \"\"\r\n                      : inbox.actualFormId === designationId &&\r\n                        UNREAD_CONSTANTS_VALUES.includes(inbox?.fromAction)\r\n                      ? \"\"\r\n                      : \"active\"\r\n                  }`}\r\n                  key={`mail-list${i}`}\r\n                  onClick={() => {\r\n                    props.getMailId(inbox);\r\n                    setMailView();\r\n                    updateFromIsRead(inbox);\r\n                    updateCacheState(inbox);\r\n                  }}\r\n                >\r\n                  <div className=\"elem-alignment\">\r\n                    <div className=\"nk-ibx-item-elem nk-ibx-item-user\">\r\n                      <div className=\"user-card\">\r\n                        <div className=\"user-name\">\r\n                          <div\r\n                            className=\"lead-text\"\r\n                            style={\r\n                              props?.filterOptions?.is_sent !== 1\r\n                                ? inbox.from_id !== designationId\r\n                                  ? [\r\n                                      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                      MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                    ].includes(inbox.mailAction)\r\n                                    ? { color: \"white\", fontWeight: \"bolder\" }\r\n                                    : { fontWeight: \"bolder\" }\r\n                                  : [\r\n                                      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                      MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                    ].includes(inbox.fromAction)\r\n                                  ? { color: \"white\", fontWeight: \"bolder\" }\r\n                                  : { fontWeight: \"bolder\" }\r\n                                : {\r\n                                    color: \"#364a63\",\r\n                                    fontWeight: \"bolder\",\r\n                                  }\r\n                            }\r\n                          >\r\n                            {props?.filterOptions?.is_sent === 1\r\n                              ? \"Me\"\r\n                              : designationId == inbox.sourceId\r\n                              ? \"Me\"\r\n                              : !inbox?.from && !inbox?.branch\r\n                              ? `-`\r\n                              : !inbox?.from && inbox?.branch\r\n                              ? `${inbox?.branch}`\r\n                              : inbox?.from && !inbox?.branch\r\n                              ? `${inbox?.from}`\r\n                              : inbox?.from && inbox?.branch\r\n                              ? `${inbox?.from}(${inbox?.branch})`\r\n                              : \"-\"}\r\n\r\n                            {props?.filterOptions?.is_sent === 1 &&\r\n                            props?.filterOptions?.by_stations ? (\r\n                              <div\r\n                                className=\"lead-text\"\r\n                                style={{ fontWeight: 500 }}\r\n                              >\r\n                                To:{\" \"}\r\n                                {inbox?.sentEnabled === 1 &&\r\n                                designationId !== inbox?.actualFormId\r\n                                  ? `${inbox?.from}(${inbox?.branch})`\r\n                                  : `${inbox?.toDesignation}(${inbox?.toBranch})`}\r\n                              </div>\r\n                            ) : (\r\n                              props?.filterOptions?.is_sent === 1 && (\r\n                                <div\r\n                                  className=\"lead-text\"\r\n                                  style={{ fontWeight: 500 }}\r\n                                >\r\n                                  To :{\" \"}\r\n                                  {Array.from(inbox.To).map((item, i) =>\r\n                                    Array.from(inbox.To).length !== i + 1\r\n                                      ? `${item?.designation}(${item?.branch}), `\r\n                                      : `${item?.designation}(${item?.branch})`\r\n                                  )}\r\n                                </div>\r\n                              )\r\n                            )}\r\n                          </div>\r\n                          {/* {inbox?.FirstName !== null &&\r\n                          inbox?.FirstName !== undefined ? (\r\n                            <i style={{ fontSize: \"10px\" }}>\r\n                              {inbox.FirstName}\r\n                            </i>\r\n                          ) : null} */}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"nk-ibx-item-elem nk-ibx-item-fluid\">\r\n                      <div className=\"nk-ibx-context-group\">\r\n                        <div className=\"nk-ibx-context\">\r\n                          <span className=\"nk-ibx-context-text\">\r\n                            <span\r\n                              className=\"heading\"\r\n                              style={\r\n                                inbox.actualFormId !== designationId\r\n                                  ? returnTextColorOfMail(\r\n                                      inbox,\r\n                                      inbox?.mailAction\r\n                                    )\r\n                                  : returnTextColorOfMail(\r\n                                      inbox,\r\n                                      inbox?.fromAction\r\n                                    )\r\n                              }\r\n                            >\r\n                              {inbox?.subject}\r\n                            </span>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"nk-ibx-item-elem nk-ibx-item-user ml-5\">\r\n                      <div className=\"user-name\">\r\n                        <div\r\n                          className=\"lead-text\"\r\n                          style={\r\n                            props?.filterOptions?.is_sent !== 1 &&\r\n                            inbox.actualFormId !== designationId\r\n                              ? [\r\n                                  MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                  MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                ].includes(inbox.mailAction)\r\n                                ? { fontWeight: \"bold\", color: \"white\" }\r\n                                : { fontWeight: \"bold\", color: \"#707070\" }\r\n                              : [\r\n                                  MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                  MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                ].includes(inbox.fromAction)\r\n                              ? { fontWeight: \"bold\", color: \"white\" }\r\n                              : { fontWeight: \"bold\", color: \"#707070\" }\r\n                          }\r\n                        >\r\n                          {inbox.op ? inbox.op.toUpperCase() : \"\"}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"nk-ibx-item-elem nk-ibx-item-user\">\r\n                      <div className=\"user-name\">\r\n                        {inbox?.comments_data?.length > 0 &&\r\n                        inbox.comments_data[0].comment.length > 0 ? (\r\n                          <div\r\n                            className=\"lead-text comment-tag\"\r\n                            style={\r\n                              (props?.filterOptions?.is_sent !== 1 &&\r\n                              inbox.actualFormId !== designationId\r\n                                ? [\r\n                                    MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                    MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                  ].includes(inbox.mailAction)\r\n                                  ? { fontWeight: \"bold\", color: \"white\" }\r\n                                  : { fontWeight: \"bold\", color: \"#707070\" }\r\n                                : [\r\n                                    MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                    MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                  ].includes(inbox.fromAction)\r\n                                ? { fontWeight: \"bold\", color: \"white\" }\r\n                                : { fontWeight: \"bold\", color: \"#707070\" },\r\n                              inbox?.comments_data.length <= 0\r\n                                ? { background: \"#f2f5f5cc\" }\r\n                                : {})\r\n                            }\r\n                          >\r\n                            {inbox.comments_data.length > 0\r\n                              ? inbox.comments_data[0].comment\r\n                              : \"\"}\r\n                          </div>\r\n                        ) : (\r\n                          <div\r\n                            className=\"lead-text\"\r\n                            style={{\r\n                              padding: \"12px 10px\",\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {\r\n                      <>\r\n                        <div\r\n                          className=\"nk-ibx-item-elem nk-ibx-item-time\"\r\n                          style={{ marginTop: \"-3%\", marginBottom: \"-4%\" }}\r\n                        >\r\n                          <div\r\n                            className={\r\n                              props?.filterOptions?.is_sent !== 1\r\n                                ? inbox.from_id !== designationId\r\n                                  ? [\r\n                                      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                      MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                    ].includes(inbox.mailAction)\r\n                                    ? `sub-text-isCrashed`\r\n                                    : `sub-text`\r\n                                  : [\r\n                                      MAIL_ACTIONS.CRASHED_STARRED_UNREAD,\r\n                                      MAIL_ACTIONS.CRASHED_UNREAD,\r\n                                    ].includes(inbox.fromAction)\r\n                                  ? `sub-text-isCrashed`\r\n                                  : `sub-text`\r\n                                : \"sub-text\"\r\n                            }\r\n                            style={{ fontSize: 13 }}\r\n                          >\r\n                            {inbox?.timeStamp}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"other-icons\">\r\n                          {inbox?.attachment_ids &&\r\n                            inbox?.attachment_ids.length > 0 &&\r\n                            inbox?.attachment_ids[0] && (\r\n                              <abbr title=\"Attachments\">\r\n                                <em className=\"icon ni ni-clip\"></em>\r\n                              </abbr>\r\n                            )}\r\n\r\n                          {inbox?.comments_data?.length > 0 &&\r\n                            inbox?.comments_data[0]?.from === designationId &&\r\n                            inbox?.comments_data[0]?.action !== null && (\r\n                              <>\r\n                                {inbox?.comments_data[0]?.action ===\r\n                                  \"Forward\" && (\r\n                                  <div\r\n                                    style={\r\n                                      inbox?.attachment_ids[0]\r\n                                        ? {\r\n                                            marginLeft: \"31%\",\r\n                                            transform: \"rotateY(180deg)\",\r\n                                          }\r\n                                        : {\r\n                                            marginLeft: \"50%\",\r\n                                            transform: \"rotateY(180deg)\",\r\n                                          }\r\n                                    }\r\n                                  >\r\n                                    <abbr title=\"Forwarded\">\r\n                                      <em className=\"icon ni ni-reply-all-fill\"></em>\r\n                                    </abbr>\r\n                                  </div>\r\n                                )}\r\n                                {inbox?.comments_data[0]?.action ===\r\n                                  \"Reply\" && (\r\n                                  <abbr\r\n                                    title=\"Replied\"\r\n                                    style={\r\n                                      inbox?.attachment_ids[0]\r\n                                        ? { marginLeft: \"31%\" }\r\n                                        : { marginLeft: \"50%\" }\r\n                                    }\r\n                                  >\r\n                                    <em className=\"icon ni ni-reply\"></em>\r\n                                  </abbr>\r\n                                )}\r\n                              </>\r\n                            )}\r\n                        </div>\r\n                      </>\r\n                    }\r\n                  </div>\r\n                </div>\r\n\r\n                <hr style={{ marginTop: 0.5, marginBottom: 0.5 }} />\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateCrashedCall,\r\n  updateUnreadCall,\r\n  updateAllCall,\r\n  updateStarredCall,\r\n  updateArchiveCall,\r\n  updateFolderCachedData,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data,\r\n  unreadCache: state.unreadCache,\r\n  archiveCache: state.archiveCache,\r\n  allCache: state.allCache,\r\n  isActiveModule: state.isActiveModule,\r\n  userData: state.userData,\r\n  sentCache: state.sentCache,\r\n  starredCache: state.starredCache,\r\n  crashedCache: state.crashedCache,\r\n  folderCachedData: state.folderCachedData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Inbox);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\util\\api\\ApicallModule.jsx",["337"],"import axios from \"axios\";\r\nimport { LogApi } from \"../apiLog/LogApi\";\r\nimport { isLogin } from \"../../util\";\r\n\r\nlet logDataValue;\r\nexport const ApiHandle = async (\r\n  apiLink,\r\n  apiData,\r\n\r\n  method,\r\n  logData,\r\n  cancelToken\r\n) => {\r\n  // logDataValue = logData;\r\n\r\n  let headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n  if (localStorage.getItem(\"auth\")) {\r\n    headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n  }\r\n  let isAuthenticate = isLogin();\r\n  if (isAuthenticate) LogApi(logData);\r\n  return axios({\r\n    method: method,\r\n    url: `${process.env.REACT_APP_BASE_API_URL}${apiLink}`,\r\n    data: apiData,\r\n    headers: headers,\r\n    cancelToken,\r\n  })\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      if (error.response !== undefined && !error.response.status) {\r\n        localStorage.removeItem(\"auth\");\r\n        window.location.href = process.env.REACT_APP_SERVER_ERROR;\r\n      }\r\n\r\n      if (error.response !== undefined && error.response.status === 401) {\r\n        if (error.response.data.status === 3) {\r\n          localStorage.removeItem(\"auth\");\r\n          window.location.href = \"/\";\r\n        }\r\n      }\r\n      return error?.response?.data;\r\n    });\r\n};\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\Navbar.jsx",["338","339","340"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport ProfileDropdown from \"../profileDropdown\";\r\nimport Viewsearchbar from \"../../3ColumnView/components/Viewsearchbar\";\r\nimport { USER_PROFILE } from \"../../config/constants\";\r\nimport { isLogin } from \"../../util\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport {\r\n  updateUserData,\r\n  updateActiveModule,\r\n} from \"../../redux/action/InboxAction\";\r\nimport { MAIL_ACTIONS } from \"../../util\";\r\n\r\nconst customStyles = {\r\n  overlay: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"rgba(0, 0, 0, 0.2)\",\r\n    zIndex: \"10001\",\r\n  },\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    width: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    fontSize: \"22px\",\r\n  },\r\n};\r\n\r\nconst Navbar = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [switchUserData, setSwitchUserData] = useState({\r\n    name: {},\r\n    isLoading: false,\r\n  });\r\n  const profileNode = useRef();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    const isAuthenticated = isLogin();\r\n    isAuthenticated && getUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleProfileSection);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleProfileSection);\r\n    };\r\n  }, []);\r\n\r\n  const getUserData = async () => {\r\n    logDataFunction(\"USER DATA\", 0, 0);\r\n    const resp = await Api.ApiHandle(USER_PROFILE, \"\", \"GET\", logData);\r\n    if (resp && resp.status === 1) {\r\n      props.updateUserData(resp?.data);\r\n    }\r\n  };\r\n\r\n  const handleProfileSection = (event, value) => {\r\n    if (\r\n      profileNode &&\r\n      profileNode.current &&\r\n      !profileNode.current.contains(event.target)\r\n    ) {\r\n      setOpen(false);\r\n    } else {\r\n      if (value === 1) {\r\n        if (open) setOpen(false);\r\n        else setOpen(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  // const handleredirect = () => {\r\n  //   const layoutView = localStorage.getItem(\"layoutView\");\r\n  //   layoutView === \"2ColView\"\r\n  //     ? history.push(\"/mail\")\r\n  //     : history.push(\"/3ColumnView\");\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-header nk-header-fixed is-light\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"nk-header-wrap\">\r\n            {/* <NavLink exact to=\"/mail\" style={{ marginRight: \"auto\" }}> */}\r\n            <div\r\n              className=\"nk-header-app-name\"\r\n              style={{\r\n                cursor: \"pointer\",\r\n                marginRight: \"auto\",\r\n                marginLeft: \"-9px\",\r\n              }}\r\n              onClick={async () => {\r\n                history.push(\"/mail\");\r\n              }}\r\n            >\r\n              <div className=\"nk-header-app-logo\">\r\n                <em\r\n                  className=\"icon ni ni-inbox bg-purple-dim\"\r\n                  style={{ fontSize: 36 }}\r\n                ></em>\r\n                {/* <img\r\n                  className=\"image\"\r\n                  style={{ maxWidth: \"420%\", width: \"450%\" }}\r\n                  src={Icon}\r\n                  alt=\"Mailbox\"\r\n                /> */}\r\n              </div>\r\n              <div className=\"nk-header-app-info\">\r\n                <span className=\"lead-text\" style={{ fontSize: 20 }}>\r\n                  Mail Box\r\n                </span>\r\n              </div>\r\n            </div>\r\n            {/* </NavLink> */}\r\n            {location.pathname === \"/3ColumnView\" && (\r\n              <div>\r\n                <Viewsearchbar filterOptions={props.filterOptions} />\r\n                {/* // onSubmit={searchMail} */}\r\n                {/* <Search onChange={handleChange} onSubmit={searchMail} /> */}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"nk-header-tools\" ref={profileNode}>\r\n              <ul className=\"nk-quick-nav\">\r\n                {props.userData.role === 0 ? \"\" : \"\"}\r\n                <li className=\"dropdown user-dropdown\">\r\n                  <span\r\n                    onClick={(e) => handleProfileSection(e, 1)}\r\n                    className=\"dropdown-toggle mr-n1\"\r\n                  >\r\n                    <abbr title=\"User Profile\">\r\n                      <div className=\"user-toggle\">\r\n                        <div className=\"user-avatar sm\">\r\n                          <em className=\"icon ni ni-user-alt\"></em>\r\n                        </div>\r\n                      </div>\r\n                    </abbr>\r\n                  </span>\r\n                  {open && (\r\n                    <ProfileDropdown\r\n                      showData={\"Profile\"}\r\n                      getUserData={getUserData}\r\n                      setSwitchUserData={setSwitchUserData}\r\n                      setSwitchUser={props.setSwitchUser}\r\n                      autoRefreshInterval={props.autoRefreshIntervalUnread}\r\n                      autoRefreshIntervalAll={props.autoRefreshIntervalAll}\r\n                      autoRefreshIntervalCrashed={\r\n                        props.autoRefreshIntervalCrashed\r\n                      }\r\n                    />\r\n                  )}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {switchUserData.isLoading && (\r\n        <Modal\r\n          isOpen={switchUserData.isLoading}\r\n          id=\"loader\"\r\n          // onRequestClose={handleCloseModal}\r\n          style={customStyles}\r\n          effect=\"fadeInUp\"\r\n        >\r\n          {`Switching from ${switchUserData?.name.prevDesgi} to ${switchUserData?.name.currentDesgi}`}\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateUserData,\r\n  updateActiveModule,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Navbar);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\Sidebar.jsx",["341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358"],"import { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  GET_FOLDER,\r\n  CREATE_FOLDER,\r\n  EDIT_FOLDER,\r\n  REMOVE_FOLDER,\r\n} from \"../../config/constants\";\r\n\r\nimport {\r\n  updateFolderList,\r\n  updateActiveModule,\r\n  updateSeachText,\r\n  updateFolderCachedData,\r\n} from \"../../redux/action/InboxAction\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { toast } from \"react-toastify\";\r\nimport Modal from \"react-awesome-modal\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport { MAIL_ACTIONS } from \"../../util\";\r\nimport Loader from \"react-loader-spinner\";\r\nconst Sidebar = (props) => {\r\n  const [openDropDown, setOpenDropDown] = useState(\"\");\r\n  const [createFolder, setCreateFolder] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [index, setIndex] = useState(0);\r\n  const [folderName, setFolderName] = useState(\"\");\r\n  const [folderId, setFolderId] = useState(0);\r\n  const [folderColorCode, setFolderColorCode] = useState(\"\");\r\n  const [folderList, setFolderList] = useState([]);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [data, setData] = useState(0);\r\n  const [disableCheckButton, setDisableCheckButton] = useState(false);\r\n  const [isActive, setIsActive] = useState(\"All\");\r\n  const [visible, setVisible] = useState(false);\r\n  const [myId, setMyId] = useState([]);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(async () => {\r\n    if (props?.userData?.designations) {\r\n      getAllFolders();\r\n    }\r\n  }, [props?.userData]);\r\n\r\n  const getAllFolders = async () => {\r\n    logDataFunction(\"GET LIST OF FOLDER\", 0, 0);\r\n    const apiData = [];\r\n    const resp = await Api.ApiHandle(`${GET_FOLDER}`, \"\", \"GET\", logData);\r\n\r\n    if (resp?.status === 1) {\r\n      resp.data?.forEach((folder) => {\r\n        const obj = {\r\n          apiFolderId: folder?.id,\r\n          apiFolderName: folder?.name,\r\n          apiColorCode: folder.Color?.text,\r\n          isFolderCached: false,\r\n        };\r\n        apiData.push(obj);\r\n      });\r\n\r\n      setFolderList(apiData);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const finalFolderData = [...folderList];\r\n    props.updateFolderList(Array.from(new Set(finalFolderData)));\r\n  }, [folderList]);\r\n\r\n  const handleSetOpenDropDown = (id) => {\r\n    if (openDropDown === \"\") {\r\n      setOpenDropDown(\"show\");\r\n      setData(id);\r\n    } else {\r\n      setOpenDropDown(\"\");\r\n      setData(0);\r\n    }\r\n  };\r\n\r\n  const handleCreateFolder = () => {\r\n    setCreateFolder((createFolder) => !createFolder);\r\n  };\r\n\r\n  const handleCloseCreateFolder = () => {\r\n    setError(\"\");\r\n    setCreateFolder((createFolder) => !createFolder);\r\n    if (isEdit === true) {\r\n      if (folderName !== \"\") {\r\n        const folder = {\r\n          apiFolderId: folderId,\r\n          apiFolderName: folderName,\r\n          apiColorCode: folderColorCode,\r\n        };\r\n        const _folderList = [];\r\n        _folderList.push(folder);\r\n        setCreateFolder(false);\r\n        setFolderList([..._folderList, ...folderList]);\r\n        setFolderName(\"\");\r\n        setFolderColorCode(null);\r\n        setFolderId(null);\r\n        props.updateFolderList([..._folderList, ...folderList]);\r\n        setIsEdit(false);\r\n        getAllFolders();\r\n      }\r\n    } else {\r\n      setCreateFolder(false);\r\n      setFolderName(\"\");\r\n      setFolderColorCode(null);\r\n      setIsEdit(false);\r\n      setFolderId(null);\r\n    }\r\n  };\r\n\r\n  const handleFolderName = (e) => {\r\n    setError(\"\");\r\n    setFolderName(e.currentTarget.value);\r\n  };\r\n  const handleKeypress = (e, folderId) => {\r\n    if (e.keyCode == 13) {\r\n      isEdit ? handleEditFolderResponse(folderId) : handleFolderCreation();\r\n    }\r\n  };\r\n\r\n  const handleFolderCreation = async () => {\r\n    logDataFunction(\"CREATE FOLDER\", 0, 0);\r\n    if (folderName !== \"\") {\r\n      const payload = {\r\n        name: folderName,\r\n      };\r\n      setDisableCheckButton(true);\r\n      const resp = await Api.ApiHandle(CREATE_FOLDER, payload, \"POST\", logData);\r\n\r\n      if (resp.status === 1) {\r\n        const folder = {\r\n          apiFolderId: resp?.data[0]?.id,\r\n          apiFolderName: folderName,\r\n          apiColorCode: resp?.data[0]?.Color?.text,\r\n        };\r\n        const _folderList = [];\r\n        _folderList.push(folder);\r\n        setCreateFolder(false);\r\n        setFolderList([..._folderList, ...folderList]);\r\n        setFolderName(\"\");\r\n        setDisableCheckButton(false);\r\n        props.updateFolderList([..._folderList, ...folderList]);\r\n      } else {\r\n        Toaster(\r\n          \"error\",\r\n          `${\r\n            typeof resp?.message === \"string\"\r\n              ? resp?.message\r\n              : \"Folder Name Too Long !\"\r\n          }`\r\n        );\r\n        setDisableCheckButton(false);\r\n      }\r\n    } else {\r\n      setError(\"Folder Name Cannot Be Empty !!\");\r\n    }\r\n  };\r\n\r\n  const handleEditFolder = (index) => {\r\n    let name = folderList[index];\r\n    setFolderName(name?.apiFolderName);\r\n    setFolderId(name?.apiFolderId);\r\n    setFolderColorCode(name?.apiColorCode);\r\n    setIsEdit(true);\r\n    setCreateFolder(true);\r\n    folderList.splice(index, 1);\r\n    setFolderList(folderList);\r\n    props.updateFolderList(folderList);\r\n  };\r\n\r\n  const handleEditFolderResponse = async (folderId) => {\r\n    logDataFunction(\"EDIT FOLDER\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      EDIT_FOLDER + `${folderId}`,\r\n      { name: folderName },\r\n\r\n      \"PUT\",\r\n      logData\r\n    );\r\n\r\n    const folder = {\r\n      apiFolderId: folderId,\r\n      apiFolderName: folderName,\r\n      apiColorCode: folderColorCode,\r\n    };\r\n    const _folderList = [];\r\n    _folderList.push(folder);\r\n\r\n    if (resp.status === 1) {\r\n      setCreateFolder(false);\r\n      setFolderList([..._folderList, ...folderList]);\r\n      setFolderName(\"\");\r\n      setFolderColorCode(null);\r\n      setFolderId(null);\r\n      props.updateFolderList([..._folderList, ...folderList]);\r\n      setIsEdit(false);\r\n    } else {\r\n      Toaster(\"error\", `${resp?.message}`);\r\n    }\r\n  };\r\n\r\n  const handleDeleteFolder = async () => {\r\n    logDataFunction(\"DELETE FOLDER\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${REMOVE_FOLDER}${folderId}`,\r\n      {},\r\n\r\n      \"DELETE\",\r\n      logData\r\n    );\r\n\r\n    if (resp.status === 1) {\r\n      folderList.splice(index, 1);\r\n      setFolderList(folderList);\r\n      props.updateFolderList(folderList);\r\n      getAllFolders();\r\n      props.setFilterOptions({\r\n        mail_action: MAIL_ACTIONS.UNREAD,\r\n      });\r\n      props.setActiveModule(\"inbox\");\r\n      setVisible(false);\r\n      props?.updateActiveModule(\"Unread\");\r\n      setFolderId(null);\r\n      setIndex(null);\r\n    } else {\r\n      toast.error(\"Something went wrong, try again\");\r\n      setVisible(false);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFolder = async (i, id) => {\r\n    setVisible(true);\r\n\r\n    setFolderId(id);\r\n    setIndex(i);\r\n  };\r\n\r\n  const onFolderClick = async (folder) => {\r\n    if (props?.isAction || props?.isMailAddedToFolder) {\r\n      props.updateFolderCachedData(\"delete\");\r\n      props?.setLoader(true);\r\n      setTimeout(() => {\r\n        props?.setLoader(false);\r\n      }, [1000]);\r\n    }\r\n    props.updateSeachText({});\r\n    getFilteredMailList(folder.apiFolderId);\r\n    props.setFilterOptions({\r\n      folder: folder.apiFolderId,\r\n    });\r\n    props.setActiveModule(\"inbox\");\r\n    props.setIsAction(false);\r\n    props?.setIsMailAddedToFolder(false);\r\n  };\r\n\r\n  const getFilteredMailList = async (filter) => {\r\n    props.setInboxMailData([]);\r\n    props.updateSeachText({});\r\n    if (props.page > 2) props.getAllMails(\"refresh\");\r\n    if (typeof filter === \"string\") {\r\n      switch (filter) {\r\n        case \"Unread\":\r\n          props.setFilterOptions({\r\n            mail_action: MAIL_ACTIONS.UNREAD,\r\n          });\r\n          props.updateActiveModule(\"Unread\");\r\n\r\n          setIsActive(\"Unread\");\r\n          break;\r\n        case \"Sent\":\r\n          props.setFilterOptions({ is_sent: 1 });\r\n          props.updateActiveModule(\"Sent\");\r\n          setIsActive(\"Sent\");\r\n          break;\r\n        case \"All\":\r\n          props.setFilterOptions({});\r\n          props.updateActiveModule(\"All\");\r\n\r\n          setIsActive(\"All\");\r\n          break;\r\n        case \"Archive\":\r\n          props.setFilterOptions({ mail_action: MAIL_ACTIONS.READ });\r\n          props.updateActiveModule(\"Archive\");\r\n\r\n          setIsActive(\"Archive\");\r\n          break;\r\n        case \"Starred\":\r\n          props.setFilterOptions({ mail_action: MAIL_ACTIONS.STARRED });\r\n          props.updateActiveModule(\"Starred\");\r\n\r\n          setIsActive(\"Starred\");\r\n          break;\r\n        case \"Crashed\":\r\n          props.setFilterOptions({ mail_action: MAIL_ACTIONS.CRASHED });\r\n          props.updateActiveModule(\"Crashed\");\r\n\r\n          setIsActive(\"Crashed\");\r\n          break;\r\n      }\r\n    } else {\r\n      setIsActive(filter);\r\n      props.updateActiveModule(filter);\r\n    }\r\n\r\n    props.setActiveModule(\"inbox\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-ibx-aside-update\">\r\n        <div className=\"nk-ibx-head\">\r\n          <div className=\"mr-n1\" onClick={props.openComposeModel}>\r\n            <span className=\"link link-text\">\r\n              <em className=\"icon-circle icon ni ni-plus\"></em>\r\n              <span>Compose Mail</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"nk-ibx-nav jumbotron-overflow\">\r\n          <ul className=\"nk-ibx-menu\" style={{ cursor: \"pointer\" }}>\r\n            <li\r\n              className={props.isActiveModule === \"Unread\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"Unread\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-inbox-in\"></em>\r\n                <span className=\"nk-ibx-menu-text\">Unread messages</span>\r\n                <span className=\"badge badge-pill badge-primary\">\r\n                  {props.unreadMailsCount}\r\n                </span>\r\n              </a>\r\n            </li>\r\n\r\n            <li\r\n              className={props.isActiveModule === \"Archive\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"Archive\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-inbox-in-fill\"></em>\r\n                <span className=\"nk-ibx-menu-text\">Archive messages</span>\r\n                {props?.archiveLoader && (\r\n                  <div className=\"ml-auto\">\r\n                    <Loader\r\n                      type=\"ThreeDots\"\r\n                      color=\"#6576ff\"\r\n                      height={20}\r\n                      width={20}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </a>\r\n            </li>\r\n\r\n            <li\r\n              className={props.isActiveModule === \"All\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"All\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-emails\"></em>\r\n                <span className=\"nk-ibx-menu-text\">All mails</span>\r\n              </a>\r\n            </li>\r\n\r\n            <li\r\n              className={props.isActiveModule === \"Sent\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"Sent\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-send\"></em>\r\n                <span className=\"nk-ibx-menu-text\">Sent</span>\r\n              </a>\r\n            </li>\r\n\r\n            <li\r\n              className={props.isActiveModule === \"Crashed\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"Crashed\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-briefcase\"></em>\r\n                <span className=\"nk-ibx-menu-text\">Crash messages</span>\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={props.isActiveModule === \"Starred\" ? \"active\" : \"\"}\r\n              onClick={() => {\r\n                getFilteredMailList(\"Starred\");\r\n              }}\r\n            >\r\n              <a className=\"nk-ibx-menu-item\">\r\n                <em className=\"icon ni ni-star\"></em>\r\n                <span className=\"nk-ibx-menu-text\">Starred</span>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className=\"nk-ibx-nav-head\">\r\n            {/* Folder Creation */}\r\n            <h6 className=\"title\">Folders</h6>\r\n            <a>\r\n              {!createFolder ? (\r\n                <abbr title=\"Add folder\">\r\n                  <em\r\n                    onClick={handleCreateFolder}\r\n                    style={{ cursor: \"pointer\" }}\r\n                    className=\"icon ni ni-plus-c\"\r\n                  ></em>\r\n                </abbr>\r\n              ) : (\r\n                <em\r\n                  onClick={handleCloseCreateFolder}\r\n                  style={{ cursor: \"pointer\", color: \"red\" }}\r\n                  className=\"icon ni ni-cross-c\"\r\n                ></em>\r\n              )}\r\n            </a>\r\n          </div>\r\n          <ul className=\"nk-ibx-label\">\r\n            {createFolder && (\r\n              <li style={{ backgroundColor: \"#ffff\" }}>\r\n                <div className=\"nk-reply-form-field\">\r\n                  {error !== \"\" && <p style={{ color: \"red\" }}>{error}</p>}\r\n                  <input\r\n                    className=\"form-control form-control-simple no-resize\"\r\n                    value={folderName}\r\n                    type=\"text\"\r\n                    placeholder=\"Folder Name\"\r\n                    onChange={handleFolderName}\r\n                    onKeyDown={(e) => {\r\n                      !disableCheckButton && handleKeypress(e, folderId);\r\n                    }}\r\n                    autoFocus\r\n                  />\r\n                </div>\r\n                <div style={{ marginLeft: \"7%\", cursor: \"pointer\" }}>\r\n                  {isEdit ? (\r\n                    <em\r\n                      className=\"ni ni-check-fill-c\"\r\n                      style={{ color: \"#798bff\" }}\r\n                      onClick={() => {\r\n                        handleEditFolderResponse(folderId);\r\n                      }}\r\n                    ></em>\r\n                  ) : (\r\n                    <em\r\n                      className=\"ni ni-check-fill-c\"\r\n                      style={{ color: \"#798bff\" }}\r\n                      onClick={() => {\r\n                        !disableCheckButton && handleFolderCreation();\r\n                      }}\r\n                    ></em>\r\n                  )}\r\n                </div>\r\n              </li>\r\n            )}\r\n\r\n            {/* listing of folders */}\r\n            {props.folderList?.map((folder, i) => {\r\n              return (\r\n                <li\r\n                  key={`folderList${i}`}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  className={\r\n                    props.isActiveModule === folder?.apiFolderId ? \"active\" : \"\"\r\n                  }\r\n                >\r\n                  <a\r\n                    onClick={() => onFolderClick(folder)}\r\n                    style={{ width: \"80%\" }}\r\n                  >\r\n                    <em\r\n                      className=\"ni ni-folder-fill\"\r\n                      style={{ color: folder?.apiColorCode }}\r\n                    ></em>\r\n\r\n                    <span className=\"nk-ibx-label-text folder-styling\">\r\n                      <abbr title={folder?.apiFolderName}>\r\n                        <div className=\"folder-name \">\r\n                          {folder?.apiFolderName}\r\n                          {props?.loader &&\r\n                          folder?.apiFolderId === props.isFolderLoaderId ? (\r\n                            <div className=\"ml-auto\">\r\n                              <Loader\r\n                                type=\"ThreeDots\"\r\n                                color=\"#6576ff\"\r\n                                height={30}\r\n                                width={30}\r\n                              />\r\n                            </div>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n                      </abbr>\r\n                    </span>\r\n                  </a>\r\n\r\n                  <div data-index={i} className={`dropdown ${openDropDown}`}>\r\n                    <a\r\n                      className=\"dropdown-toggle\"\r\n                      data-toggle=\"dropdown\"\r\n                      aria-expanded={openDropDown === \"show\" ? \"true\" : \"false\"}\r\n                    >\r\n                      <em\r\n                        className=\"icon ni ni-more-v\"\r\n                        onClick={() =>\r\n                          handleSetOpenDropDown(folder?.apiFolderId)\r\n                        }\r\n                      ></em>\r\n                    </a>\r\n                    {data === folder?.apiFolderId && (\r\n                      <div\r\n                        className={`dropdown-menu dropdown-menu-sm dropdown-menu-right ${openDropDown}`}\r\n                      >\r\n                        <ul className=\"link-list-opt no-bdr\">\r\n                          <li onClick={() => handleEditFolder(i)}>\r\n                            <a>\r\n                              <span>Edit Folder</span>\r\n                            </a>\r\n                          </li>\r\n                          <li\r\n                            onClick={() =>\r\n                              handleRemoveFolder(i, folder?.apiFolderId)\r\n                            }\r\n                          >\r\n                            <a>\r\n                              <span>Remove Folder</span>\r\n                            </a>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      {visible && (\r\n        <Modal\r\n          // className=\"modal fade\"\r\n          visible={visible}\r\n          id=\"remove-folder\"\r\n          width=\"800\"\r\n          height=\"170\"\r\n          effect=\"fadeInUp\"\r\n          onClickAway={() => {\r\n            setVisible(false);\r\n          }}\r\n        >\r\n          <div className=\"nk-reply-form-header\">\r\n            <div className=\"nk-reply-form-group\">\r\n              <div className=\"nk-reply-form-input-group\">\r\n                <div className=\"mark-leave-tag-container\">\r\n                  <h2 style={{ fontSize: \"161%\" }}>Delete Folder</h2>\r\n                  <em\r\n                    className=\"icon ni ni-cross\"\r\n                    onClick={() => {\r\n                      setVisible(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <hr />\r\n                <div\r\n                  className=\"nk-reply-form-input nk-reply-form-input-to overflow\"\r\n                  style={{ display: \"block\", fontSize: 17 }}\r\n                >\r\n                  <ul style={{ marginRight: \"3%\" }}>\r\n                    Are you sure you permanently want to delete this folder ?\r\n                  </ul>\r\n                  <div className=\"remove-folder-options\">\r\n                    <div\r\n                      className=\"remove-folder-yes\"\r\n                      onClick={handleDeleteFolder}\r\n                    >\r\n                      Yes\r\n                    </div>\r\n                    <div\r\n                      className=\"remove-folder-yes\"\r\n                      onClick={() => {\r\n                        setVisible(false);\r\n                      }}\r\n                    >\r\n                      No\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateFolderList,\r\n  updateActiveModule,\r\n  updateSeachText,\r\n  updateFolderCachedData,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  folderList: state.folderList,\r\n  userData: state.userData,\r\n  unreadMailsCount: state.unreadMailsCount,\r\n  isActiveModule: state.isActiveModule,\r\n  archiveLoader: state.archiveLoader,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Sidebar);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\ContainerComponent.jsx",["359","360","361","362","363","364","365","366"],"import React, { useEffect, useState } from \"react\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\n// import Toaster from \"../../util/toaster/Toaster\";\r\nimport Sidebar from \"../views/Sidebar\";\r\nimport Inbox from \"../views/Inbox\";\r\n// import CommentBox from \"../views/Commentbox\";\r\nimport Viewcommentbox from \"../views/Viewcommentbox\";\r\nimport { connect } from \"react-redux\";\r\nimport { GET_ALL_MAIL, UPDATE_MAIL } from \"../../config/constants\";\r\nimport { formatDate } from \"../../util/dateFormat/DateFormat\";\r\nimport ComposeMail from \"../../components/sidebar/composeMail\";\r\nimport Modal from \"react-modal\";\r\n\r\nlet page = 1;\r\nlet limit = 15;\r\nlet total = limit;\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    height: \"0px\",\r\n    width: \"0px\",\r\n  },\r\n  content: {\r\n    position: \"fixed\",\r\n    top: \"10px\",\r\n    left: \"0px\",\r\n    width: \"0px\",\r\n    height: \"0px\",\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    zIndex: \"10001\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n};\r\nconst Container = (props) => {\r\n  const [inboxData, setInboxData] = useState([]);\r\n  const [selected, setSelected] = useState(\"unread\");\r\n  const [unreadMails, setUnreadMails] = useState(0);\r\n  const [totalMails, setTotalMails] = useState(0);\r\n  const [mailId, setMailId] = useState(\"\");\r\n  const [visiable, setVisiable] = useState(false);\r\n\r\n  const openComposeModel = () => {\r\n    setVisiable(true);\r\n  };\r\n\r\n  const closeComposeModel = () => setVisiable(false);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) {\r\n      getAllMails(selected);\r\n    }\r\n  }, [props?.userData?.designations]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) getAllMails(selected);\r\n    setMailId(\"\");\r\n  }, [props.searchText]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) getAllMails(selected);\r\n    setMailId(\"\");\r\n  }, [props?.station]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) getAllMails(selected);\r\n  }, [props?.sortFilter]);\r\n\r\n  useEffect(() => {\r\n    setMailId(\"\");\r\n  }, [selected]);\r\n\r\n  const filterCheck = (selectedOption) => {\r\n    setSelected(selectedOption);\r\n    let filter = \"\";\r\n    if (typeof selectedOption === \"string\") {\r\n      switch (selectedOption) {\r\n        case \"unread\":\r\n          filter = \"&is_read=0\";\r\n          break;\r\n        case \"archive\":\r\n          filter = \"\";\r\n          break;\r\n        case \"sent\":\r\n          filter = \"&is_sent=1\";\r\n          break;\r\n        case \"crashed\":\r\n          filter = \"&is_crashed=0&is_crashed=1\";\r\n          break;\r\n        case \"starred\":\r\n          filter = \"&is_starred=1\";\r\n          break;\r\n\r\n        default:\r\n          filter = \"\";\r\n      }\r\n    } else {\r\n      filter = `&folder=${selectedOption}`;\r\n    }\r\n    return filter;\r\n  };\r\n\r\n  const getAllMails = async (selectedOption) => {\r\n    // setInboxData([]);\r\n    page = 1;\r\n    let filter = filterCheck(selectedOption);\r\n    let url = `${GET_ALL_MAIL}${props?.userData?.designations[0]?.id}&limit=${limit}&pageNo=${page}${filter}`;\r\n\r\n    if (props?.sortFilter !== \"\") {\r\n      url += `&${props?.sortFilter}`;\r\n    }\r\n\r\n    if (Object.keys(props.searchText).length > 0) {\r\n      url += `&search_data=${props?.searchText?.searchData.join()}`;\r\n    }\r\n\r\n    if (props?.station?.length > 0) {\r\n      url += `&by_stations=[${props?.station}]`;\r\n    }\r\n    const resp = await Api.ApiHandle(url, \"\", \"GET\");\r\n\r\n    const mailData = [];\r\n    if (resp.status === 1) {\r\n      // props.updateUnreadMailsCount(resp.data?.unreadCount);\r\n      // setNoOfMails(resp.data?.count);\r\n      setUnreadMails(resp?.data?.unreadCount);\r\n      setTotalMails(resp?.data?.count);\r\n      resp.data.data.map((inbox) => {\r\n        const obj = {\r\n          id: inbox?.id,\r\n          from: inbox?.Source?.designation,\r\n          actualFormId: inbox?.From?.id,\r\n          branch: inbox?.Source?.branch,\r\n          from_id: inbox?.From?.id,\r\n          subject: inbox?.subject,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          op: inbox?.op,\r\n          timeStamp: formatDate(inbox?.updatedAt),\r\n          isRead: inbox?.is_read,\r\n          isStarred: inbox?.is_starred,\r\n          isCrashed: inbox?.is_crashed,\r\n          fromIsRead: inbox?.from_is_read,\r\n        };\r\n\r\n        mailData.push(obj);\r\n      });\r\n      total = resp.data?.data?.length;\r\n\r\n      setInboxData(mailData);\r\n    }\r\n  };\r\n\r\n  const updateMail = async (id, index) => {\r\n    setMailId(id);\r\n    if (selected === \"sent\") {\r\n      if (\r\n        inboxData[index].fromIsRead === 0 &&\r\n        props.userData.designations[0].id === inboxData[index].actualFormId\r\n      ) {\r\n        inboxData[index].fromIsRead = 1;\r\n        const payload = { from_is_read: 1 };\r\n\r\n        await Api.ApiHandle(`${UPDATE_MAIL}/${id}`, payload, \"PUT\");\r\n      }\r\n    } else {\r\n      let payload = {};\r\n      if (props?.userData?.designations[0]?.id == inboxData[index].from_id) {\r\n        if (inboxData[index].fromIsRead === 0) {\r\n          inboxData[index].fromIsRead = 1;\r\n          payload = { from_is_read: 1 };\r\n        }\r\n      } else {\r\n        if (inboxData[index].isRead === 0) {\r\n          inboxData[index].isRead = 1;\r\n          payload = { is_read: 1 };\r\n        }\r\n      }\r\n      if (inboxData[index].isRead === 0) {\r\n        inboxData[index].isRead = 1;\r\n        if (inboxData[index].isCrashed === 1) {\r\n          inboxData[index].isCrashed = 1;\r\n          payload.is_crashed = 0;\r\n        }\r\n      }\r\n      if (\r\n        payload.hasOwnProperty(\"is_read\") ||\r\n        payload.hasOwnProperty(\"from_is_read\")\r\n      ) {\r\n        const resp = await Api.ApiHandle(\r\n          `${UPDATE_MAIL}/${id}`,\r\n          payload,\r\n          \"PUT\"\r\n        );\r\n\r\n        if (resp?.status) setUnreadMails(unreadMails - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getNextClick = async (data) => {\r\n    const mailData = [];\r\n    setMailId(\"\");\r\n\r\n    page = page + 1;\r\n    let filter = filterCheck(selected);\r\n    let url = `${GET_ALL_MAIL}${props?.userData?.designations[0]?.id}&limit=${limit}&pageNo=${page}${filter}`;\r\n\r\n    if (props?.sortFilter !== \"\") {\r\n      url += `&${props?.sortFilter}`;\r\n    }\r\n\r\n    if (Object.keys(props.searchText).length > 0) {\r\n      url += `&search_data=${props?.searchText?.searchData.join()}`;\r\n    }\r\n\r\n    if (props?.station?.length > 0) {\r\n      url += `&by_stations=[${props?.station}]`;\r\n    }\r\n\r\n    const resp = await Api.ApiHandle(url, \"\", \"GET\");\r\n\r\n    if (resp.status === 1) {\r\n      setUnreadMails(resp?.data?.unreadCount);\r\n      setTotalMails(resp?.data?.count);\r\n      resp.data.data.map((inbox, i) => {\r\n        const obj = {\r\n          id: inbox?.id,\r\n          from: inbox?.Source?.designation,\r\n          actualFormId: inbox?.From?.id,\r\n          subject: inbox?.subject,\r\n          from_id: inbox?.From?.id,\r\n          op: inbox?.op,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          timeStamp: formatDate(inbox?.updatedAt),\r\n          isRead: inbox?.is_read,\r\n          isStarred: inbox?.is_starred,\r\n          isCrashed: inbox?.is_crashed,\r\n          branch: inbox?.Source?.branch,\r\n          fromIsRead: inbox?.from_is_read,\r\n        };\r\n        mailData.push(obj);\r\n      });\r\n      total = limit * page;\r\n      total = total > resp.data?.count ? resp.data?.count : total;\r\n      setInboxData(mailData);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const getPrevClick = async () => {\r\n    const mailData = [];\r\n    setMailId(\"\");\r\n\r\n    page = page - 1;\r\n    let filter = filterCheck(selected);\r\n    let url = `${GET_ALL_MAIL}${props?.userData?.designations[0]?.id}&limit=${limit}&pageNo=${page}${filter}`;\r\n\r\n    if (props?.sortFilter !== \"\") {\r\n      url += `&${props?.sortFilter}`;\r\n    }\r\n\r\n    if (Object.keys(props.searchText).length > 0) {\r\n      url += `&search_data=${props?.searchText?.searchData.join()}`;\r\n    }\r\n\r\n    if (props?.station?.length > 0) {\r\n      url += `&by_stations=[${props?.station}]`;\r\n    }\r\n\r\n    if (props?.station?.length > 0) {\r\n      url += `&by_stations=[${props?.station}]`;\r\n    }\r\n    const resp = await Api.ApiHandle(url, \"\", \"GET\");\r\n\r\n    if (resp.status === 1) {\r\n      setUnreadMails(resp?.data?.unreadCount);\r\n      setTotalMails(resp?.data?.count);\r\n      resp.data.data.map((inbox, i) => {\r\n        const obj = {\r\n          id: inbox?.id,\r\n          from: inbox?.Source?.designation,\r\n          actualFormId: inbox?.From?.id,\r\n          subject: inbox?.subject,\r\n          from_id: inbox?.From?.id,\r\n          op: inbox?.op,\r\n          toBranch: inbox?.To?.branch,\r\n          toDesignation: inbox?.To?.designation,\r\n          timeStamp: formatDate(inbox?.updatedAt),\r\n          isRead: inbox?.is_read,\r\n          isStarred: inbox?.is_starred,\r\n          isCrashed: inbox?.is_crashed,\r\n          branch: inbox?.Source?.branch,\r\n          fromIsRead: inbox?.from_is_read,\r\n        };\r\n        mailData.push(obj);\r\n      });\r\n      total = limit * page;\r\n      total = total > resp.data?.count ? resp.data?.count : total;\r\n      setInboxData(mailData);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const setMailIdState = (id) => {\r\n    setMailId(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-content p-0\">\r\n        <div className=\"nk-content-inner\">\r\n          <div className=\"nk-content-body\">\r\n            <div className=\"nk-ibx\">\r\n              <Sidebar\r\n                onClick={getAllMails}\r\n                unreadCount={unreadMails}\r\n                openComposeModel={openComposeModel}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"nk-ibx-body body-width bg-white\">\r\n        <Inbox\r\n          inbox={inboxData}\r\n          selected={selected}\r\n          onClick={updateMail}\r\n          mailDataLength={inboxData.length}\r\n          totalMails={totalMails}\r\n          getNextClick={getNextClick}\r\n          getPrevClick={getPrevClick}\r\n          total={total}\r\n          getAllMails={getAllMails}\r\n          selectedMail={mailId}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"col-md-7 px-0\"\r\n        style={{ borderLeft: \"1px solid lightgray\", marginLeft: -14 }}\r\n      >\r\n        <div className=\"my-overflow main-body jumbotron-overflow\">\r\n          <Viewcommentbox\r\n            mailId={mailId}\r\n            selected={selected}\r\n            getAllMails={getAllMails}\r\n            inboxData={inboxData}\r\n            setMailId={setMailIdState}\r\n          />\r\n        </div>\r\n      </div>\r\n      {visiable && (\r\n        <Modal\r\n          // className=\"modal fade\"\r\n          isOpen={visiable}\r\n          style={customStyles}\r\n          id=\"compose-mail\"\r\n          width=\"720\"\r\n          effect=\"fadeInUp\"\r\n          shouldCloseOnOverlayClick={false}\r\n          onRequestClose={closeComposeModel}\r\n        >\r\n          <ComposeMail\r\n            closeModel={closeComposeModel}\r\n            userData={props.userData}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {/* <CommentBox /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n  isActiveModule3Column: state.isActiveModule3Column,\r\n  searchText: state.searchText,\r\n  station: state.station,\r\n  sortFilter: state.sortFilter,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Container);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\composeMail.jsx",["367","368","369","370","371","372","373","374","375","376","377","378","379","380"],"import { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport { connect } from \"react-redux\";\r\nimport Axios from \"axios\";\r\nimport fileDownload from \"js-file-download\";\r\nimport {\r\n  FREQUENT_ADDRESSES,\r\n  IMAGE_UPLOAD_BODY,\r\n  COMPOSE_MAIL,\r\n  UPLOAD_ATTACHMENT,\r\n  UNLINK_ATTACHMENT,\r\n} from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Editor from \"./tinyEditor\";\r\nimport DragAndDrop from \"../common/drag_drop\";\r\nimport ComposeTo from \"../common/compose_to\";\r\nimport { updateSentCall } from \"../../redux/action/InboxAction\";\r\nimport { LogApi } from \"../../util/apiLog/LogApi\";\r\n\r\nconst ComposeMail = (props) => {\r\n  const [to, setTo] = useState([]);\r\n  const [commonAddresses, setCommonAddresses] = useState([]);\r\n  const [allCommonAddresses, setAllCommonAddresses] = useState([]);\r\n  const [attachment, setattachment] = useState([]);\r\n  const [disableSendButton, setDisableSendButton] = useState(false);\r\n  const [bodyData, setBodyData] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [isFileUploading, setFileUploading] = useState(false);\r\n  const [isFileDragging, setFileDragging] = useState(false);\r\n  const [isFullSize, setFullSize] = useState(true);\r\n  const [actualFrequentAddress, setActualFrequentAddress] = useState([]);\r\n  const [containerValue, setContainerValue] = useState(\"\");\r\n  const [designationList, setDesignationList] = useState([]);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const unlinkAttachedFiles = () => {\r\n    logDataFunction(\"CLICKED ON TRASH ON COMPOSE\", 0, 0);\r\n    let attachid = [];\r\n    attachment?.map(async (attach) => {\r\n      attachid = [...attachid, attach?.id];\r\n      const resp = await Api.ApiHandle(\r\n        `${UNLINK_ATTACHMENT}${attach?.id}`,\r\n        \"\",\r\n        \"GET\",\r\n        logData\r\n      );\r\n\r\n      if (resp.status === 1) {\r\n        logDataFunction(\"UNLINK ATTACHMENT ON COMPOSE\", 0, attachid);\r\n        LogApi(logData);\r\n      }\r\n    });\r\n  };\r\n\r\n  const inputAttach = useRef(null);\r\n  const attachmentRef = useRef();\r\n\r\n  useEffect(() => {\r\n    getFrequentAddresses();\r\n  }, []);\r\n\r\n  useEffect(() => {}, [attachment]);\r\n\r\n  const handleToData = (selected, unselected) => {\r\n    setTo(selected);\r\n\r\n    if (selected.length > 0) {\r\n      if (unselected.hasOwnProperty(\"removedValue\")) {\r\n        const deselectedFrequentAddress = actualFrequentAddress.filter(\r\n          (item) => {\r\n            if (item.id === unselected.removedValue.id) return item;\r\n          }\r\n        );\r\n\r\n        setCommonAddresses((prev) => [...prev, ...deselectedFrequentAddress]);\r\n      } else {\r\n        setCommonAddresses(\r\n          commonAddresses.filter(\r\n            (item) => item?.id !== selected[selected.length - 1].id\r\n          )\r\n        );\r\n      }\r\n    } else setCommonAddresses(actualFrequentAddress);\r\n  };\r\n\r\n  const getFrequentAddresses = async () => {\r\n    logDataFunction(\"LIST OF FREQUENT ADDRESSES\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${FREQUENT_ADDRESSES}?type=${props?.isMostFrequent}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp?.status === 1) {\r\n      const _commonAddresses = [];\r\n      resp?.data?.map((com) => {\r\n        const common = {\r\n          id: com?.id,\r\n          branch: com?.branch,\r\n          designation: com?.designation,\r\n          belongsTo: \"commonAddresses\",\r\n          // first_name: com?.first_name,\r\n        };\r\n        _commonAddresses.push(common);\r\n      });\r\n      setActualFrequentAddress(_commonAddresses);\r\n\r\n      setCommonAddresses(_commonAddresses);\r\n      setAllCommonAddresses(_commonAddresses);\r\n    }\r\n  };\r\n\r\n  const handleattach = (e) => {\r\n    inputAttach.current.click();\r\n  };\r\n\r\n  const onChangeAttachFile = async (e) => {\r\n    setFileUploading(true);\r\n    let val = attachment.map((item) => {\r\n      return item.name;\r\n    });\r\n    [...e.target.files].forEach(async (item) => {\r\n      let str = item?.name;\r\n      let lastIndex = str.lastIndexOf(\".\");\r\n      let filename = str.slice(0, lastIndex);\r\n      let extname = str.slice(lastIndex + 1);\r\n      if (extname === \"exe\") {\r\n        Toaster(\"error\", \"Incorrect File Format(.exe)\");\r\n        setFileUploading(false);\r\n      } else if (extname === \"json\") {\r\n        Toaster(\"error\", \"Incorrect File Format(.json)\");\r\n        setFileUploading(false);\r\n      } else if (val.includes(item?.name)) {\r\n        Toaster(\"error\", \"File already exist with same name !!\");\r\n        setFileUploading(false);\r\n      } else {\r\n        let fileNameSeparation = filename;\r\n\r\n        const data = new FormData();\r\n\r\n        data.append(\"images\", item);\r\n        data.append(\"imagename\", `${fileNameSeparation}`);\r\n        data.append(\"mailId\", 0);\r\n        logDataFunction(\" CLICK ON UPLOAD ATTACHMENT\", 0, 0);\r\n        const resp = await Api.ApiHandle(\r\n          `${UPLOAD_ATTACHMENT}`,\r\n          data,\r\n          \"post\",\r\n          logData\r\n        );\r\n        if (resp?.status === 1) {\r\n          setattachment((prev) => [...prev, resp.data]);\r\n          attachmentRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n          setFileUploading(false);\r\n          e.target.value = \"\";\r\n          logDataFunction(\"UPLOAD ATTACHMENT\", 0, [resp?.data?.id]);\r\n          await LogApi(logData);\r\n        } else {\r\n          Toaster(\"error\", \"Something went wrong!!\");\r\n          setFileUploading(false);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFrequentAddresses = (common, id) => {\r\n    setTo((prev) => [...prev, common]);\r\n    setCommonAddresses(commonAddresses.filter((item) => item?.id !== id));\r\n  };\r\n\r\n  const handleSubject = (event) => {\r\n    setSubject(event.target.value);\r\n  };\r\n\r\n  const sendMail = async () => {\r\n    setDisableSendButton(true);\r\n\r\n    if (to.length < 1) {\r\n      Toaster(\"error\", \"Please Select Receiver Address\");\r\n      setDisableSendButton(false);\r\n      setDisableSendButton(true);\r\n      setTimeout(() => {\r\n        setDisableSendButton(false);\r\n      }, 3000);\r\n      return;\r\n    }\r\n    if (subject == \"\") {\r\n      Toaster(\"error\", \"Please enter the subject\");\r\n      setDisableSendButton(false);\r\n      setDisableSendButton(true);\r\n      setTimeout(() => {\r\n        setDisableSendButton(false);\r\n      }, 3000);\r\n      return;\r\n    }\r\n\r\n    if (isFileUploading === true) {\r\n      Toaster(\"error\", \"File uploading underway\");\r\n      setDisableSendButton(false);\r\n    } else {\r\n      window.tinymce.triggerSave();\r\n      let bodyData1 = document?.getElementById(\"mytextarea\")?.value;\r\n      let doc = new DOMParser().parseFromString(bodyData1, \"text/html\");\r\n      for (let i = 0; i < doc.getElementsByTagName(\"img\").length; i++) {\r\n        let base64 = doc.getElementsByTagName(\"img\")[i].getAttribute(\"src\");\r\n        const imageExtention = base64MimeType(base64).split(\"/\");\r\n\r\n        let payload = {\r\n          image_base64: base64,\r\n          image_extention: imageExtention[1],\r\n        };\r\n        logDataFunction(\"IMAGE UPLOAD\", 0, 0);\r\n        const resp = await Api.ApiHandle(\r\n          `${IMAGE_UPLOAD_BODY}`,\r\n          payload,\r\n          \"post\",\r\n          logData\r\n        );\r\n        if (resp.status === 1) {\r\n          doc.getElementsByTagName(\"img\")[i].setAttribute(\"src\", resp.data.url);\r\n        }\r\n      }\r\n      let final_body =\r\n        \"<html>\" +\r\n        doc.children[0].innerHTML +\r\n        \"<style>p{margin:0px}</style></html>\";\r\n      let attachIds = [];\r\n      attachment.map((reskl) => {\r\n        attachIds.push(reskl.id);\r\n      });\r\n\r\n      let toastCount = 0;\r\n      const recipients = to.map((item) => item.id);\r\n\r\n      const designationId = props?.userData?.designations.filter((item) => {\r\n        if (item.default_desig) return item;\r\n      })[0].id;\r\n      let compose = {\r\n        to: recipients,\r\n        from: designationId,\r\n        subject: subject,\r\n        bodyData: final_body,\r\n      };\r\n      if (attachIds.length > 0) {\r\n        compose.attachement_ids = attachIds.join();\r\n      }\r\n      logDataFunction(\"COMPOSE MAIL\", 0, 0);\r\n      const resp = await Api.ApiHandle(\r\n        `${COMPOSE_MAIL}`,\r\n        compose,\r\n        \"post\",\r\n        logData\r\n      );\r\n      if (resp.status === 1) {\r\n        toastCount += 1;\r\n        props.closeModel();\r\n        if (toastCount === 1) Toaster(\"success\", \"Mail sent Successfully\");\r\n        props.updateSentCall(0);\r\n        setDisableSendButton(false);\r\n      } else {\r\n        Toaster(\"error\", \"Mail sent error\");\r\n        setDisableSendButton(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  function base64MimeType(encoded) {\r\n    var result = null;\r\n\r\n    if (typeof encoded !== \"string\") {\r\n      return result;\r\n    }\r\n\r\n    var mime = encoded.match(/data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/);\r\n\r\n    if (mime && mime.length) {\r\n      result = mime[1];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  const downlaodAttachment = (dis, attachements) => {\r\n    dis.target.parentElement.querySelector(\".spinner-border\").style.display =\r\n      \"inline-block\";\r\n    dis.target.style.display = \"none\";\r\n    let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/downloadfile/${attachements.id}`;\r\n    logDataFunction(\"DOWNLOAD ATTACHMENT FROM COMPOSE\", 0, attachements.id);\r\n    LogApi(logData);\r\n    let headers = {};\r\n\r\n    if (localStorage.getItem(\"auth\")) {\r\n      headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n    }\r\n\r\n    Axios.get(apiurl, { responseType: \"blob\", headers: headers })\r\n      .then(async (res) => {\r\n        fileDownload(res.data, attachements?.name);\r\n        dis.target.parentElement.querySelector(\r\n          \".spinner-border\"\r\n        ).style.display = \"none\";\r\n        dis.target.style.display = \"inline-block\";\r\n      })\r\n      .catch(function (error) {\r\n        Toaster(\"error\", error.message);\r\n        dis.target.parentElement.querySelector(\r\n          \".spinner-border\"\r\n        ).style.display = \"none\";\r\n        dis.target.style.display = \"inline-block\";\r\n      });\r\n  };\r\n\r\n  const handleRemoveAttach = async (e, id) => {\r\n    setattachment(\r\n      attachment.filter((res) => {\r\n        if (res.id != id) {\r\n          return res;\r\n        }\r\n      })\r\n    );\r\n    logDataFunction(\"REMOVE ATTACHEMENT ON COMPOSE\", 0, id);\r\n\r\n    await Api.ApiHandle(`${UNLINK_ATTACHMENT}${id}`, \"\", \"GET\", logData);\r\n  };\r\n\r\n  // check whether file is dragging\r\n  window.ondragenter = (e) => {\r\n    if (!isFileDragging) {\r\n      setFileDragging(true);\r\n    }\r\n  };\r\n\r\n  const maxMinHandle = () => {\r\n    setFullSize(!isFullSize);\r\n  };\r\n\r\n  const updateContainerValue = (value) => {\r\n    setContainerValue(value);\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    let fileList = [];\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (!files[i]) return;\r\n      fileList.push(files[i]);\r\n    }\r\n    fileList.forEach(async (item) => {\r\n      let fileNameSeparation = item?.name?.split(\".\");\r\n      setFileUploading(true);\r\n      const data = new FormData();\r\n      data.append(\"images\", item);\r\n      data.append(\"imagename\", `${fileNameSeparation[0]}`);\r\n\r\n      const resp = await Api.ApiHandle(`${UPLOAD_ATTACHMENT}`, data, \"post\");\r\n      if (resp.status === 1) {\r\n        setattachment((prev) => [...prev, resp.data]);\r\n        setFileDragging(false);\r\n        setFileUploading(false);\r\n        logDataFunction(\"UPLOAD ATTACHMENT\", 0, [resp?.data?.id]);\r\n        await LogApi(logData);\r\n      } else {\r\n        Toaster(\"error\", `${resp?.message}`);\r\n      }\r\n      setFileUploading(false);\r\n      setFileDragging(false);\r\n    });\r\n  };\r\n\r\n  const updateFileDragging = (isTrue) => {\r\n    setFileDragging(isTrue);\r\n  };\r\n\r\n  const handleFocus = (event) => {\r\n    if (event?.keyCode === 9 && event.target.nodeName === \"INPUT\") {\r\n      window?.tinymce?.get(\"mytextarea\")?.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n      <div\r\n        className=\"modal-content\"\r\n        id=\"loading\"\r\n        style={{\r\n          position: \"fixed\",\r\n          width: isFullSize ? \"80%\" : \"500px\",\r\n          height: \"77%\",\r\n          right: isFullSize ? 0 : \"30px\",\r\n          left: isFullSize && 0,\r\n          top: isFullSize && 0,\r\n          bottom: isFullSize ? \"6px\" : 0,\r\n          margin: \"auto\",\r\n          marginTop: isFullSize && \"7%\",\r\n          overflow: \"auto\",\r\n          maxHeight: \"62%\",\r\n        }}\r\n      >\r\n        <div className=\"modal-header\" style={{ padding: \"12px 20px\" }}>\r\n          <h6 className=\"modal-title\">Compose Message </h6>\r\n          <div className=\"icon\" style={{ display: \"flex\" }}>\r\n            <span style={{ padding: \"0 10px\" }} onClick={maxMinHandle}>\r\n              <em\r\n                className={`icon ni ni-m${isFullSize ? \"in\" : \"ax\"}imize-alt`}\r\n              ></em>\r\n            </span>\r\n\r\n            <span\r\n              onClick={() => {\r\n                unlinkAttachedFiles();\r\n                props.closeModel();\r\n              }}\r\n            >\r\n              <em className=\"icon ni ni-cross-sm\"></em>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-body p-0\">\r\n          <div className=\"compose-message-div\">\r\n            <ComposeTo\r\n              to={to}\r\n              designationList={designationList}\r\n              setTo={setTo}\r\n              commonAddresses={commonAddresses}\r\n              setCommonAddresses={setCommonAddresses}\r\n              allCommonAddresses={allCommonAddresses}\r\n              handleFrequentAddresses={handleFrequentAddresses}\r\n              isFullSize={isFullSize}\r\n            />\r\n            <div className=\"nk-reply-form-editor\">\r\n              <div\r\n                className=\"nk-reply-form-field\"\r\n                // style={{ marginTop: isFullSize ? \"4%\" : \"7%\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"subject\"\r\n                  className=\"form-control form-control-simple\"\r\n                  placeholder=\"Subject\"\r\n                  name=\"subject\"\r\n                  onChange={handleSubject}\r\n                  onKeyDown={handleFocus}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"nk-reply-form-field\"\r\n                style={{ padding: \"0px\", position: \"relative\" }}\r\n              >\r\n                <Editor\r\n                  isFileDragging={false}\r\n                  setBodyData={setBodyData}\r\n                  updateContainerValue={updateContainerValue}\r\n                  containerValue={containerValue}\r\n                />\r\n                {isFileDragging && (\r\n                  <DragAndDrop\r\n                    handleDrop={handleDrop}\r\n                    isFileDragging={isFileDragging}\r\n                    updateFileDragging={updateFileDragging}\r\n                  >\r\n                    <div style={{ height: \"300px\", width: \"500px\" }}></div>\r\n                  </DragAndDrop>\r\n                )}\r\n\r\n                <div\r\n                  className=\"col-md-12\"\r\n                  style={{\r\n                    maxHeight: \"100px\",\r\n                    overflowY: \"scroll\",\r\n                  }}\r\n                >\r\n                  <div ref={attachmentRef}>\r\n                    {attachment?.map((attachment, id) => {\r\n                      let extent = attachment.url.split(\"/\");\r\n                      let attactype = extent[extent.length - 1].split(\".\");\r\n                      return (\r\n                        <ul\r\n                          className=\"attach-list\"\r\n                          style={{ width: \"100%\" }}\r\n                          key={`attachmentList${id}`}\r\n                        >\r\n                          <li\r\n                            className=\"attach-item\"\r\n                            key={id}\r\n                            style={{ width: \"100%\" }}\r\n                          >\r\n                            <span>\r\n                              <em\r\n                                className=\"ni ni-download\"\r\n                                style={{ paddingRight: 4, fontSize: \"14px\" }}\r\n                                onClick={(e) =>\r\n                                  downlaodAttachment(e, attachment)\r\n                                }\r\n                              ></em>\r\n                              <div\r\n                                className=\"spinner-border\"\r\n                                role=\"status\"\r\n                                style={{\r\n                                  display: \"none\",\r\n                                  height: \"1.5rem\",\r\n                                  width: \"1.5rem\",\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                              </div>\r\n\r\n                              <span\r\n                                style={{ paddingLeft: 10, fontSize: \"13px\" }}\r\n                              >\r\n                                {attachment?.body_flag === 0\r\n                                  ? attachment?.name\r\n                                  : \"Original Document\"}\r\n                              </span>\r\n\r\n                              <em\r\n                                className=\"icon ni ni-cross-sm\"\r\n                                style={{\r\n                                  display: \"inline-block\",\r\n                                  float: \"right\",\r\n                                  fontSize: \"18px\",\r\n                                }}\r\n                                onClick={(e) =>\r\n                                  handleRemoveAttach(e, attachment.id)\r\n                                }\r\n                              ></em>\r\n                            </span>\r\n                          </li>\r\n                        </ul>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"nk-reply-form-tools\" style={{ padding: \"13px 20px\" }}>\r\n            <ul className=\"nk-reply-form-actions g-1\">\r\n              <li className=\"mr-2\">\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  type=\"submit\"\r\n                  onClick={sendMail}\r\n                  disabled={disableSendButton || isFileUploading}\r\n                >\r\n                  Send\r\n                </button>\r\n              </li>\r\n\r\n              <li>\r\n                {!isFileUploading && (\r\n                  <>\r\n                    <a\r\n                      className=\"btn btn-icon btn-sm\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Upload Attachment\"\r\n                      onClick={handleattach}\r\n                    >\r\n                      <em className=\"icon ni ni-clip-v\"></em>\r\n                    </a>\r\n                    <input\r\n                      type=\"file\"\r\n                      tabIndex=\"0\"\r\n                      id=\"file\"\r\n                      multiple\r\n                      ref={inputAttach}\r\n                      style={{ display: \"none\" }}\r\n                      onChange={onChangeAttachFile}\r\n                      disabled={isFileUploading}\r\n                    />\r\n                  </>\r\n                )}\r\n\r\n                {isFileUploading && (\r\n                  <div\r\n                    className=\"spinner-border\"\r\n                    role=\"status\"\r\n                    style={{\r\n                      display: \"inline-flex\",\r\n                      justifyContent: \"space-between\",\r\n                      height: \"1.5rem\",\r\n                      width: \"1.5rem\",\r\n                    }}\r\n                  >\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                )}\r\n              </li>\r\n            </ul>\r\n\r\n            <ul className=\"nk-reply-form-actions g-1\">\r\n              <li\r\n                onClick={() => {\r\n                  unlinkAttachedFiles();\r\n                  props.closeModel();\r\n                }}\r\n              >\r\n                <div className=\"btn-trigger btn btn-icon mr-n2\">\r\n                  <em className=\"icon ni ni-trash\"></em>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateSentCall,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isMostFrequent: state.isMostFrequent,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(ComposeMail);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailView.jsx",["381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434"],"import React, { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spinner, ProgressBar } from \"react-bootstrap\";\r\nimport Commentbox from \"../Commentbox\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport {\r\n  GET_MAIL_BY_ID,\r\n  UPDATE_MAIL_BY_ID,\r\n  COMMENT_ON_MAIL,\r\n  GET_PRE_DEFINED_COMMENTS,\r\n  FREQUENT_ADDRESSES,\r\n  GET_COMMENTS,\r\n  ANNOTATION_ADD,\r\n  GET_ATTACHMENT_DETAILS,\r\n  UNLINK_ATTACHMENT,\r\n  GET_MAIL_FOLDERS,\r\n  DOWNLOAD_ALL,\r\n} from \"../../config/constants\";\r\nimport Axios from \"axios\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { formatDateTime } from \"../../util/dateFormat/DateFormat\";\r\nimport MailBody from \"./MailBody\";\r\nimport Loading from \"../../util/loader/Loading\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport PrintView from \"../../components/print/printView\";\r\nimport Track from \"../../components/common/track\";\r\nimport { renderImage } from \"../../components/common/renderImage\";\r\nimport MailMarginComments from \"../mailview/MailMarginComments\";\r\nimport { PostHighlight } from \"../../components/common/annotation\";\r\nimport DocView from \"./DocView\";\r\nimport Topreplaybuttons from \"../Topreplaybuttons\";\r\nimport AddAttachment from \"./AddAttachment\";\r\nimport ComposeTo from \"../../components/common/compose_to\";\r\nimport { INGESTED_CONST_VALUES } from \"../../util\";\r\nimport {\r\n  updateSentCall,\r\n  updateUnreadCall,\r\n  updateArchiveCall,\r\n  updateAllCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateAddToFolderCache,\r\n  updateFolderCachedData,\r\n} from \"../../redux/action/InboxAction\";\r\nimport { LogApi } from \"../../util/apiLog/LogApi\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport ReactToPrint from \"react-to-print\";\r\nconst fileExtensionNames = [\r\n  \"png\",\r\n  \"jpeg\",\r\n  \"jpg\",\r\n  \"bmp\",\r\n  \"html\",\r\n  \"xml\",\r\n  \"mht\",\r\n  \"pdf\",\r\n  \"txt\",\r\n  \"ogg\",\r\n  \"gif\",\r\n  \"mp3\",\r\n];\r\n\r\nconst docExtension = [\"doc\", \"docx\", \"DOC\", \"DOCX\", \"rtf\", \"RTF\"];\r\n\r\nlet windowDoc;\r\nconst MailView = ({\r\n  setActiveModule,\r\n  mailIds,\r\n  uniqueMailId,\r\n  setUniqueMailId,\r\n  checkFlags,\r\n  total,\r\n  disablePreviousNext,\r\n  getPrevClick,\r\n  page,\r\n  noOfMails,\r\n  ...props\r\n}) => {\r\n  const commentBoxRef = useRef();\r\n  const topRef = useRef();\r\n  const folderNode = useRef();\r\n\r\n  const [open, setOpen] = useState(\"close\");\r\n  const [isTrack, setisTrack] = useState(false);\r\n  const [inputCommentData, setInputCommentData] = useState(\"\");\r\n  const [mailData, setMailData] = useState({});\r\n  const [preDefinedComments, setPreDefinedComments] = useState([]);\r\n  const [annotationText, setAnnotationText] = useState();\r\n  const [openPrintcall, setopenPrintcall] = useState(false);\r\n  const [generalCommentData, setGeneralCommentData] = useState([]);\r\n  const [openFolderList, setOpenFolderList] = useState(false);\r\n  const [recentCommentid, setRecentCommentid] = useState(\"\");\r\n  const [to, setTo] = useState([]);\r\n  const [commonAddresses, setCommonAddresses] = useState([]);\r\n  const [showAnnotationButtons, setshowAnnotationButtons] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedAnnotation, setselectedAnnotation] = useState([]);\r\n  const [marginNotesStatic, setmarginNotesStatic] = useState(\"\");\r\n  const [marginButtonStatic, setmarginButtonStatic] = useState(\"\");\r\n  const [usercolorcodeObj, setusercolorcodeObj] = useState({});\r\n  const [color, setColor] = useState(\"\");\r\n  const [colorID, setColorID] = useState(\"\");\r\n  const [beforeSelectedAnnotation, setBeforeSelectedAnnotation] = useState(\"\");\r\n  const [annotationDataForPrint, setAnnotationDataForPrint] = useState();\r\n  const [startChar, setStartChar] = useState(\"\");\r\n  const [endChar, setEndChar] = useState(\"\");\r\n  const [disableSendButton, setDisableSendButton] = useState(false);\r\n  const [loadingDetails, setLoadingDetails] = useState(false);\r\n  const [spinner, setSpinner] = useState({ bool: false, id: 0 });\r\n  const [toggleStar, setToggleStar] = useState(null);\r\n  const [replyDesignation, setReplyDesignation] = useState({});\r\n  const [fileUploading, setFileUploading] = useState(false);\r\n  const [actualFrequentAddress, setActualFrequentAddress] = useState([]);\r\n  const [designationId, setDesignationId] = useState(0);\r\n  const [attachmentName, setAttachmentName] = useState(\"\");\r\n  const [attachment, setattachment] = useState([]);\r\n\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [bodyData, setBodyData] = useState(\"\");\r\n  const [viewDocument, setViewDocument] = useState(false);\r\n  const [maildIdForComment, setMaildIdForComment] = useState(\"\");\r\n  const [folderData, setFolderData] = useState([]);\r\n  const [allCommonAddresses, setAllCommonAddresses] = useState([]);\r\n  const [blankTo, setBlankTo] = useState(false);\r\n  const [apiFolderId, setApiFolderId] = useState();\r\n  const [nextDisabled, setNextDisabled] = useState(false);\r\n  const [prevDisabled, setPrevDisabled] = useState(false);\r\n  const limit = parseInt(localStorage.getItem(\"limit\"));\r\n  const [callApi, setCallApi] = useState(false);\r\n\r\n  const [logAttachId, setLogAttacheId] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [folderClicked, setFolderClicked] = useState(false);\r\n  const [id, setId] = useState();\r\n  let attachId = [];\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const loadIframe = () => {\r\n    setTimeout(() => {\r\n      windowDoc =\r\n        document?.getElementById(\"iframeResult\")?.contentWindow?.window;\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setReplyDesignation(setReplyButton(generalCommentData));\r\n  }, [generalCommentData]);\r\n\r\n  useEffect(() => {\r\n    props.setBackButton(false);\r\n    props.setIsAction(false);\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleOpenFolderList);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleOpenFolderList);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const index = parseInt(localStorage.getItem(\"indexing\"));\r\n    const pageLimit = parseInt(localStorage.getItem(\"limit\"));\r\n    // const pageLimit = 20;\r\n    if (page === 1) {\r\n      props.setCountMail(index);\r\n      return;\r\n    }\r\n    if (index + 1 === pageLimit) {\r\n      props.setCountMail(page * (index + 1) - 1);\r\n      return;\r\n    } else {\r\n      props.setCountMail(limit * (page - 1) + index);\r\n      return;\r\n    }\r\n  }, []);\r\n\r\n  const handleOpenFolderList = (event, value) => {\r\n    if (\r\n      folderNode &&\r\n      folderNode.current &&\r\n      !folderNode.current.contains(event.target)\r\n    ) {\r\n      setOpenFolderList(false);\r\n    } else {\r\n      if (value === 1) {\r\n        if (openFolderList) setOpenFolderList(false);\r\n        else setOpenFolderList(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props?.mailId) {\r\n      getMail(props?.mailId);\r\n      getFrequentAddresses();\r\n    }\r\n  }, [props.mailId]);\r\n\r\n  useEffect(() => {\r\n    if (props.selectedUserMailId) getForlderByMailId(props.selectedUserMailId);\r\n  }, [props.selectedUserMailId]);\r\n\r\n  useEffect(() => {\r\n    if (maildIdForComment) getCommentData();\r\n  }, [maildIdForComment]);\r\n\r\n  useEffect(() => {\r\n    loadIframe();\r\n    getPreDefinedComments();\r\n\r\n    window.addEventListener(\"scroll\", handleScroll, true);\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n    setBeforeSelectedAnnotation(\"\");\r\n    if (open === \"delete\") {\r\n      setMailData({});\r\n      await getMail(props?.mailId);\r\n      loadIframe();\r\n    }\r\n  }, [open]);\r\n\r\n  // useEffect(() => {}, [props.clicked, props.currentMailData]);\r\n\r\n  useEffect(() => {\r\n    annotationData();\r\n  }, [annotationDataForPrint]);\r\n\r\n  useEffect(() => {\r\n    let designationId;\r\n    if (props && props.userData && props.userData.designations)\r\n      designationId = props?.userData?.designations.filter((item) => {\r\n        if (item.default_desig) return item;\r\n      })[0].id;\r\n\r\n    setDesignationId(designationId);\r\n  }, [props?.userData]);\r\n\r\n  const typeCheck = (type, params, inbox) => {\r\n    type === \"from\" ? (inbox.fromAction = params) : (inbox.mailAction = params);\r\n  };\r\n\r\n  const toggleStarred = async () => {\r\n    props.setIsAction(true);\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    let params = \"\";\r\n    let action = \"\";\r\n    let type = \"\";\r\n    if (designationId === mailData?.fromId) {\r\n      action = mailData?.fromAction;\r\n      type = \"from\";\r\n    } else {\r\n      action = mailData?.mailAction;\r\n      type = \"to\";\r\n    }\r\n\r\n    setToggleStar((toggleStar) => !toggleStar);\r\n    logDataFunction(toggleStar ? \"UNSTARRED\" : \"STARRED\", mailData.id, 0);\r\n    switch (action) {\r\n      case \"99\":\r\n        params = \"96\";\r\n\r\n        break;\r\n      case \"98\":\r\n        params = \"96\";\r\n        break;\r\n      case \"97\":\r\n        params = \"98\";\r\n        break;\r\n      case \"96\":\r\n        params = \"98\";\r\n        break;\r\n      case \"89\":\r\n        params = \"87\";\r\n        break;\r\n      case \"88\":\r\n        params = \"87\";\r\n        break;\r\n      case \"87\":\r\n        params = \"88\";\r\n        break;\r\n      case \"86\":\r\n        params = \"88\";\r\n        break;\r\n      case \"79\":\r\n        params = \"68\";\r\n        break;\r\n      case \"78\":\r\n        params = \"68\";\r\n\r\n        break;\r\n      case \"69\":\r\n        params = \"79\";\r\n        break;\r\n      case \"68\":\r\n        params = \"78\";\r\n\r\n        break;\r\n\r\n      case \"99\":\r\n        params = \"98\";\r\n\r\n        break;\r\n      case \"97\":\r\n        params = \"96\";\r\n\r\n        break;\r\n\r\n      case \"89\":\r\n        params = \"88\";\r\n\r\n        break;\r\n\r\n      case \"86\":\r\n        params = \"87\";\r\n\r\n        break;\r\n\r\n      case \"79\":\r\n        params = \"78\";\r\n\r\n        break;\r\n    }\r\n    typeCheck(type, params, mailData);\r\n\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n        props.updateUnreadCall(0);\r\n\r\n        break;\r\n      case \"Archive\":\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n        props.updateArchiveCall(0);\r\n        break;\r\n      case \"All\":\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n        props.updateUnreadCall(0);\r\n        props.updateArchiveCall(0);\r\n\r\n        break;\r\n      case \"Crashed\":\r\n        props.updateAllCall(0);\r\n        props.updateStarredCall(0);\r\n        props.updateUnreadCall(0);\r\n        props.updateCrashedCall(0);\r\n        break;\r\n      case \"Starred\":\r\n        props.updateAllCall(0);\r\n        props.updateCrashedCall(0);\r\n        props.updateStarredCall(0);\r\n        props.updateUnreadCall(0);\r\n        props.updateArchiveCall(0);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    await updateMail({ mail_action: params, action_type: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    annotationData();\r\n  }, [annotationDataForPrint]);\r\n\r\n  const annotationData = () => {\r\n    var obj = {};\r\n    annotationDataForPrint?.map((ann, i) => {\r\n      if (!obj.hasOwnProperty(ann?.anno_text)) {\r\n        obj[`${ann?.anno_text}`] = [ann];\r\n      } else {\r\n        let ann_array = obj[`${ann?.anno_text}`];\r\n        ann_array.push(ann);\r\n        obj[`${ann?.anno_text}`] = ann_array;\r\n      }\r\n    });\r\n    setAnnotationText(obj);\r\n  };\r\n\r\n  const handleScroll = function (event) {\r\n    if (document.getElementsByTagName(\"iframe\").length > 0) {\r\n      let iframeheight =\r\n        document.getElementsByTagName(\"iframe\")[0].offsetHeight;\r\n      if (event.target.classList.length > 1) {\r\n        if (\r\n          event.target.scrollTop > 320 &&\r\n          event.target.scrollTop < iframeheight + 320\r\n        ) {\r\n          setmarginNotesStatic(\"marginNotesStatic\");\r\n          setmarginButtonStatic(\"marginButtonStatic\");\r\n        } else {\r\n          setmarginNotesStatic(\"\");\r\n          setmarginButtonStatic(\"\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getMail = async (mailId) => {\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    logDataFunction(\"GET MAIL\", mailId, 0);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_MAIL_BY_ID}/${mailId}`,\r\n      \"\",\r\n\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp?.status === 1) {\r\n      let flags =\r\n        designationId === resp?.data?.From?.id\r\n          ? checkFlags(resp?.data?.from_action)\r\n          : checkFlags(resp?.data?.mail_action);\r\n      let data = {\r\n        id: resp?.data?.id,\r\n        userMailId: resp?.data?.user_mail_id,\r\n        mailAction: resp?.data?.mail_action,\r\n        fromAction: resp?.data?.from_action,\r\n        toId: resp?.data?.To?.id,\r\n        to: resp?.data?.To?.designation,\r\n        toBranch: resp?.data?.To?.branch,\r\n        from: resp?.data?.From?.designation,\r\n        fromId: resp?.data?.From?.id,\r\n        branch: resp?.data?.From?.branch,\r\n        sourceId: resp?.data?.Mail?.Source?.id,\r\n        sourceBranch: resp?.data?.Mail?.Source?.branch,\r\n        sourceDesignation: resp?.data?.Mail?.Source?.designation,\r\n        op: resp?.data?.Mail?.op,\r\n        subject: resp?.data?.Mail?.subject,\r\n        createdAt: formatDateTime(resp?.data?.Mail?.createdAt),\r\n        folders: resp?.data?.Folder,\r\n        body: resp?.bodyData?.body,\r\n        // isStarred: resp.data?.is_starred,\r\n        // isCrashed: resp.data?.is_crashed,\r\n        attachmentList: resp?.attachmentData,\r\n        documentId: resp?.data?.Mail?.document_id,\r\n        actualFormId: resp?.data?.From?.id,\r\n        ToFolder: resp?.data?.ToFolder,\r\n        FromFolder: resp?.data?.FromFolder,\r\n        // FirstName: resp?.data?.Mail.Source.designations?.first_name,\r\n      };\r\n\r\n      setLogAttacheId(data.attachmentList);\r\n\r\n      data = { ...data, ...flags };\r\n      data.isStarred ? setToggleStar(true) : setToggleStar(false);\r\n      setMaildIdForComment(data?.userMailId);\r\n      setMailData(data);\r\n\r\n      setNextDisabled(false);\r\n      setPrevDisabled(false);\r\n      renderImage(data.body).then((res) => {\r\n        data.body = res;\r\n        setMailData(data);\r\n        setopenPrintcall(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const getCommentData = async () => {\r\n    let _commentData = [];\r\n    logDataFunction(\"GET COMMENT ON MAIL\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_COMMENTS}/${maildIdForComment}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp?.status === 1) {\r\n      resp?.data?.map((comment) => {\r\n        const comments = {\r\n          id: comment?.id,\r\n          fromDesignationName: comment?.From?.designation,\r\n          fromBranchName: comment?.From?.branch,\r\n          toId: comment?.To?.id,\r\n          fromId: comment?.From?.id,\r\n          toDesignationName: comment?.To?.designation,\r\n          toBranchName: comment?.To?.branch,\r\n          commentData: comment?.comment,\r\n          updatedTime: comment?.updatedAt,\r\n          createdTime: comment?.createdAt,\r\n          attachmentList: comment?.Attachments,\r\n        };\r\n        _commentData.push(comments);\r\n      });\r\n\r\n      setGeneralCommentData(_commentData);\r\n    } else {\r\n      Toaster(\"error\", \"Some Error Occured while getting comments\");\r\n    }\r\n  };\r\n\r\n  const handleSelectFolder = async (folder) => {\r\n    setFolderClicked(true);\r\n    props?.setIsMailAddedToFolder(true);\r\n    setIsLoading(true);\r\n    if (props?.folderCachedData) {\r\n      if (props?.folderCachedData[`'${folder.apiFolderId}'`] !== undefined) {\r\n        props?.updateAddToFolderCache(\r\n          props?.folderCachedData[`'${folder.apiFolderId}'`]\r\n        );\r\n      }\r\n    }\r\n\r\n    setFolderData((prev) => [\r\n      ...prev,\r\n      {\r\n        id: folder.apiFolderId,\r\n        name: folder.apiFolderName,\r\n        text: folder.apiColorCode,\r\n      },\r\n    ]);\r\n\r\n    let str;\r\n    let folderIds = [];\r\n    folderData.forEach((element) => {\r\n      folderIds.push(element.id);\r\n    });\r\n    folderIds.push(folder.apiFolderId);\r\n    str = folderIds.join(\",\");\r\n    logDataFunction(\"SELECT FOLDER\", 0, 0);\r\n\r\n    await updateMail({ folder: str, action_type: 0 });\r\n\r\n    await getMail(props?.mailId);\r\n  };\r\n\r\n  const updateMail = async (payload) => {\r\n    setIsLoading(true);\r\n    props?.setLoader(true);\r\n    payload.userMailId = mailData.userMailId;\r\n    // await Api.ApiHandle(\r\n    //   `${UPDATE_MAIL_BY_ID}/${mailIds}`,\r\n    //   payload,\r\n    //   \"put\",\r\n    //   logData\r\n    // );\r\n    const resp = await Api.ApiHandle(\r\n      `/api/mails/updateById/${mailIds}`,\r\n      payload,\r\n      \"put\",\r\n      logData\r\n    );\r\n\r\n    if (resp && resp.status === 1) {\r\n      props?.setLoader(false);\r\n      setFolderData(resp.data);\r\n      setIsLoading(false);\r\n      setFolderClicked(false);\r\n    }\r\n    // if (resp?.status === 1) {\r\n    //   setIsLoading(true);\r\n    //   setFolderClicked(false);\r\n    //   setCallApi(true);\r\n    // }\r\n  };\r\n\r\n  const handleDeleteSelectedFolder = async (id) => {\r\n    setFolderClicked(false);\r\n    props?.setIsAction(true);\r\n    setId(id);\r\n    let str;\r\n    let folderIds = [];\r\n    folderData.forEach((element) => {\r\n      if (element.id !== id) {\r\n        folderIds.push(element.id);\r\n      }\r\n    });\r\n    folderIds.length > 0 ? (str = folderIds.join(\",\")) : (str = null);\r\n\r\n    logDataFunction(\"DELETE SELECTED FOLDER\", 0, 0);\r\n    await updateMail({ folder: str, action_type: 0 });\r\n    await getMail(props?.mailId);\r\n  };\r\n\r\n  const handleHistory = () => {\r\n    setisTrack(true);\r\n  };\r\n\r\n  const handleTrackCloseModal = () => {\r\n    setisTrack(false);\r\n  };\r\n\r\n  const handleTrackOpenModal = () => {\r\n    setisTrack(true);\r\n  };\r\n\r\n  const logprint = () => {\r\n    let attachment = [];\r\n\r\n    setopenPrintcall(true);\r\n    getMail(props?.mailId);\r\n\r\n    attachment = logAttachId.map((attachment) => {\r\n      return attachment.id;\r\n    });\r\n\r\n    logDataFunction(\"PRINT\", props?.mailId, attachment);\r\n    LogApi(logData);\r\n  };\r\n\r\n  const backButton = () => {\r\n    props.getAllMails(\"back\");\r\n    props.setBackButton(true);\r\n    setActiveModule(\"inbox\");\r\n  };\r\n\r\n  const handleInputCommentData = (e) => {\r\n    setInputCommentData(e.target.value);\r\n  };\r\n\r\n  const handleToData = (selected, unselected) => {\r\n    setTo(selected);\r\n\r\n    if (selected.length > 0) {\r\n      if (unselected.hasOwnProperty(\"removedValue\")) {\r\n        const deselectedFrequentAddress = actualFrequentAddress.filter(\r\n          (item) => {\r\n            if (item.id === unselected.removedValue.id) return item;\r\n          }\r\n        );\r\n\r\n        setCommonAddresses((prev) => [...prev, ...deselectedFrequentAddress]);\r\n      } else {\r\n        setCommonAddresses(\r\n          commonAddresses.filter(\r\n            (item) => item?.id !== selected[selected.length - 1].id\r\n          )\r\n        );\r\n      }\r\n    } else setCommonAddresses(actualFrequentAddress);\r\n  };\r\n\r\n  const handleSendComment = async () => {\r\n    let immediateReply = setReplyButton(generalCommentData);\r\n    if (to.length <= 0) {\r\n      Toaster(\"error\", \"To Recipient is required \");\r\n      setDisableSendButton(true);\r\n      setTimeout(() => {\r\n        setDisableSendButton(false);\r\n      }, 3000);\r\n    } else {\r\n      setDisableSendButton(true);\r\n\r\n      let attachmentIds = [];\r\n      to?.forEach(async (toID) => {\r\n        let payload = {\r\n          to: toID.id,\r\n          user_mail_id: props?.mailId,\r\n          from_action: mailData.fromAction,\r\n          mail_action: mailData.mailAction,\r\n          mail_id: mailData.userMailId,\r\n        };\r\n\r\n        if (toID?.id === immediateReply.id) {\r\n          payload.action = \"Reply\";\r\n        } else {\r\n          payload.action = \"Forward\";\r\n        }\r\n\r\n        inputCommentData !== \"\" && (payload.comment = inputCommentData);\r\n        if (attachment?.length > 0) {\r\n          attachment?.forEach((item) => {\r\n            attachmentIds.push(item?.id);\r\n          });\r\n\r\n          payload.attachmentIds = attachmentIds;\r\n          sendCommentApi(toID, payload);\r\n        } else {\r\n          sendCommentApi(toID, payload);\r\n        }\r\n      });\r\n      setTo([]);\r\n      setBlankTo(true);\r\n      setattachment([]);\r\n\r\n      if (\r\n        props?.currentMailData?.length > 1 &&\r\n        props.filterOptions?.mail_action === \"69\"\r\n      )\r\n        if (\r\n          props?.filterOptions?.is_sent !== 1 &&\r\n          !props?.filterOptions?.by_stations &&\r\n          !props?.filterOptions.search_data\r\n        ) {\r\n          openNextMail();\r\n        }\r\n    }\r\n  };\r\n\r\n  const sendCommentApi = async (toID, payload) => {\r\n    logDataFunction(\"COMMENT\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${COMMENT_ON_MAIL}`,\r\n      payload,\r\n      \"POST\",\r\n      logData\r\n    );\r\n\r\n    if (resp.status !== 1) {\r\n      Toaster(\"error\", \"Some error occurred\");\r\n      setDisableSendButton(false);\r\n    } else {\r\n      setInputCommentData(\"\");\r\n      Toaster(\r\n        \"success\",\r\n        `Message sent successfully to ${toID?.designation}(${toID?.branch}) `\r\n      );\r\n      setDisableSendButton(false);\r\n      setTo([]);\r\n      setBlankTo(false);\r\n      topRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n      props.updateSentCall(0);\r\n      setRecentCommentid(inputCommentData);\r\n      if (props.isActiveModule === \"Unread\") {\r\n        if (\r\n          props.countmail + 1 === noOfMails ||\r\n          props.countmail + 1 === page * limit\r\n        ) {\r\n          return;\r\n        }\r\n        return props.countmail + 1 < noOfMails\r\n          ? props.setCountMail((prev) => prev + 1)\r\n          : props.setCountMail(noOfMails);\r\n      }\r\n    }\r\n  };\r\n\r\n  const openNextMail = () => {\r\n    let index = 0;\r\n    props?.currentMailData?.every((mail, i) => {\r\n      if (mail.id === props.mailId) {\r\n        index = i + 1;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    if (index !== props?.currentMailData?.length) {\r\n      setUniqueMailId(props?.currentMailData[index]?.userMailId);\r\n      props?.getMailId(props?.currentMailData[index]);\r\n      localStorage.setItem(\"indexing\", index);\r\n    }\r\n  };\r\n  const openPrevMail = () => {\r\n    const indexing = parseInt(localStorage.getItem(\"indexing\"));\r\n    if (indexing === 0) {\r\n      setUniqueMailId(props?.currentMailData[limit - 1]?.userMailId);\r\n      props.getMailId(props?.currentMailData[limit - 1]);\r\n      localStorage.setItem(\"indexing\", 14);\r\n      return;\r\n    } else {\r\n      let newIndex = indexing - 1;\r\n      setUniqueMailId(props?.currentMailData[newIndex]?.userMailId);\r\n      props.getMailId(props?.currentMailData[newIndex]);\r\n      localStorage.setItem(\"indexing\", newIndex);\r\n    }\r\n  };\r\n\r\n  useMemo(() => {\r\n    if (props.countmail === (page - 1) * limit && props.clicked) {\r\n      props.setClicked(false);\r\n      openNextMail();\r\n      return;\r\n    }\r\n  }, [props.clicked]);\r\n\r\n  useMemo(() => {\r\n    if (props.countmail + 1 === page * limit && props.prevCacheClicked) {\r\n      props.setPrevCacheClicked(false);\r\n      openPrevMail();\r\n      return;\r\n    }\r\n  }, [props.prevCacheClicked]);\r\n\r\n  useMemo(() => {\r\n    if (props?.countmail - 1 === page * limit && props?.prevCacheClicked) {\r\n      openPrevMail();\r\n      props?.setPrevCacheClicked(false);\r\n      return;\r\n    }\r\n  }, [props.prevCacheClicked]);\r\n\r\n  const getPrevOnClick = async () => {\r\n    if (props?.countmail + 1 <= 1 || prevDisabled) {\r\n      return;\r\n    }\r\n    props?.setCountMail((prev) => prev - 1);\r\n\r\n    if (props?.countmail === (page - 1) * limit) {\r\n      props?.setPrevCacheClicked(true);\r\n      getPrevClick();\r\n      return;\r\n    } else {\r\n      openPrevMail();\r\n      return;\r\n    }\r\n  };\r\n  const getNextOnClick = async () => {\r\n    if (props.countmail + 1 === noOfMails || nextDisabled) {\r\n      return;\r\n    }\r\n    props?.setCountMail((prev) => prev + 1);\r\n    if (props?.countmail + 1 === page * limit) {\r\n      props?.setClicked(true);\r\n      await props?.getNextClick();\r\n      return;\r\n    } else {\r\n      openNextMail();\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handlePreDefinedComment = (com) => {\r\n    if (inputCommentData === \"\") {\r\n      setInputCommentData(`${com}`);\r\n    } else if (inputCommentData.charAt(inputCommentData.length - 1) === \"\\n\") {\r\n      setInputCommentData(`${inputCommentData}${com} `);\r\n    } else {\r\n      setInputCommentData(`${inputCommentData}, ${com} `);\r\n    }\r\n  };\r\n\r\n  const getPreDefinedComments = async () => {\r\n    logDataFunction(\"GET PRE-DEFINED COMMENT\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_PRE_DEFINED_COMMENTS}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const _preDefinedComments = [];\r\n      resp?.data?.map((com) => {\r\n        const comments = {\r\n          comments: com.content,\r\n        };\r\n        _preDefinedComments.push(comments);\r\n      });\r\n\r\n      setPreDefinedComments(_preDefinedComments);\r\n    }\r\n  };\r\n\r\n  const getFrequentAddresses = async () => {\r\n    const designation = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    });\r\n\r\n    logDataFunction(\"LIST OF FREQUENT ADDRESSES\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${FREQUENT_ADDRESSES}?type=${props?.isMostFrequent}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const _commonAddresses = [];\r\n      resp?.data?.map((com) => {\r\n        if (designation.designation !== com?.designation) {\r\n          const common = {\r\n            id: com?.id,\r\n            branch: com?.branch,\r\n            designation: com?.designation,\r\n            belongsTo: \"commonAddresses\",\r\n            // first_name: com?.first_name,\r\n          };\r\n          _commonAddresses.push(common);\r\n        }\r\n      });\r\n\r\n      setActualFrequentAddress(_commonAddresses);\r\n      setCommonAddresses(_commonAddresses);\r\n      setAllCommonAddresses(_commonAddresses);\r\n    }\r\n  };\r\n\r\n  const handleFrequentAddresses = (common, id) => {\r\n    setTo((prev) => [...prev, common]);\r\n    setCommonAddresses(commonAddresses.filter((item) => item?.id !== id));\r\n  };\r\n\r\n  const downlaodAttachment = (attachements) => {\r\n    setSpinner({ bool: true, id: attachements.id });\r\n    if (attachements?.url.includes(\"http://\" || \"https://\")) {\r\n      let url = \"\";\r\n      if (attachements.host == null) {\r\n        url = attachements.url;\r\n      } else {\r\n        url = attachements.host + attachements.url;\r\n      }\r\n\r\n      logDataFunction(\"DOWNLOAD ATTACHMENT\", props.mailId, [attachements.id]);\r\n      let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/download/${attachements.id}`;\r\n      let name = url.split(\"/\");\r\n      let headers = {};\r\n\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n      LogApi(logData);\r\n      Axios.get(apiurl, { responseType: \"blob\", headers: headers }, \"\")\r\n        .then(async (res) => {\r\n          fileDownload(res.data, name[name.length - 1]);\r\n          setSpinner(false);\r\n        })\r\n        .catch(function (error) {\r\n          Toaster(\"error\", error.message);\r\n          setSpinner(false);\r\n        });\r\n    } else {\r\n      logDataFunction(\"DOWNLOAD ATTACHMENT\", props.mailId, [attachements.id]);\r\n      let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/downloadfile/${attachements.id}`;\r\n      let headers = {};\r\n\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n\r\n      LogApi(logData);\r\n      Axios.get(apiurl, { responseType: \"blob\", headers: headers }, \"\")\r\n        .then(async (res) => {\r\n          fileDownload(res.data, attachements?.name);\r\n          setSpinner(false);\r\n        })\r\n        .catch(function (error) {\r\n          Toaster(\"error\", error.message);\r\n          setSpinner(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleDownloadAll = async (attachementId) => {\r\n    let attachId = [];\r\n    attachementId.forEach(async function (attachements, i) {\r\n      attachId = [...attachId, attachements.id.toString()];\r\n    });\r\n    logDataFunction(\"DOWNLOAD ALL ATTACHMENT\", props?.mailId, attachId);\r\n    LogApi(logData);\r\n    let id = attachId.toString();\r\n\r\n    const win = window.open(\r\n      `${process.env.REACT_APP_BASE_API_URL}/api/zipFile/downloadzip?attach_id=${id}&user_id=${props.userData.id}`,\r\n      \"_blank\"\r\n    );\r\n    win?.focus();\r\n    attachId = [];\r\n  };\r\n\r\n  const viewAttachment = (attachements) => {\r\n    if (attachements?.url.includes(\"http://\" || \"https://\")) {\r\n      logDataFunction(\"VIEW ATTACHMENT\", props.mailId, [attachements.id]);\r\n      LogApi(logData);\r\n      let headers = {};\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n\r\n      let url = \"\";\r\n      if (attachements.host === null) {\r\n        url = attachements.url;\r\n      } else {\r\n        url = attachements.host + attachements.url;\r\n      }\r\n\r\n      const win = window.open(`${url}`, \"_blank\");\r\n      win?.focus();\r\n    } else {\r\n      logDataFunction(\"VIEW ATTACHMENT\", props.mailId, [attachements.id]);\r\n\r\n      let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/viewfile/${attachements.id}`;\r\n      let headers = {};\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n      LogApi(logData);\r\n      Axios.get(apiurl, {\r\n        headers: headers,\r\n      }).then(async (resp) => {\r\n        const win = window.open(`${resp?.data?.data?.url}`, \"_blank\");\r\n        win?.focus();\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleHighlightButton = (backgr, color_id) => {\r\n    setColorID(color_id);\r\n    setColor(backgr);\r\n\r\n    if (windowDoc?.getSelection()?.toString() !== \"\") {\r\n      setshowAnnotationButtons(true);\r\n    } else {\r\n      setshowAnnotationButtons(false);\r\n    }\r\n\r\n    setOpen(\"close\");\r\n  };\r\n\r\n  const handleAnnotCommnet = () => {\r\n    if (windowDoc?.getSelection() === null) {\r\n      Toaster(\"error\", \"Select text again !!\");\r\n    }\r\n    if (windowDoc?.getSelection()?.toString() !== \"\") {\r\n      setBeforeSelectedAnnotation(windowDoc?.getSelection()?.toString());\r\n      setselectedAnnotation([]);\r\n      setshowAnnotationButtons(false);\r\n      setOpen(\"open\");\r\n    } else {\r\n      Toaster(\"error\", \"Please select some Text !!\");\r\n    }\r\n  };\r\n\r\n  const handleAnnotMark = async () => {\r\n    let selectedtext = PostHighlight(\"selector\", color, 1);\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n\r\n    if (selectedtext?.start != selectedtext?.end) {\r\n      if (selectedtext.start != selectedtext.end) {\r\n        selectedtext.color_id = colorID;\r\n        selectedtext.mail_id = props?.mailId;\r\n      }\r\n      const commentData = {\r\n        anno_text: selectedtext.text,\r\n        start_char: selectedtext.start,\r\n        end_char: selectedtext.end,\r\n        color_code_id: selectedtext.color_id,\r\n        mailid: selectedtext.mail_id,\r\n        mainMailId: uniqueMailId,\r\n      };\r\n\r\n      logDataFunction(\"COMMENT ON ANNOTATION MAIL\", 0, 0);\r\n\r\n      const resp = await Api.ApiHandle(\r\n        ANNOTATION_ADD,\r\n        commentData,\r\n        \"POST\",\r\n        logData\r\n      );\r\n      if (resp?.status === 1) {\r\n      }\r\n      setshowAnnotationButtons(false);\r\n    } else {\r\n      Toaster(\"error\", \"Please select some text !!\");\r\n    }\r\n  };\r\n\r\n  const onClickAnnotation = async (start, end) => {\r\n    setStartChar(start);\r\n    setEndChar(end);\r\n    let annotationData = [];\r\n\r\n    logDataFunction(\"CLICK ON ANNOTATION MAIL\", 0, 0);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION_ADD}?mailid=${uniqueMailId}&start=${start}&end=${end}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp.status === 1) {\r\n      annotationData.push(...resp.data);\r\n    }\r\n    setselectedAnnotation(annotationData);\r\n    setshowAnnotationButtons(false);\r\n    setOpen(\"open\");\r\n  };\r\n\r\n  const closeMarginNotes = () => {\r\n    setOpen(\"close\");\r\n    setselectedAnnotation([]);\r\n    setBeforeSelectedAnnotation(\"\");\r\n  };\r\n\r\n  const viewDocAttchment = async (attachement) => {\r\n    logDataFunction(\"VIEW ATTACHEMENT DETAIL\", 0, attachement.id);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_ATTACHMENT_DETAILS}?attId=${attachement.id}&document_id=${mailData.documentId}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp.status === 1) {\r\n      setAttachmentName(attachement?.name);\r\n      setBodyData(resp?.data?.attch_Text);\r\n      setViewDocument(!viewDocument);\r\n    }\r\n  };\r\n\r\n  const setReplyButton = (commentData) => {\r\n    let replyObject = {};\r\n    let commentDataReverse = commentData.slice().reverse();\r\n\r\n    for (let i = 0; i < commentDataReverse.length; i++) {\r\n      let item = commentDataReverse[i];\r\n      if (!(+item.fromId === +designationId)) {\r\n        replyObject = {\r\n          id: item?.fromId,\r\n          branch: item?.fromBranchName,\r\n          designation: item?.fromDesignationName,\r\n        };\r\n        break;\r\n      }\r\n    }\r\n    if (!(Object.keys(replyObject).length > 0)) {\r\n      replyObject = {\r\n        id: mailData?.sourceId,\r\n        branch: mailData?.sourceBranch,\r\n        designation: mailData?.sourceDesignation,\r\n      };\r\n      // return replyObject;\r\n    }\r\n    return replyObject;\r\n  };\r\n\r\n  const uniqueArray = (arr) =>\r\n    [...new Set(arr.map((o) => JSON.stringify(o)))].map((s) => JSON.parse(s));\r\n\r\n  const replyButton = () => {\r\n    let forReplyTo = setReplyButton(generalCommentData);\r\n    let arr = [...to, forReplyTo];\r\n    let arr1 = [];\r\n    arr1 = uniqueArray(arr);\r\n    setTo(arr1);\r\n    setCommonAddresses(\r\n      commonAddresses?.filter((item) => item?.id !== forReplyTo?.id)\r\n    );\r\n  };\r\n\r\n  const handleRemoveAttachment = async (attach) => {\r\n    setattachment(attachment?.filter((item) => item?.id !== attach?.id));\r\n\r\n    logDataFunction(\"UNLINK ATTACHMENT\", props.mailId, [attach.id]);\r\n\r\n    await Api.ApiHandle(`${UNLINK_ATTACHMENT}${attach?.id}`, \"\", \"\", logData);\r\n  };\r\n\r\n  const getForlderByMailId = async (id) => {\r\n    logDataFunction(\"GET MAIL FOLDER\", 0, 0);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_MAIL_FOLDERS}/${props?.mailId}`,\r\n      {},\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp && resp.status) {\r\n      setFolderData(resp.data);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const onClickReplyButton = (replyDesignation, designationId, action) => {\r\n    if (\r\n      !INGESTED_CONST_VALUES.includes(action) ||\r\n      (INGESTED_CONST_VALUES.includes(action) && generalCommentData.length > 0)\r\n    ) {\r\n      return (\r\n        Object.keys(replyDesignation).length > 0 &&\r\n        replyDesignation?.id !== +designationId && (\r\n          <div className=\"reply-button\">\r\n            <Topreplaybuttons onClick={replyButton} />\r\n          </div>\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(mailData).length < 1 && !loadingDetails ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"nk-ibx-view show-ibx\">\r\n          <div className=\"nk-ibx-head\" style={{ padding: \"11px 15px\" }}>\r\n            <div className=\"nk-ibx-head-actions\">\r\n              <ul className=\"nk-ibx-head-tools g-1 flexing\">\r\n                <li className=\"ml-n2\" style={{ marginRight: \"14%\" }}>\r\n                  <abbr title=\"Go back\">\r\n                    <span\r\n                      onClick={backButton}\r\n                      className=\"btn btn-icon btn-trigger nk-ibx-hide\"\r\n                    >\r\n                      <em className=\"icon ni ni-arrow-left\"></em>\r\n                    </span>\r\n                  </abbr>\r\n                </li>\r\n\r\n                <li\r\n                  className=\"mr-n1\"\r\n                  style={{ marginTop: 1, cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    handleHistory();\r\n                  }}\r\n                >\r\n                  <abbr title=\"Track\">\r\n                    <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                      <em className=\"icon ni ni-navigate-fill\"></em>\r\n                    </div>\r\n                  </abbr>\r\n                </li>\r\n                <li\r\n                  className=\"mr-n1 ml-2\"\r\n                  style={{ marginTop: 1, cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    logprint();\r\n                  }}\r\n                >\r\n                  <abbr title=\"Print\">\r\n                    <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                      <em className=\"icon ni ni-printer-fill\"></em>\r\n                    </div>\r\n                  </abbr>\r\n                </li>\r\n                {props?.filterOptions?.is_sent !== 1 && (\r\n                  <li\r\n                    className=\"mr-n1 ml-1\"\r\n                    onClick={(e) => handleOpenFolderList(e, 1)}\r\n                    ref={folderNode}\r\n                  >\r\n                    <div className=\"my-dropdown-folder\">\r\n                      <abbr title=\"Folder\">\r\n                        <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                          <em className=\"icon ni ni-folder-fill\"></em>\r\n                        </div>\r\n                      </abbr>\r\n\r\n                      <div className=\"dropdown-content dropdown-folder-mail\">\r\n                        <ul className=\"nk-ibx-label\">\r\n                          {openFolderList &&\r\n                            props.folderList.map((folder, id) => {\r\n                              return (\r\n                                <li\r\n                                  key={id}\r\n                                  onClick={() => {\r\n                                    handleSelectFolder(folder);\r\n                                  }}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                >\r\n                                  <div>\r\n                                    <em\r\n                                      className=\"icon ni ni-folder-fill font-22\"\r\n                                      style={{ color: folder?.apiColorCode }}\r\n                                    ></em>\r\n                                    <span className=\"nk-ibx-label-text\">\r\n                                      {folder?.apiFolderName}\r\n                                    </span>\r\n                                  </div>\r\n                                </li>\r\n                              );\r\n                            })}\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                )}\r\n\r\n                {props.filterOptions.is_sent !== 1 &&\r\n                  designationId !== mailData?.sourceId && (\r\n                    <li className=\"mr-n1 ml-1\" style={{ marginBottom: \"5%\" }}>\r\n                      <abbr title=\"Star this message\">\r\n                        <div className=\"asterisk\" onClick={toggleStarred}>\r\n                          <a>\r\n                            <em\r\n                              className={`asterisk-${\r\n                                toggleStar ? \"on\" : \"off\"\r\n                              } icon ni ni-star${toggleStar ? \"-fill\" : \"\"}`}\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                bottom: -12,\r\n                                cursor: \"pointer\",\r\n                                marginLeft: 4,\r\n                              }}\r\n                            ></em>\r\n                          </a>\r\n                        </div>\r\n                      </abbr>\r\n                    </li>\r\n                  )}\r\n                {mailData.attachmentList?.length > 0 && (\r\n                  <li\r\n                    className=\"mr-n1 ml-5\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      handleDownloadAll(mailData.attachmentList);\r\n                    }}\r\n                  >\r\n                    <abbr title=\"Download All\">\r\n                      <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                        <em className=\"icon ni ni-download\"></em>\r\n                      </div>\r\n                    </abbr>\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n            <div className=\"nk-ibx-head-actions\">\r\n              <ul className=\"nk-ibx-head-tools g-1\"></ul>\r\n            </div>\r\n            <li\r\n              className=\"d-none d-sm-block\"\r\n              style={{ marginLeft: \"54.25rem\" }}\r\n            >\r\n              <div className={\"btn btn-icon btn-trigger btn-tooltip \"}>\r\n                <em\r\n                  className=\"icon ni ni-chevron-left\"\r\n                  style={{\r\n                    opacity: props.countmail + 1 <= 1 || prevDisabled ? 0.4 : 1,\r\n                  }}\r\n                  onClick={() => {\r\n                    setPrevDisabled(true);\r\n                    getPrevOnClick();\r\n                  }}\r\n                ></em>\r\n              </div>\r\n            </li>\r\n\r\n            <p style={{ marginBottom: \"0px\" }}>\r\n              {props.countmail + 1}/{noOfMails}\r\n            </p>\r\n\r\n            <li className=\"d-none d-sm-block\">\r\n              <div\r\n                className={`btn btn-icon btn-trigger btn-tooltip \r\n                \r\n                  `}\r\n              >\r\n                <em\r\n                  className=\"icon ni ni-chevron-right\"\r\n                  style={{\r\n                    opacity:\r\n                      props.countmail + 1 === noOfMails || nextDisabled\r\n                        ? 0.4\r\n                        : 1,\r\n                  }}\r\n                  onClick={() => {\r\n                    setNextDisabled(true);\r\n                    getNextOnClick();\r\n                  }}\r\n                ></em>\r\n              </div>\r\n            </li>\r\n          </div>\r\n\r\n          <div\r\n            className=\"printElement\"\r\n            id=\"printElement\"\r\n            style={{ overflow: \"auto\", height: \"0px\" }}\r\n          >\r\n            {openPrintcall && (\r\n              <PrintView\r\n                call=\"2-col-print\"\r\n                subject={mailData?.subject}\r\n                op={mailData?.op}\r\n                to={props?.selectedMailTo}\r\n                toBranch={mailData?.toBranch}\r\n                sourceDesignation={mailData?.sourceDesignation}\r\n                sourceBranch={mailData?.sourceBranch}\r\n                time={mailData?.createdAt}\r\n                body={mailData?.body}\r\n                mailId={props?.mailId}\r\n                generalCommentData={generalCommentData}\r\n                crashed={mailData?.isCrashed}\r\n                updateComment={recentCommentid}\r\n                attachmentList={mailData?.attachmentList}\r\n                annotationText={annotationText}\r\n              />\r\n            )}\r\n          </div>\r\n\r\n          <div\r\n            id=\"content\"\r\n            className=\"nk-ibx-reply nk-reply jumbotron-overflow\"\r\n          >\r\n            <div className=\"nk-ibx-reply-head\" ref={topRef}>\r\n              <div className=\"no-select\">\r\n                <div className=\"subject-section\">\r\n                  <h4 className=\"title\">{mailData?.subject}</h4>\r\n                </div>\r\n                <div className=\"text-ul\">\r\n                  <ul className=\"list-inline\">\r\n                    {mailData?.op !== null && mailData?.op !== \"\" ? (\r\n                      <li>OP/NDP/WAN NO. : {mailData?.op}</li>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <li>Date: {mailData?.createdAt}</li>\r\n                    {mailData?.isCrashed && (\r\n                      <li style={{ color: \"red\" }}>(Crash Message)</li>\r\n                    )}\r\n                  </ul>\r\n                  <ul className=\"list-inline\" style={{ marginTop: \"-5px\" }}>\r\n                    <li>\r\n                      {/* {mailData.branch === mailData.sourceBranch &&\r\n                      mailData.from === mailData.sourceDesignation\r\n                        ? \"Source: \"\r\n                        :  */}\r\n                      From:{\" \"}\r\n                      {mailData?.sourceDesignation !== null &&\r\n                      mailData?.sourceBranch !== null\r\n                        ? `${mailData?.sourceDesignation}(${mailData?.sourceBranch})`\r\n                        : mailData?.sourceDesignation !== null &&\r\n                          mailData?.sourceBranch === null\r\n                        ? `${mailData?.sourceDesignation}`\r\n                        : mailData?.sourceDesignation === null &&\r\n                          mailData?.sourceBranch !== null\r\n                        ? `${mailData?.sourceBranch}`\r\n                        : mailData?.sourceDesignation === null &&\r\n                          mailData?.sourceBranch === null\r\n                        ? `-`\r\n                        : `-`}\r\n                    </li>\r\n                    {props?.filterOptions?.is_sent === 1 && (\r\n                      <li>\r\n                        To:{\" \"}\r\n                        {props.selectedMailTo.map((item, i) =>\r\n                          props.selectedMailTo.length !== i + 1\r\n                            ? `${item?.designation}(${item?.branch}), `\r\n                            : `${item?.designation}(${item?.branch})`\r\n                        )}\r\n                      </li>\r\n                    )}\r\n                  </ul>\r\n                  {/* {mailData?.FirstName !== null &&\r\n                  mailData?.FirstName !== undefined ? (\r\n                    <ul className=\"list-inline\" style={{ marginTop: \"-12px\" }}>\r\n                      <li>\r\n                        <i style={{ fontSize: \"10px\" }}>\r\n                          Source: {mailData?.FirstName}{\" \"}\r\n                        </i>\r\n                      </li>\r\n                    </ul>\r\n                  ) : null} */}\r\n                </div>\r\n                <ul className=\"nk-ibx-tags g-1\">\r\n                  {folderClicked ? (\r\n                    <li>\r\n                      <Loader\r\n                        type=\"ThreeDots\"\r\n                        color=\"#6576ff\"\r\n                        height={30}\r\n                        width={30}\r\n                      />\r\n                    </li>\r\n                  ) : (\r\n                    folderData?.length > 0 &&\r\n                    folderData?.map((data, i) => {\r\n                      return isLoading && id === data.id && !folderClicked ? (\r\n                        <li\r\n                          key={i}\r\n                          className=\"mr-2\"\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                          }}\r\n                        >\r\n                          <Loader\r\n                            type=\"ThreeDots\"\r\n                            color=\"#6576ff\"\r\n                            height={30}\r\n                            width={30}\r\n                          />\r\n                        </li>\r\n                      ) : (\r\n                        <li\r\n                          key={i}\r\n                          className=\"btn-group is-tags folder-tags mr-2\"\r\n                          style={{\r\n                            background: `${data?.text}`,\r\n                          }}\r\n                        >\r\n                          <div\r\n                            className=\"btn btn-xs btn btn-dim\"\r\n                            style={{ fontSize: 15 }}\r\n                          >\r\n                            {data?.name}\r\n                          </div>\r\n                          <div\r\n                            className=\"btn btn-xs btn-icon btn btn-dim\"\r\n                            style={{ borderLeft: \"1px solid white\" }}\r\n                          >\r\n                            <em\r\n                              className=\"icon ni ni-cross\"\r\n                              onClick={() => {\r\n                                handleDeleteSelectedFolder(data.id);\r\n                              }}\r\n                            ></em>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })\r\n                  )}\r\n                </ul>\r\n              </div>\r\n\r\n              <ul className=\"d-flex g-1\" style={{ paddingRight: 21 }}>\r\n                {/* <li\r\n                    className=\"mr-n1\"\r\n                    style={{ marginTop: 1, cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      handleHistory();\r\n                    }}\r\n                  >\r\n                    <abbr title=\"Track\">\r\n                      <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                        <em className=\"icon ni ni-navigate-fill\"></em>\r\n                      </div>\r\n                    </abbr>\r\n                  </li>\r\n\r\n                  <li\r\n                    className=\"mr-n1 ml-2\"\r\n                    style={{ marginTop: 1, cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      logprint();\r\n                    }}\r\n                  >\r\n                    <abbr title=\"Print\">\r\n                      <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                        <em className=\"icon ni ni-printer-fill\"></em>\r\n                      </div>\r\n                    </abbr>\r\n                  </li>\r\n                  {props?.filterOptions?.is_sent !== 1 && (\r\n                    <li\r\n                      className=\"mr-n1 ml-1\"\r\n                      onClick={(e) => handleOpenFolderList(e, 1)}\r\n                      ref={folderNode}\r\n                    >\r\n                      <div className=\"my-dropdown-folder\">\r\n                        <abbr title=\"Folder\">\r\n                          <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                            <em className=\"icon ni ni-folder-fill\"></em>\r\n                          </div>\r\n                        </abbr>\r\n\r\n                        <div className=\"dropdown-content dropdown-folder-mail\">\r\n                          <ul className=\"nk-ibx-label\">\r\n                            {openFolderList &&\r\n                              props.folderList.map((folder, id) => {\r\n                                return (\r\n                                  <li\r\n                                    key={id}\r\n                                    onClick={() => {\r\n                                      handleSelectFolder(folder?.apiFolderId);\r\n                                    }}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                  >\r\n                                    <div>\r\n                                      <em\r\n                                        className=\"icon ni ni-folder-fill font-22\"\r\n                                        style={{ color: folder?.apiColorCode }}\r\n                                      ></em>\r\n                                      <span className=\"nk-ibx-label-text\">\r\n                                        {folder?.apiFolderName}\r\n                                      </span>\r\n                                    </div>\r\n                                  </li>\r\n                                );\r\n                              })}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  )}\r\n\r\n                  {props.filterOptions.is_sent !== 1 &&\r\n                    designationId !== mailData?.fromId && (\r\n                      <li className=\"mr-n1 ml-1\">\r\n                        <abbr title=\"Star this message\">\r\n                          <div className=\"asterisk\" onClick={toggleStarred}>\r\n                            <a>\r\n                              <em\r\n                                className={`asterisk-${\r\n                                  toggleStar ? \"on\" : \"off\"\r\n                                } icon ni ni-star${toggleStar ? \"-fill\" : \"\"}`}\r\n                                style={{\r\n                                  position: \"absolute\",\r\n                                  bottom: -12,\r\n                                  cursor: \"pointer\",\r\n                                  marginLeft: 4,\r\n                                }}\r\n                              ></em>\r\n                            </a>\r\n                          </div>\r\n                        </abbr>\r\n                      </li>\r\n                    )} */}\r\n              </ul>\r\n            </div>\r\n\r\n            <hr />\r\n            <div className=\"comment-box\">\r\n              <div className=\"nk-ibx-reply-head\">\r\n                <Commentbox\r\n                  generalCommentData={generalCommentData}\r\n                  inputCommentData={inputCommentData}\r\n                  mailId={props.mailId}\r\n                  updateComment={recentCommentid}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"nk-ibx-reply-group\">\r\n              <div className=\"nk-ibx-reply-item nk-reply-item\">\r\n                <div\r\n                  className={`nk-reply-body nk-ibx-reply-body ${\r\n                    open.ab ? \"is-shown\" : \"\"\r\n                  }`}\r\n                >\r\n                  <div className=\"row\">\r\n                    {mailData.body && (\r\n                      <MailBody\r\n                        body={mailData?.body}\r\n                        call=\"2-col\"\r\n                        mail_id={props?.mailId}\r\n                        onClickAnnotation={onClickAnnotation}\r\n                        setusercolorcodeObj={setusercolorcodeObj}\r\n                        setLoadingDetails={setLoadingDetails}\r\n                        handleHighlightButton={handleHighlightButton}\r\n                        mailIds={mailIds}\r\n                        inboxMailData={uniqueMailId}\r\n                        // scrollToTopnextMail={scrollToTopnextMail}\r\n                        closeMarginNotes={closeMarginNotes}\r\n                        setAnnotationDataForPrint={setAnnotationDataForPrint}\r\n                      />\r\n                    )}\r\n                    {showAnnotationButtons && (\r\n                      <div\r\n                        id=\"annotation_button\"\r\n                        className={`right-icon ${marginButtonStatic}`}\r\n                      >\r\n                        <ul className=\"float-right ml-5\">\r\n                          <li\r\n                            className=\"border-br-radius-0\"\r\n                            onClick={handleAnnotMark}\r\n                          >\r\n                            <abbr title=\"Highlight\">\r\n                              <a className=\"btn btn-icon\">\r\n                                <span\r\n                                  className=\"d-flex align-items-center\"\r\n                                  style={{ paddingTop: \"20%\" }}\r\n                                >\r\n                                  <em className=\"icon ni ni-chat\"></em>\r\n                                </span>\r\n                              </a>\r\n                            </abbr>\r\n                          </li>\r\n                          <li\r\n                            className=\"border-tr-radius-0\"\r\n                            onClick={handleAnnotCommnet}\r\n                          >\r\n                            <abbr title=\"Annotate\">\r\n                              <a className=\"btn btn-icon\">\r\n                                <span\r\n                                  className=\"d-flex align-items-center\"\r\n                                  style={{ paddingTop: \"20%\" }}\r\n                                >\r\n                                  <em className=\"icon ni ni-edit\"></em>\r\n                                </span>\r\n                              </a>\r\n                            </abbr>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className={`col-md-4 ${marginNotesStatic}`}>\r\n                      {open === \"open\" && (\r\n                        <MailMarginComments\r\n                          color={color}\r\n                          mailId={props?.mailId}\r\n                          colorID={colorID}\r\n                          beforeSelectedAnnotation={beforeSelectedAnnotation}\r\n                          usercolorcodeObj={usercolorcodeObj}\r\n                          selectedAnnotation={selectedAnnotation}\r\n                          closeMarginNotes={closeMarginNotes}\r\n                          onClickAnnotation={onClickAnnotation}\r\n                          setOpen={setOpen}\r\n                          startChar={startChar}\r\n                          endChar={endChar}\r\n                          filterOptions={props?.filterOptions}\r\n                          type=\"2\"\r\n                          uniqueMailId={uniqueMailId}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <DocView\r\n                    bodyData={bodyData}\r\n                    setViewDocument={setViewDocument}\r\n                    viewDocument={viewDocument}\r\n                    attachmentName={attachmentName}\r\n                  />\r\n                  {mailData.attachmentList?.length > 0 && (\r\n                    <div className=\"col-md-8\">\r\n                      <div className=\"attach-files\">\r\n                        <ul className=\"attach-list\">\r\n                          {mailData.attachmentList?.map((attachment, id) => {\r\n                            let attactype = attachment.name.split(\".\");\r\n                            return (\r\n                              <li\r\n                                className=\"attach-item\"\r\n                                key={`attachmentList${id}`}\r\n                                style={{\r\n                                  overflow: \"hidden\",\r\n                                  whiteSpace: \"nowrap\",\r\n                                  textOverflow: \"ellipsis\",\r\n                                }}\r\n                              >\r\n                                <span>\r\n                                  {spinner.bool &&\r\n                                  attachment.id === spinner.id ? (\r\n                                    <Spinner animation=\"border\" size=\"sm\" />\r\n                                  ) : (\r\n                                    <em\r\n                                      className=\"ni ni-download\"\r\n                                      style={{ paddingRight: 4 }}\r\n                                      onClick={() =>\r\n                                        downlaodAttachment(attachment)\r\n                                      }\r\n                                    />\r\n                                  )}\r\n                                  <abbr\r\n                                    title={\r\n                                      attachment?.body_flag === 0 &&\r\n                                      `${attachment?.name}`\r\n                                    }\r\n                                  >\r\n                                    <span\r\n                                      style={{\r\n                                        paddingLeft: 10,\r\n                                        cursor: \"pointer\",\r\n                                      }}\r\n                                      onClick={() =>\r\n                                        downlaodAttachment(attachment)\r\n                                      }\r\n                                    >\r\n                                      {attachment?.body_flag === 0\r\n                                        ? attachment?.name\r\n                                        : \"Original Document\"}\r\n                                    </span>\r\n                                  </abbr>\r\n                                </span>\r\n                                <br></br>\r\n                                <span>\r\n                                  {attactype[1] &&\r\n                                  fileExtensionNames.includes(\r\n                                    attactype[\r\n                                      attactype.length - 1\r\n                                    ].toLowerCase()\r\n                                  )\r\n                                    ? attachment?.body_flag === 0 && (\r\n                                        <span\r\n                                          onClick={() =>\r\n                                            viewAttachment(attachment)\r\n                                          }\r\n                                          style={{\r\n                                            color: \"blue\",\r\n                                            cursor: \"pointer\",\r\n                                          }}\r\n                                        >\r\n                                          View\r\n                                        </span>\r\n                                      )\r\n                                    : \"\"}\r\n\r\n                                  {attactype[1] &&\r\n                                  docExtension.includes(\r\n                                    attactype[\r\n                                      attactype.length - 1\r\n                                    ].toLowerCase()\r\n                                  )\r\n                                    ? attachment?.body_flag === 0 && (\r\n                                        <span\r\n                                          onClick={() =>\r\n                                            viewDocAttchment(attachment)\r\n                                          }\r\n                                          style={{\r\n                                            color: \"blue\",\r\n                                            cursor: \"pointer\",\r\n                                          }}\r\n                                        >\r\n                                          View\r\n                                        </span>\r\n                                      )\r\n                                    : \"\"}\r\n\r\n                                  {attactype[1] &&\r\n                                  (attactype[1] == \"png\" ||\r\n                                    attactype[1] == \"jpeg\" ||\r\n                                    attactype[1] == \"jpg\" ||\r\n                                    attactype[1] == \"pdf\") ? (\r\n                                    <span style={{ paddingLeft: 10 }}>\r\n                                      {attachment?.size}\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span style={{ paddingLeft: 7 }}>\r\n                                      {attachment?.size}\r\n                                    </span>\r\n                                  )}\r\n                                </span>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {props?.userData?.designations?.[0]?.id === mailData?.fromId\r\n              ? onClickReplyButton(\r\n                  replyDesignation,\r\n                  designationId,\r\n                  mailData.fromAction\r\n                )\r\n              : onClickReplyButton(\r\n                  replyDesignation,\r\n                  designationId,\r\n                  mailData.mailAction\r\n                )}\r\n\r\n            {/* Comment Box in mailview */}\r\n            <div ref={commentBoxRef} className=\"col-md-8\">\r\n              <div className=\"nk-ibx-reply-form nk-reply-form\">\r\n                <ComposeTo\r\n                  options={options}\r\n                  to={to}\r\n                  setTo={setTo}\r\n                  placeholder=\"Enter the use Designation-Branch or Select from below...\"\r\n                  setCommonAddresses={setCommonAddresses}\r\n                  mailId={props?.mailId}\r\n                  isClearable={true}\r\n                  commonAddresses={commonAddresses}\r\n                  allCommonAddresses={allCommonAddresses}\r\n                  handleFrequentAddresses={handleFrequentAddresses}\r\n                  blankTo={blankTo}\r\n                />\r\n                <div className=\"no-select\">\r\n                  <div className=\"nk-reply-form-editor\">\r\n                    <div className=\"nk-reply-form-field\">\r\n                      <textarea\r\n                        className=\"form-control form-control-simple no-resize\"\r\n                        placeholder=\"Enter Comments...\"\r\n                        autoFocus\r\n                        value={inputCommentData}\r\n                        onChange={handleInputCommentData}\r\n                      ></textarea>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"nk-reply-form-tools\">\r\n                    <ul\r\n                      className=\"nk-reply-form-actions g-1\"\r\n                      style={{ flexWrap: \"wrap\" }}\r\n                    >\r\n                      {preDefinedComments?.map((com, i) => {\r\n                        return (\r\n                          <li\r\n                            key={`preDefinedComments${i}`}\r\n                            className=\"mr-2\"\r\n                            onClick={() =>\r\n                              handlePreDefinedComment(com.comments)\r\n                            }\r\n                          >\r\n                            <div className=\"myButton\">{com.comments}</div>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                  {attachment?.length > 0 &&\r\n                    attachment?.map((attach, i) => {\r\n                      return (\r\n                        <div\r\n                          className=\"attachment-list-mailview-main\"\r\n                          key={`attachmentList${i}`}\r\n                        >\r\n                          <div className=\"attachment-list-mailview\">\r\n                            <div className=\"attachment-list-name\">\r\n                              {attach?.name}\r\n                            </div>\r\n                            <div className=\"attachment-list-size\">\r\n                              ({attach?.size})\r\n                            </div>\r\n                          </div>\r\n                          <div\r\n                            onClick={() => {\r\n                              handleRemoveAttachment(attach);\r\n                            }}\r\n                          >\r\n                            <abbr title=\"Remove Attachment\">\r\n                              <em className=\"icon ni ni-cross-sm\"></em>\r\n                            </abbr>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  {/* {fileUploading && (\r\n                    <div>\r\n                      <ProgressBar animated now={60} />\r\n                    </div>\r\n                  )} */}\r\n                  <div className=\"nk-reply-form-tools\">\r\n                    <ul className=\"nk-reply-form-actions g-1\">\r\n                      <li className=\"mr-2\">\r\n                        <button\r\n                          className=\"btn btn-primary\"\r\n                          type=\"submit\"\r\n                          onClick={() => {\r\n                            handleSendComment();\r\n                          }}\r\n                          disabled={disableSendButton || fileUploading}\r\n                        >\r\n                          Send\r\n                        </button>\r\n                      </li>\r\n                      <li className=\"mr-2\">\r\n                        {!fileUploading && (\r\n                          <AddAttachment\r\n                            mailId={props?.mailId}\r\n                            setFileUploading={setFileUploading}\r\n                            setattachment={setattachment}\r\n                            attachment={attachment}\r\n                            isFileUploading={fileUploading}\r\n                          />\r\n                        )}\r\n                        {fileUploading && (\r\n                          <div\r\n                            className=\"spinner-border\"\r\n                            role=\"status\"\r\n                            style={{\r\n                              display: \"inline-flex\",\r\n                              justifyContent: \"space-between\",\r\n                              height: \"1.5rem\",\r\n                              width: \"1.5rem\",\r\n                            }}\r\n                          >\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                          </div>\r\n                        )}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {isTrack && (\r\n            <div>\r\n              <Track\r\n                closeModal={handleTrackCloseModal}\r\n                openModal={handleTrackOpenModal}\r\n                visible={isTrack}\r\n                mail_id={mailData.userMailId}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  folderList: state.folderList,\r\n  userData: state.userData,\r\n  isActiveModule: state.isActiveModule,\r\n  isMostFrequent: state.isMostFrequent,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  updateSentCall,\r\n  updateUnreadCall,\r\n  updateArchiveCall,\r\n  updateAllCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateAddToFolderCache,\r\n  updateFolderCachedData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(MailView);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Sidebar.jsx",["435","436","437","438","439","440","441","442","443","444","445","446"],"import { useEffect, useState } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Button,\r\n  OverlayTrigger,\r\n  renderTooltip,\r\n  Tooltip,\r\n} from 'react-bootstrap';\r\nimport {\r\n  updateFolderList,\r\n  updateIsActiveModule3Column,\r\n  updateSortFilter,\r\n} from '../../redux/action/InboxAction';\r\nimport {\r\n  CREATE_FOLDER,\r\n  EDIT_FOLDER,\r\n  GET_ALL_MAIL,\r\n  GET_FOLDER,\r\n  REMOVE_FOLDER,\r\n} from '../../config/constants';\r\n// import Inbox from \"./Inbox\";\r\nimport * as Api from '../../util/api/ApicallModule';\r\nimport Toaster from '../../util/toaster/Toaster';\r\n\r\nconst Sidebar = (props) => {\r\n  const sidebarOptions = [\r\n    {\r\n      id: 'unread',\r\n      sidabarName: 'Unread Mails',\r\n      icon: 'inbox-fill',\r\n      count: props.unreadCount,\r\n    },\r\n    {\r\n      id: 'archive',\r\n      sidabarName: 'Archive Mails',\r\n      icon: 'emails-fill',\r\n    },\r\n    {\r\n      id: 'sent',\r\n      sidabarName: 'Sent Mails',\r\n      icon: 'send',\r\n    },\r\n    {\r\n      id: 'crashed',\r\n      sidabarName: 'Crash Mails',\r\n      icon: 'briefcase',\r\n    },\r\n    {\r\n      id: 'starred',\r\n      sidabarName: 'Starred Mails',\r\n      icon: 'star-fill',\r\n    },\r\n  ];\r\n\r\n  const defaultFolderList = [\r\n    {\r\n      id: '',\r\n      folderName: '',\r\n      folderColor: '',\r\n    },\r\n  ];\r\n\r\n  const [folder, setFolder] = useState(defaultFolderList);\r\n  const [visiable, setVisiable] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState('unread');\r\n  const [addFolder, setAddFolder] = useState(false);\r\n  const [folderName, setFolderName] = useState('');\r\n  const [folderId, setFolderId] = useState(null);\r\n  const [folderColor, setFolderColor] = useState(null);\r\n  const [folderOptions, setFolderOptions] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  // console.log(props, 'props');\r\n  useEffect(async () => {\r\n    if (props?.userData?.designations) getAllFolders();\r\n  }, [props?.userData?.designations]);\r\n\r\n  useEffect(() => {\r\n    const finalFolderData = [...folder];\r\n    props.updateFolderList(Array.from(new Set(finalFolderData)));\r\n  }, [folder]);\r\n\r\n  const openModal = () => {\r\n    setVisiable(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    if (folderName === '') {\r\n      setVisiable(false);\r\n      setAddFolder(false);\r\n      setFolderName('');\r\n      setFolderColor(null);\r\n      setFolderId(null);\r\n      setIsEdit(false);\r\n    } else {\r\n      const folderData = {\r\n        id: folderId,\r\n        folderName: folderName,\r\n        folderColor: folderColor,\r\n      };\r\n      const _folderList = [];\r\n      _folderList.push(folderData);\r\n      setVisiable(false);\r\n      setAddFolder(false);\r\n      setFolder([..._folderList, ...folder]);\r\n      setFolderName('');\r\n      setFolderColor(null);\r\n      setFolderId(null);\r\n      setIsEdit(false);\r\n    }\r\n    if (props?.userData?.designations) getAllFolders();\r\n  };\r\n\r\n  const handleAddFolder = async () => {\r\n    const payload = {\r\n      name: folderName,\r\n      designation_id: props?.userData?.designations[0]?.id,\r\n    };\r\n\r\n    const resp = await Api.ApiHandle(CREATE_FOLDER, payload, 'POST');\r\n\r\n    if (resp.status === 1) {\r\n      const folderResp = {\r\n        id: resp?.data[0]?.id,\r\n        folderName: folderName,\r\n        folderColor: resp?.data[0]?.Color?.text,\r\n      };\r\n      const _folderList = [];\r\n      _folderList.push(folderResp);\r\n      setAddFolder(false);\r\n      setFolder([..._folderList, ...folder]);\r\n      setFolderName('');\r\n      Toaster('success', 'Folder added successfully');\r\n      props.updateFolderList([..._folderList, ...folder]);\r\n    } else {\r\n      Toaster('error', `${resp?.message}`);\r\n    }\r\n  };\r\n\r\n  const handlefolderOptions = (e) => {\r\n    e.stopPropagation();\r\n    setFolderOptions((folderOptions) => !folderOptions);\r\n  };\r\n\r\n  const getAllFolders = async () => {\r\n    const apiData = [];\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_FOLDER}${props?.userData?.designations[0]?.id}`,\r\n      '',\r\n      'GET'\r\n    );\r\n\r\n    if (resp.status === 1) {\r\n      resp.data?.forEach((folder) => {\r\n        const obj = {\r\n          id: folder?.id,\r\n          folderName: folder?.name,\r\n          folderColor: folder.Color?.text,\r\n        };\r\n        apiData.push(obj);\r\n      });\r\n\r\n      setFolder(apiData);\r\n    }\r\n  };\r\n\r\n  const handleEditFolder = (index) => {\r\n    let name = folder[index];\r\n    // console.log(name);\r\n    setFolderName(name?.folderName);\r\n    setFolderId(name?.id);\r\n    setFolderColor(name?.folderColor);\r\n    setIsEdit(true);\r\n    folder.splice(index, 1);\r\n    setFolder(folder);\r\n    setAddFolder(true);\r\n  };\r\n\r\n  const handleEditFolderResponse = async () => {\r\n    const payload = {\r\n      name: folderName,\r\n      designation_id: props?.userData?.designations[0]?.id,\r\n    };\r\n    const resp = await Api.ApiHandle(\r\n      `${EDIT_FOLDER}${folderId}`,\r\n      payload,\r\n      'PUT'\r\n    );\r\n\r\n    const folderData = {\r\n      id: folderId,\r\n      folderName: folderName,\r\n      folderColor: folderColor,\r\n    };\r\n    const _folderList = [];\r\n    _folderList.push(folderData);\r\n\r\n    if (resp.status === 1) {\r\n      setAddFolder(false);\r\n      setFolder([..._folderList, ...folder]);\r\n      setFolderName('');\r\n      setFolderColor(null);\r\n      setFolderId(null);\r\n      setIsEdit(false);\r\n      Toaster('success', 'Folder updated successfully');\r\n    } else {\r\n      setAddFolder(false);\r\n      setFolder([..._folderList, ...folder]);\r\n      setFolderName('');\r\n      setFolderColor(null);\r\n      setFolderId(null);\r\n      setIsEdit(false);\r\n\r\n      Toaster('error', `${resp?.message}`);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFolder = async (i, id) => {\r\n    const resp = await Api.ApiHandle(`${REMOVE_FOLDER}${id}`, '', 'DELETE');\r\n\r\n    if (resp.status === 1) {\r\n      folder.splice(i, 1);\r\n      setFolder(folder);\r\n      getAllFolders();\r\n      Toaster('success', 'Folder removed successfully');\r\n    } else {\r\n      Toaster('error', `${resp?.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"threeColumnSidebar\">\r\n        <div className=\"nk-ibx-aside-update-3\">\r\n          <div className=\"nk-ibx-head\">\r\n            <div className=\"mr-n1\">\r\n              <strong>Mailbox</strong>\r\n            </div>\r\n          </div>\r\n          <div className=\"nk-ibx-nav jumbotron-overflow\">\r\n            <ul className=\"nk-ibx-menu\">\r\n              <li onClick={props.openComposeModel}>\r\n                <OverlayTrigger\r\n                  placement=\"right\"\r\n                  overlay={\r\n                    <Tooltip className=\"tooltip-right\">Compose Mail</Tooltip>\r\n                  }\r\n                >\r\n                  <span className=\"d-inline-block\">\r\n                    <div href=\"javascript:void(0)\">\r\n                      <span className=\"link link-text\">\r\n                        <em className=\"icon-circle icon ni ni-plus\"></em>\r\n                      </span>\r\n                    </div>\r\n                  </span>\r\n                </OverlayTrigger>\r\n              </li>\r\n              {sidebarOptions.map((bars, i) => {\r\n                return (\r\n                  <li\r\n                    className={selectedOption === bars.id ? 'active' : ''}\r\n                    onClick={() => {\r\n                      props?.updateSortFilter('');\r\n                      setSelectedOption(bars.id);\r\n                      setFolderOptions(false);\r\n                      props.onClick(bars.id);\r\n                      props?.updateIsActiveModule3Column(bars.sidabarName);\r\n                    }}\r\n                    id={bars.id}\r\n                    key={`tabsList${i}`}\r\n                  >\r\n                    <OverlayTrigger\r\n                      placement=\"right\"\r\n                      overlay={\r\n                        <Tooltip className=\"tooltip-right\">\r\n                          {bars.sidabarName}\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <span className=\"d-inline-block\">\r\n                        <div className=\"nk-ibx-menu-item\">\r\n                          <em className={`icon ni ni-${bars.icon}`}></em>\r\n                          {bars.id === 'unread' ? (\r\n                            <span className=\"nk-ibx-menu-text\">\r\n                              {bars.count}\r\n                            </span>\r\n                          ) : (\r\n                            ''\r\n                          )}\r\n                        </div>\r\n                      </span>\r\n                    </OverlayTrigger>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n\r\n            <hr className=\"mb-0\" />\r\n\r\n            {/* <div className=\"nk-ibx-nav-head\">\r\n              <OverlayTrigger\r\n                placement=\"right\"\r\n                overlay={<Tooltip className=\"tooltip-right\">Folder</Tooltip>}\r\n              >\r\n                <span className=\"d-inline-block sidebarFolder\">\r\n                  <h6 className=\"title \">\r\n                    <em className=\"icon ni ni-folder-fill font-26 mr-3 text-primary\"></em>{\" \"}\r\n                  </h6>\r\n                </span>\r\n              </OverlayTrigger>\r\n              <OverlayTrigger\r\n                placement=\"right\"\r\n                overlay={\r\n                  <Tooltip className=\"tooltip-right\">Add Folder</Tooltip>\r\n                }\r\n              >\r\n                <span className=\"d-inline-block sidebarFolder\">\r\n                  <h6 className=\"title\">\r\n                    <em\r\n                      className=\"ni ni-plus-circle sidebarFolderAdd\"\r\n                      onClick={() => setAddFolder(true)}\r\n                    ></em>\r\n                  </h6>\r\n                </span>\r\n              </OverlayTrigger>\r\n            </div> */}\r\n\r\n            <ul\r\n              className=\"nk-ibx-menu\"\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                paddingTop: '20%',\r\n              }}\r\n            >\r\n              <li>\r\n                <OverlayTrigger\r\n                  placement=\"right\"\r\n                  overlay={\r\n                    <Tooltip className=\"tooltip-right\">Add Folder</Tooltip>\r\n                  }\r\n                >\r\n                  <span className=\"d-inline-block sidebarFolder\">\r\n                    <h6 className=\"title\">\r\n                      <em\r\n                        className=\"ni ni-plus-circle sidebarFolderAdd\"\r\n                        onClick={() => setAddFolder(true)}\r\n                      ></em>\r\n                    </h6>\r\n                  </span>\r\n                </OverlayTrigger>\r\n              </li>\r\n              {folder.map((fold, i) => {\r\n                return (\r\n                  <li\r\n                    key={`folderList${i}`}\r\n                    id={fold.id}\r\n                    className={selectedOption === fold.id ? 'active' : ''}\r\n                    onClick={() => {\r\n                      setFolderOptions(false);\r\n                      setSelectedOption(fold.id);\r\n                      props.onClick(fold.id);\r\n                    }}\r\n                  >\r\n                    <OverlayTrigger\r\n                      placement=\"right\"\r\n                      overlay={\r\n                        <Tooltip className=\"tooltip-right\">\r\n                          {fold.folderName}\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <span className=\"d-inline-block\">\r\n                        <div style={{ color: fold.folderColor }}>\r\n                          <em className=\"icon ni ni-folder-fill font-22\"></em>\r\n                        </div>\r\n                      </span>\r\n                    </OverlayTrigger>\r\n                    <div\r\n                      className={\r\n                        selectedOption === fold.id\r\n                          ? 'moreVertIconShow'\r\n                          : 'moreVertIcon'\r\n                      }\r\n                    >\r\n                      <em\r\n                        className=\"ni ni-more-v\"\r\n                        style={{ fontSize: 16 }}\r\n                        onClick={handlefolderOptions}\r\n                      ></em>\r\n                      {folderOptions && (\r\n                        <div\r\n                          className={`dropdown-menu dropdown-menu-sm dropdown-menu-right folder-dropdown show `}\r\n                          // style={{ left: 26, zIndex: 999 }}\r\n                        >\r\n                          <ul className=\"link-list-opt no-bdr\">\r\n                            <li onClick={() => handleEditFolder(i)}>\r\n                              <a>\r\n                                <span>Edit Folder</span>\r\n                              </a>\r\n                            </li>\r\n                            <li onClick={() => handleRemoveFolder(i, fold.id)}>\r\n                              <a>\r\n                                <span>Remove Folder</span>\r\n                              </a>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"nk-ibx-body body-width bg-white\">\r\n        <Inbox />\r\n      </div> */}\r\n\r\n      <Modal\r\n        className=\"modal fade\"\r\n        visible={addFolder}\r\n        id=\"add-folder\"\r\n        width=\"400\"\r\n        effect=\"fadeInUp\"\r\n        onClickAway={closeModal}\r\n      >\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h6 className=\"modal-title\">Add Folder</h6>\r\n            <span onClick={closeModal} className=\"close\">\r\n              <em className=\"icon ni ni-cross-sm\"></em>\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-0\">\r\n            <div className=\"nk-reply-form-header\">\r\n              <div className=\"nk-reply-form-group\">\r\n                <div className=\"nk-reply-form-input-group\">\r\n                  <div className=\"nk-reply-form-input nk-reply-form-input-to\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"input-mail tagify\"\r\n                      placeholder=\"Folder name ...\"\r\n                      value={folderName}\r\n                      onChange={(e) => setFolderName(e.target.value)}\r\n                    />\r\n                    {/* <Button type=\"submit\"> */}\r\n                    <Button\r\n                      type=\"submit\"\r\n                      onClick={\r\n                        isEdit ? handleEditFolderResponse : handleAddFolder\r\n                      }\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                    {/* <em\r\n                      className=\"ni ni-check-fill-c addFolderCheckIcon\"\r\n                     \r\n                    ></em> */}\r\n                    {/* </Button> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      {/* <Modal\r\n        className=\"modal fade\"\r\n        visible={visiable}\r\n        id=\"compose-mail\"\r\n        width=\"720\"\r\n        effect=\"fadeInUp\"\r\n        onClickAway={closeModal}\r\n      >\r\n        <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h6 className=\"modal-title\">Compose Message</h6>\r\n              <span onClick={closeModal} className=\"close\">\r\n                <em className=\"icon ni ni-cross-sm\"></em>\r\n              </span>\r\n            </div>\r\n            <div className=\"modal-body p-0\">\r\n              <div className=\"nk-reply-form-header\">\r\n                <div className=\"nk-reply-form-group\">\r\n                  <div className=\"nk-reply-form-input-group\">\r\n                    <div className=\"nk-reply-form-input nk-reply-form-input-to\">\r\n                      <label className=\"label\">To</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"input-mail tagify\"\r\n                        placeholder=\"Recipient\"\r\n                        data-whitelist=\"team@softnio.com, help@softnio.com, contact@softnio.com\"\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      className=\"nk-reply-form-input nk-reply-form-input-cc\"\r\n                      data-content=\"mail-cc\"\r\n                    >\r\n                      <label className=\"label\">Cc</label>\r\n                      <input type=\"text\" className=\"input-mail tagify\" />\r\n                      <div  className=\"toggle-opt\" data-target=\"mail-cc\">\r\n                        <em className=\"icon ni ni-cross\"></em>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className=\"nk-reply-form-input nk-reply-form-input-bcc\"\r\n                      data-content=\"mail-bcc\"\r\n                    >\r\n                      <label className=\"label\">Bcc</label>\r\n                      <input type=\"text\" className=\"input-mail tagify\" />\r\n                      <div  className=\"toggle-opt\" data-target=\"mail-bcc\">\r\n                        <em className=\"icon ni ni-cross\"></em>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ul className=\"nk-reply-form-nav\">\r\n                    <li>\r\n                      <div\r\n                        tabindex=\"-1\"\r\n                        className=\"toggle-opt\"\r\n                        data-target=\"mail-cc\"\r\n                        \r\n                      >\r\n                        CC\r\n                      </div>\r\n                    </li>\r\n                    <li>\r\n                      <div\r\n                        tabindex=\"-1\"\r\n                        className=\"toggle-opt\"\r\n                        data-target=\"mail-bcc\"\r\n                        \r\n                      >\r\n                        BCC\r\n                      </div>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n              <div className=\"nk-reply-form-editor\">\r\n                <div className=\"nk-reply-form-field\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-simple\"\r\n                    placeholder=\"Subject\"\r\n                  />\r\n                </div>\r\n                <div className=\"nk-reply-form-field\">\r\n                  <textarea\r\n                    className=\"form-control form-control-simple no-resize ex-large\"\r\n                    placeholder=\"Hello\"\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"nk-reply-form-tools\">\r\n                <ul className=\"nk-reply-form-actions g-1\">\r\n                  <li className=\"mr-2\">\r\n                    <button className=\"btn btn-primary\" type=\"submit\">\r\n                      Send\r\n                    </button>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"dropdown\">\r\n                      <div\r\n                        className=\"btn btn-icon btn-sm btn-tooltip\"\r\n                        data-toggle=\"dropdown\"\r\n                        title=\"Templates\"\r\n                        \r\n                      >\r\n                        <em className=\"icon ni ni-hash\"></em>\r\n                      </div>\r\n                      <div className=\"dropdown-menu\">\r\n                        <ul className=\"link-list-opt no-bdr link-list-template\">\r\n                          <li className=\"opt-head\">\r\n                            <span>Quick Insert</span>\r\n                          </li>\r\n                          <li>\r\n                            <div >\r\n                              <span>Thank you message</span>\r\n                            </div>\r\n                          </li>\r\n                          <li>\r\n                            <div >\r\n                              <span>Your issues solved</span>\r\n                            </div>\r\n                          </li>\r\n                          <li>\r\n                            <div >\r\n                              <span>Thank you message</span>\r\n                            </div>\r\n                          </li>\r\n                          <li className=\"divider\">\r\n                            <li>\r\n                              <div >\r\n                                <em className=\"icon ni ni-file-plus\"></em>\r\n                                <span>Save as Template</span>\r\n                              </div>\r\n                            </li>\r\n                            <li>\r\n                              <div >\r\n                                <em className=\"icon ni ni-notes-alt\"></em>\r\n                                <span>Manage Template</span>\r\n                              </div>\r\n                            </li>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      className=\"btn btn-icon btn-sm\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Upload Attachment\"\r\n                      \r\n                    >\r\n                      <em className=\"icon ni ni-clip-v\"></em>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"d-none d-sm-block\">\r\n                    <div\r\n                      className=\"btn btn-icon btn-sm\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Insert Emoji\"\r\n                      \r\n                    >\r\n                      <em className=\"icon ni ni-happy\"></em>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"d-none d-sm-block\">\r\n                    <div\r\n                      className=\"btn btn-icon btn-sm\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Upload Images\"\r\n                      \r\n                    >\r\n                      <em className=\"icon ni ni-img\"></em>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n                <ul className=\"nk-reply-form-actions g-1\">\r\n                  <li>\r\n                    <div className=\"dropdown\">\r\n                      <div\r\n                        \r\n                        className=\"dropdown-toggle btn-trigger btn btn-icon\"\r\n                        data-toggle=\"dropdown\"\r\n                      >\r\n                        <em className=\"icon ni ni-more-v\"></em>\r\n                      </div>\r\n                      <div className=\"dropdown-menu dropdown-menu-right\">\r\n                        <ul className=\"link-list-opt no-bdr\">\r\n                          <li>\r\n                            <div >\r\n                              <span>Another Option</span>\r\n                            </div>\r\n                          </li>\r\n                          <li>\r\n                            <div >\r\n                              <span>More Option</span>\r\n                            </div>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div  className=\"btn-trigger btn btn-icon mr-n2\">\r\n                      <em className=\"icon ni ni-trash\"></em>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal> */}\r\n    </>\r\n  );\r\n};\r\nconst mapActionToProps = {\r\n  updateFolderList,\r\n  updateIsActiveModule3Column,\r\n  updateSortFilter,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  folderList: state.folderList,\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Sidebar);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\Switch.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\reducer\\index.js",["447","448"],"import * as ACTIONS from \"../action_types\";\r\nimport { store } from \"../store\";\r\n\r\nconst initialState = {\r\n  previous: [],\r\n  current: [],\r\n  next: [],\r\n};\r\n\r\nexport const updateData = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_DATA:\r\n      return payload || [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateFolderList = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_FOLDER_LIST:\r\n      return payload || [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateUnreadMailsCount = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_UNREAD_MAILS_COUNT:\r\n      return payload || 0;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateActiveModule = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ACTIVE_MODULE:\r\n      return payload || \"\";\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateIsActiveModule3Column = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ACTIVE_MODULE_3_COLUMN:\r\n      return payload || \"\";\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateUserData = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_USER_DATA:\r\n      return payload || {};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateSeachText = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_SEARCH_TEXT:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateFilterOptions = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_FILTER_OPTIONS:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateStationList = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_STATION_LIST:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateSortFilter = (state = \"\", { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_SORT_FILTER:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateSwitching = (state = \"\", { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_SWITCHING:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateUnreadCache = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_UNREAD_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    case ACTIONS.CLEAR_UNREAD_CACHE:\r\n      return { ...state, previous: [], current: [], next: [] };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateArchiveCache = (\r\n  state = { previous: [], current: [], next: [] },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ARCHIVE_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateAllCache = (\r\n  state = { previous: [], current: [], next: [] },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ALL_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateSentCache = (\r\n  state = { previous: [], current: [], next: [] },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_SENT_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateStarredCache = (\r\n  state = { previous: [], current: [], next: [] },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_STARRED_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateCrashedCache = (\r\n  state = { previous: [], current: [], next: [] },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_CRASHED_CACHE:\r\n      return {\r\n        ...state,\r\n        [payload.key]: payload.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateUnreadCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_UNREAD_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateAllCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ALL_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const updateArchiveCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ARCHIVE_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const updateSentCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_SENT_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const updateStarredCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_STARRED_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const updateCrashedCall = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_CRASHED_CALL:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateFolderCachedData = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_FOLDER_CACHED_DATA:\r\n      if (payload?.key === \"current\") {\r\n        let obj = {\r\n          prev: [],\r\n          current: payload.data,\r\n          next: [],\r\n          isFolderCached: true,\r\n        };\r\n        return {\r\n          ...state,\r\n          [payload?.folderId]: obj,\r\n        };\r\n      }\r\n      if (payload?.key === \"next\" && state[payload?.folderId] !== undefined) {\r\n        state[payload?.folderId].next = payload.data;\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      if (\r\n        payload?.key === \"previous\" &&\r\n        state[payload?.folderId] !== undefined &&\r\n        payload?.page === 1\r\n      ) {\r\n        state[payload?.folderId].next = state[payload?.folderId]?.current;\r\n        state[payload?.folderId].current = state[payload?.folderId]?.prev;\r\n        state[payload?.folderId].prev = payload?.data;\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n\r\n      if (\r\n        payload?.key === \"previous\" &&\r\n        state[payload?.folderId] !== undefined\r\n      ) {\r\n        if (payload?.page !== undefined && payload?.page !== 1) {\r\n          state[payload?.folderId].prev = payload?.data;\r\n          state[payload?.folderId].current = state[payload?.folderId]?.next;\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        if (payload?.isPreviousButtonClicked) {\r\n          state[payload?.folderId].next = state[payload?.folderId]?.current;\r\n          state[payload?.folderId].current = state[payload?.folderId]?.prev;\r\n        }\r\n        if (!payload?.isPreviousButtonClicked) {\r\n          state[payload?.folderId].prev = payload?.data;\r\n        }\r\n      }\r\n      if (payload === \"delete\") {\r\n        state = [];\r\n        return state;\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateAddToFolderCache = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ADD_TO_FOLDER_CACHE:\r\n      if (payload?.isFolderCached !== undefined) {\r\n        payload.isFolderCached = false;\r\n      }\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateArchiveLoader = (state = false, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_ARCHIVE_LOADER:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateMostFrequent = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.UPDATE_MOST_FREQUENT:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\renderImage.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\track.js",["449","450"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Modal from \"react-modal\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { TRACK_MAIL } from \"../../config/constants\";\r\nimport Loading from \"../../util/loader/Loading\";\r\n\r\nconst Track = React.forwardRef((props, ref) => {\r\n  const [data, setdata] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    getMailshistory();\r\n  }, []);\r\n\r\n  const customStyles = {\r\n    overlay: {\r\n      // backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n      zIndex: \"10001\",\r\n    },\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      width: \"70%\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n    },\r\n  };\r\n\r\n  let columns = [\r\n    {\r\n      name: \"Sender\",\r\n      selector: \"fromUser\",\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: \"Receiver\",\r\n      selector: \"toUser\",\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: \"Created\",\r\n      selector: \"createdAt\",\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: \"Read\",\r\n      selector: \"updatedAt\",\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: \"Forward To\",\r\n      selector: \"forwardTo\",\r\n      sortable: false,\r\n    },\r\n    { name: \"Origin\", selector: \"origin\", sortable: false },\r\n  ];\r\n\r\n  const getMailshistory = async () => {\r\n    logDataFunction(\"TRACK MAIL\", 0, 0);\r\n    setloading(true);\r\n    const resp = await Api.ApiHandle(\r\n      `${TRACK_MAIL}?mail_id=${props.mail_id}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp.status == 1) {\r\n      setloading(false);\r\n      let track_data = resp.data.map((item) => {\r\n        let res_t = {\r\n          fromUser: `${item.From.designation}(${item.From.branch})`,\r\n          toUser: `${item.To.designation}(${item.To.branch})`,\r\n          createdAt: item.createdAt,\r\n          updatedAt: item.mail_read_time,\r\n          forwardTo: item.forward ?? \"\",\r\n          origin: item.origin_mail ? \"Originator\" : \"-\",\r\n        };\r\n        return res_t;\r\n      });\r\n\r\n      setdata(track_data);\r\n    } else setloading(false);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      classNameName=\"modal fade\"\r\n      isOpen={props.visible}\r\n      id=\"track_history\"\r\n      width=\"720\"\r\n      style={customStyles}\r\n      effect=\"fadeInUp\"\r\n      shouldCloseOnOverlayClick={false}\r\n      onRequestClose={props.closeModal}\r\n    >\r\n      {loading ? (\r\n        <div>\r\n          <Loading />\r\n        </div>\r\n      ) : (\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h6 className=\"modal-title\">Track Message</h6>\r\n            <span onClick={props.closeModal} className=\"close\">\r\n              <em className=\"icon ni ni-cross-sm\"></em>\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-0 trackScroller\">\r\n            {/* <DataTableExtensions {...tableData} print={false} export={false}> */}\r\n            <DataTable\r\n              columns={columns}\r\n              data={data}\r\n              // allowOverflow\r\n              noHeader\r\n              defaultSortField=\"id\"\r\n              defaultSortAsc={true}\r\n              pagination\r\n              highlightOnHover\r\n            />\r\n            {/* </DataTableExtensions> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Modal>\r\n    // </div>\r\n  );\r\n});\r\n\r\nexport default Track;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\annotation.js",["451","452","453","454","455","456","457"],"let documentselector = \"\";\r\nlet windowDoc = \"\";\r\nlet divID = \"\";\r\nlet color = \"\";\r\nlet start_gl = \"\";\r\nlet end_gl = \"\";\r\nexport const PostHighlight = (divID, color1, set) => {\r\n  documentselector =\r\n    document?.getElementById(\"iframeResult\")?.contentWindow?.document;\r\n  windowDoc = document?.getElementById(\"iframeResult\")?.contentWindow?.window;\r\n  divID = divID;\r\n  color = color1;\r\n  const { start, end } = reportSelection(divID);\r\n  if (start == end) {\r\n    let selectedText = {\r\n      start: start,\r\n      end: end,\r\n      text: \"\",\r\n    };\r\n    return selectedText;\r\n  }\r\n  if (set === 1) {\r\n    selectAndHighlightRange(`${divID}`, start, end, color1);\r\n  }\r\n\r\n  let selectedText = {\r\n    start: start,\r\n    end: end,\r\n    text: windowDoc?.getSelection()?.toString(),\r\n  };\r\n\r\n  return selectedText;\r\n};\r\n\r\nfunction reportSelection(divID) {\r\n  var selOffsets = getSelectionCharacterOffsetWithin(\r\n    documentselector.getElementById(`${divID}`)\r\n  );\r\n  return { start: selOffsets.start, end: selOffsets.end };\r\n}\r\n\r\nfunction getSelectionCharacterOffsetWithin(element) {\r\n  var start = 0;\r\n  var end = 0;\r\n  var doc = element.ownerDocument || element.document;\r\n  var win = doc.defaultView || doc.parentWindow;\r\n  var sel;\r\n  if (typeof win.getSelection != \"undefined\") {\r\n    sel = win.getSelection();\r\n    if (sel.rangeCount > 0) {\r\n      var range = win.getSelection().getRangeAt(0);\r\n      var preCaretRange = range.cloneRange();\r\n      preCaretRange.selectNodeContents(element);\r\n      preCaretRange.setEnd(range.startContainer, range.startOffset);\r\n      start = preCaretRange.toString().length;\r\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n      end = preCaretRange.toString().length;\r\n    }\r\n  } else if ((sel = doc.selection) && sel.type != \"Control\") {\r\n    var textRange = sel.createRange();\r\n    var preCaretTextRange = doc.body.createTextRange();\r\n    preCaretTextRange.moveToElementText(element);\r\n    preCaretTextRange.setEndPoint(\"EndToStart\", textRange);\r\n    start = preCaretTextRange.text.length;\r\n    preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\r\n    end = preCaretTextRange.text.length;\r\n  }\r\n  return { start: start, end: end };\r\n}\r\n\r\nexport function selectAndHighlightRange(id, start, end, color1, comment) {\r\n  if (start == end) {\r\n    return false;\r\n  }\r\n  start_gl = start;\r\n  end_gl = end;\r\n  documentselector =\r\n    document?.getElementById(\"iframeResult\")?.contentWindow?.document;\r\n  windowDoc = document?.getElementById(\"iframeResult\")?.contentWindow?.window;\r\n  color = color1;\r\n  setSelectionRange(documentselector?.getElementById(id), start, end);\r\n  highlight(color, comment);\r\n}\r\n\r\nfunction getTextNodesIn(node) {\r\n  var textNodes = [];\r\n  if (node.nodeType == 3) {\r\n    textNodes.push(node);\r\n  } else {\r\n    var children = node.childNodes;\r\n    for (var i = 0, len = children.length; i < len; ++i) {\r\n      textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\r\n    }\r\n  }\r\n  return textNodes;\r\n}\r\n\r\nfunction setSelectionRange(el, start, end) {\r\n  if (documentselector?.createRange && windowDoc?.getSelection) {\r\n    var range = documentselector?.createRange();\r\n    range.selectNodeContents(el);\r\n    var textNodes = getTextNodesIn(el);\r\n    var foundStart = false;\r\n    var charCount = 0,\r\n      endCharCount;\r\n\r\n    for (var i = 0, textNode; (textNode = textNodes[i++]); ) {\r\n      endCharCount = charCount + textNode.length;\r\n      if (\r\n        !foundStart &&\r\n        start >= charCount &&\r\n        (start < endCharCount ||\r\n          (start == endCharCount && i <= textNodes.length))\r\n      ) {\r\n        range.setStart(textNode, start - charCount);\r\n        foundStart = true;\r\n      }\r\n      if (foundStart && end <= endCharCount) {\r\n        range.setEnd(textNode, end - charCount);\r\n        break;\r\n      }\r\n      charCount = endCharCount;\r\n    }\r\n\r\n    var sel = windowDoc?.getSelection();\r\n    sel.removeAllRanges();\r\n    sel.addRange(range);\r\n  } else if (\r\n    documentselector?.selection &&\r\n    documentselector?.body?.createTextRange\r\n  ) {\r\n    var textRange = documentselector?.body?.createTextRange();\r\n    textRange.moveToElementText(el);\r\n    textRange.collapse(true);\r\n    textRange.moveEnd(\"character\", end);\r\n    textRange.moveStart(\"character\", start);\r\n    textRange.select();\r\n  }\r\n}\r\n\r\nfunction makeEditableAndHighlight(colour, comment) {\r\n  let sel = windowDoc?.getSelection();\r\n  let range;\r\n  if (sel.rangeCount && sel.getRangeAt) {\r\n    range = sel.getRangeAt(0);\r\n  }\r\n  documentselector.designMode = \"on\";\r\n  if (range) {\r\n    sel.removeAllRanges();\r\n    sel.addRange(range);\r\n  }\r\n  if (!documentselector?.execCommand(\"HiliteColor\", false, colour)) {\r\n    documentselector?.execCommand(\"BackColor\", false, colour);\r\n  }\r\n\r\n  documentselector?.execCommand(\"foreColor\", false, \"#17202A\");\r\n\r\n  if (!sel?.extentNode?.parentElement.hasAttribute(\"onclick\")) {\r\n    if (sel && sel?.extentNode) {\r\n      sel.extentNode.parentElement.setAttribute(\r\n        \"onclick\",\r\n        `getannotationcomment(${start_gl},${end_gl});`\r\n      );\r\n      sel.extentNode.parentElement.parentElement.style.borderRadius = \"5px\";\r\n      sel.extentNode.parentElement.parentElement.style.padding = \"0px 5px\";\r\n      sel.extentNode.parentElement.parentElement.style.cursor = \"pointer\";\r\n      if (comment) {\r\n        sel.extentNode.parentElement.parentElement.style.textDecoration =\r\n          \"underline\";\r\n      }\r\n    }\r\n  }\r\n  if (!sel?.baseNode.parentElement.hasAttribute(\"onclick\")) {\r\n    if (sel && sel?.baseNode) {\r\n      sel.baseNode.parentElement.setAttribute(\r\n        \"onclick\",\r\n        `getannotationcomment(${start_gl},${end_gl});`\r\n      );\r\n\r\n      sel.baseNode.parentElement.parentElement.style.borderRadius = \"5px\";\r\n      sel.baseNode.parentElement.parentElement.style.padding = \"0px 5px\";\r\n      sel.baseNode.parentElement.parentElement.style.cursor = \"pointer\";\r\n      if (comment) {\r\n        sel.baseNode.parentElement.parentElement.style.textDecoration =\r\n          \"underline \";\r\n      }\r\n    }\r\n  }\r\n\r\n  documentselector.designMode = \"off\";\r\n}\r\n\r\nfunction highlight(colour, comment) {\r\n  var range;\r\n  if (windowDoc?.getSelection) {\r\n    try {\r\n      if (!documentselector?.execCommand(\"BackColor\", false, colour)) {\r\n        makeEditableAndHighlight(colour, comment);\r\n      }\r\n    } catch (ex) {\r\n      makeEditableAndHighlight(colour, comment);\r\n    }\r\n  } else if (\r\n    documentselector?.selection &&\r\n    documentselector?.selection?.createRange\r\n  ) {\r\n    range = documentselector?.selection?.createRange();\r\n    range.execCommand(\"BackColor\", false, colour);\r\n    range.execCommand(\"foreColor\", false, \"#00000\");\r\n  }\r\n}\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\InboxNavbar.jsx",["458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Axios from \"axios\";\r\n\r\nimport {\r\n  GET_LIST_STATIONS,\r\n  GET_UNREAD_COUNT,\r\n  UPDATE_MAIL,\r\n} from \"../../config/constants\";\r\nimport {\r\n  updateData,\r\n  updateSeachText,\r\n  updateUnreadCall,\r\n  updateUnreadMailsCount,\r\n  updateArchiveCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateAllCall,\r\n  updateFolderCachedData,\r\n  updateArchiveLoader,\r\n} from \"../../redux/action/InboxAction\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport \"../../Assets/CSS/pretty-checkbox.min.css\";\r\nimport Agree from \"../../Assets/images/Tick.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ForwardTo from \"./ForwardTo\";\r\nimport FolderAdd from \"./FolderAdd\";\r\nimport { MAIL_ACTIONS } from \"../../util\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst InboxNavbar = (props) => {\r\n  // const [sortTimeState, setSortTimeState] = useState(false);\r\n  // const [sortOpState, setSortOpState] = useState(false);\r\n  // const [sortFromState, setSortFromState] = useState(false);\r\n  // const [searchData, setSearchData] = useState({});\r\n  // const [tagData, setTagData] = useState({});\r\n  const closeWinRef = useRef(null);\r\n\r\n  const [search, setSearch] = useState({});\r\n  const [tag, setTag] = useState([]);\r\n  const [stationList, setStationList] = useState([]);\r\n  const [sectionName, setSectionName] = useState(\"\");\r\n  const [apiCalledCount, setApiCalledCount] = useState({ value: 0 });\r\n  const [operateStationList, setOperateStationList] = useState(false);\r\n  const [operateMarkReadUnread, setOperateMarkReadUnread] = useState(false);\r\n  const [disableStationSubmit, setDisableStationSubmit] = useState(true);\r\n  const [searchInStation, setSearchInStation] = useState(\"\");\r\n  const [operateForwardTo, setOperateForwardTo] = useState(false);\r\n  const [addToFolder, setAddToFolder] = useState(false);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.searchText.hasOwnProperty(\"station\")) {\r\n      var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        if (props.searchText.station.includes(inputs[i]?.name)) {\r\n          inputs[i].checked = true;\r\n        }\r\n      }\r\n    }\r\n  }, [props.searchText, stationList]);\r\n\r\n  useEffect(() => {\r\n    const ourRequest = Axios.CancelToken.source();\r\n    getListOfStations(ourRequest.token);\r\n    if (props?.userData?.designations) {\r\n      setOperateMarkReadUnread(false);\r\n      setSearchInStation(\"\");\r\n      setOperateStationList(false);\r\n    }\r\n\r\n    return () => {\r\n      ourRequest.cancel(); // <-- 3rd step\r\n    };\r\n  }, [\r\n    props?.filterOptions?.mail_action,\r\n    props?.filterOptions?.folder,\r\n    props?.filterOptions?.is_sent,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setTag([]);\r\n  }, [sectionName]);\r\n\r\n  useEffect(() => {\r\n    if (props?.filterOptions?.by_stations === undefined) {\r\n      props?.setSelectedstation([]);\r\n      setDisableStationSubmit(true);\r\n      props?.setStationTag([]);\r\n    }\r\n  }, [props?.filterOptions?.by_stations]);\r\n\r\n  useEffect(() => {\r\n    if (props?.selectedStation.length > 0) setDisableStationSubmit(false);\r\n    if (props?.selectedStation.length === 0) setDisableStationSubmit(true);\r\n    if (props?.stationTag.length > 0 && props?.selectedStation.length === 0)\r\n      setDisableStationSubmit(false);\r\n  }, [props?.selectedStation, props?.stationTag]);\r\n\r\n  useEffect(() => {\r\n    if (apiCalledCount.value > 0) {\r\n      handleRefreshClick(\"back\");\r\n      setApiCalledCount(() => ({ value: 0 }));\r\n    }\r\n  }, [apiCalledCount]);\r\n\r\n  useEffect(() => {\r\n    getSectionName();\r\n  }, [props?.filterOptions]);\r\n\r\n  const getSectionName = () => {\r\n    if (typeof props?.isActiveModule === \"number\") {\r\n      setSectionName(\"folder\");\r\n    } else {\r\n      setSectionName(props?.isActiveModule);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (closeWinRef.current && !closeWinRef.current.contains(event.target)) {\r\n        setOperateMarkReadUnread(false);\r\n        setOperateStationList(false);\r\n        setSearchInStation(\"\");\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [closeWinRef]);\r\n\r\n  const handleRefreshClick = async (type) => {\r\n    props?.getAllMails(type);\r\n    getUnreadCount();\r\n  };\r\n\r\n  const updatingKeyForCall = () => {\r\n    switch (props.isActiveModule) {\r\n      case \"Unread\":\r\n        props.updateUnreadCall(0);\r\n        break;\r\n      case \"All\":\r\n        props.updateAllCall(0);\r\n        break;\r\n      case \"Archive\":\r\n        props.updateArchiveCall(0);\r\n        break;\r\n      case \"Sent\":\r\n        props.updateSentCall(0);\r\n        break;\r\n      case \"Crashed\":\r\n        props.updateCrashedCall(0);\r\n        break;\r\n      case \"Starred\":\r\n        props.updateStarredCall(0);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getListOfStations = async (cancelToken) => {\r\n    let filter = \"\";\r\n    if (props?.filterOptions.hasOwnProperty(\"mail_action\")) {\r\n      filter = `mail_action=${props?.filterOptions.mail_action}`;\r\n    } else if (props?.filterOptions.hasOwnProperty(\"is_sent\")) {\r\n      filter = \"is_sent=1\";\r\n    } else if (props?.filterOptions.hasOwnProperty(\"folder\")) {\r\n      filter = `folder=${props?.filterOptions?.folder}`;\r\n    }\r\n    logDataFunction(\"STATION LIST\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_LIST_STATIONS}${filter}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData,\r\n      cancelToken\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const station = [];\r\n      let obj;\r\n      resp?.data?.map((stat) => {\r\n        obj = {\r\n          id: stat?.id,\r\n          station: stat?.designation\r\n            ? `${stat?.designation}(${stat?.branch})`\r\n            : `${stat?.branch}`,\r\n        };\r\n\r\n        station.push(obj);\r\n      });\r\n      setStationList(station);\r\n    } else {\r\n      if (resp) Toaster(\"error\", \"Couldn't get list of stations\");\r\n    }\r\n  };\r\n\r\n  // const handleSortClick = async (sort) => {\r\n  //   if (sort === \"createdAt\") {\r\n  //     if (sortTimeState) {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"op\") delete props.filterOptions.op;\r\n  //         if (item === \"branch\") delete props.filterOptions.branch;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, createdAt: \"DESC\" });\r\n  //       setSortOpState(false);\r\n  //       setSortFromState(false);\r\n  //       setSortTimeState(false);\r\n  //     } else {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"op\") delete props.filterOptions.op;\r\n  //         if (item === \"branch\") delete props.filterOptions.branch;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, createdAt: \"ASC\" });\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(false);\r\n  //       setSortTimeState(true);\r\n  //     }\r\n  //   } else if (sort === \"op\") {\r\n  //     if (sortOpState) {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"createdAt\") delete props.filterOptions.createdAt;\r\n  //         if (item === \"branch\") delete props.filterOptions.branch;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, op: \"DESC\" });\r\n  //       setSortTimeState(false);\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(false);\r\n  //     } else {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"createdAt\") delete props.filterOptions.createdAt;\r\n  //         if (item === \"branch\") delete props.filterOptions.branch;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, op: \"ASC\" });\r\n  //       setSortTimeState(false);\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(true);\r\n  //     }\r\n  //   } else {\r\n  //     if (sortFromState) {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"createdAt\") delete props.filterOptions.createdAt;\r\n  //         if (item === \"op\") delete props.filterOptions.op;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, branch: \"DESC\" });\r\n  //       setSortOpState(false);\r\n  //       setSortTimeState(false);\r\n  //       setSortFromState(false);\r\n  //     } else {\r\n  //       Object.keys(props.filterOptions).forEach((item) => {\r\n  //         if (item === \"createdAt\") delete props.filterOptions.createdAt;\r\n  //         if (item === \"op\") delete props.filterOptions.op;\r\n  //       });\r\n  //       props.setFilterOptions({ ...props.filterOptions, branch: \"ASC\" });\r\n  //       setSortOpState(false);\r\n  //       setSortTimeState(false);\r\n  //       setSortFromState(true);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleSearch = (event) => {\r\n    const inputData = { ...search };\r\n    inputData[event.target.name] = event.target.value;\r\n\r\n    if (event.target.value.length > 0) {\r\n      setSearch(inputData);\r\n    } else setSearch(\"\");\r\n  };\r\n\r\n  const searchMail = (event) => {\r\n    event.preventDefault();\r\n    if (search.hasOwnProperty(\"search\") && search.search.length > 0) {\r\n      const _searchText = { ...props.searchText };\r\n      const _tag = Object.values(search).map((data) => data);\r\n\r\n      const prevSearchData = _searchText.hasOwnProperty(\"searchData\")\r\n        ? _searchText.searchData\r\n        : [];\r\n\r\n      if (prevSearchData.length > 0) {\r\n        if (prevSearchData.includes(..._tag)) {\r\n          Toaster(\"error\", \"Same data already exists\");\r\n\r\n          setSearch({ search: \"\" });\r\n          return;\r\n        }\r\n        _searchText[\"searchData\"] = [...prevSearchData, ..._tag];\r\n      } else _searchText[\"searchData\"] = [..._tag];\r\n\r\n      props.updateSeachText(_searchText);\r\n      setTag([...tag, ..._tag]);\r\n      setSearch({ search: \"\" });\r\n\r\n      if (_tag.length > 0) {\r\n        let searchData = \"\";\r\n\r\n        if (prevSearchData.length > 0)\r\n          searchData = [...prevSearchData, ..._tag].join();\r\n        else searchData = [..._tag].join();\r\n\r\n        props.setFilterOptions({\r\n          ...props.filterOptions,\r\n          search_data: searchData.replace(/#/g, \"%23\"),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteSeachKey = (deletedData) => {\r\n    const _searchText = { ...props.searchText };\r\n    const prevSearchData = _searchText.hasOwnProperty(\"searchData\")\r\n      ? _searchText.searchData\r\n      : [];\r\n    const _tag = [...prevSearchData];\r\n    const index = _tag.indexOf(deletedData);\r\n    _tag.splice(index, 1);\r\n\r\n    _searchText[\"searchData\"] = _tag;\r\n    props.updateSeachText(_searchText);\r\n    setTag(_tag);\r\n\r\n    if (_tag.length > 0) {\r\n      props.setFilterOptions({\r\n        ...props.filterOptions,\r\n        search_data: [..._tag].join(),\r\n      });\r\n    } else {\r\n      delete props.filterOptions.search_data;\r\n      props.setFilterOptions({ ...props.filterOptions });\r\n    }\r\n  };\r\n\r\n  const handleCheckedStation = (e) => {\r\n    const { id, checked } = e.target;\r\n    if (id === \"ResetAll\") {\r\n      props?.setSelectedstation([]);\r\n      props?.setStationTag([]);\r\n      setOperateStationList(false);\r\n      delete props?.filterOptions?.by_stations;\r\n      delete props.filterOptions.search_data;\r\n      props.updateSeachText({});\r\n      setSearch({ search: \"\" });\r\n      setTag([]);\r\n      props.setFilterOptions({ ...props.filterOptions });\r\n      updatingKeyForCall();\r\n    } else if (id === \"SelectAll\") {\r\n      stationList.map((stat) => {\r\n        props?.setSelectedstation((prev) => [...prev, stat?.id]);\r\n      });\r\n    } else if (checked) {\r\n      props?.setSelectedstation((prev) => [...prev, +id]);\r\n    } else {\r\n      props?.setSelectedstation(\r\n        props?.selectedStation.filter((item) => item !== +id)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleStationSubmit = () => {\r\n    var arr = [];\r\n    stationList.map((stat) => {\r\n      if (props?.selectedStation.includes(stat.id)) {\r\n        arr.push(stat.station);\r\n      }\r\n    });\r\n\r\n    props?.setStationTag(arr);\r\n    setOperateStationList(false);\r\n    setSearchInStation(\"\");\r\n    if (props?.selectedStation.length === 0) {\r\n      delete props?.filterOptions?.by_stations;\r\n      props.setFilterOptions({ ...props.filterOptions });\r\n    } else {\r\n      props.setFilterOptions({\r\n        ...props.filterOptions,\r\n        by_stations: `[${props?.selectedStation}]`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOperateStationList(false);\r\n    let arr = [];\r\n    stationList.forEach((stat) => {\r\n      if (props?.stationTag.includes(stat?.station)) {\r\n        arr.push(stat?.id);\r\n      }\r\n    });\r\n    props?.setSelectedstation(arr);\r\n  };\r\n\r\n  const deleteStationTag = (station) => {\r\n    let arr = [];\r\n    props?.setStationTag(props?.stationTag.filter((item) => item !== station));\r\n\r\n    stationList.map((stat) => {\r\n      if (stat.station === station) {\r\n        arr.push(props?.selectedStation.filter((item) => item !== stat.id));\r\n        props?.setSelectedstation(\r\n          props?.selectedStation.filter((item) => item !== stat.id)\r\n        );\r\n      }\r\n    });\r\n\r\n    if (arr?.[0]?.length < 1) {\r\n      delete props?.filterOptions?.by_stations;\r\n\r\n      props.setFilterOptions({ ...props.filterOptions });\r\n    } else {\r\n      if (props?.selectedStation.length > 0) {\r\n        props.setFilterOptions({\r\n          ...props.filterOptions,\r\n          by_stations: `[${arr}]`,\r\n        });\r\n      } else {\r\n        delete props?.filterOptions?.by_stations;\r\n        props.setFilterOptions({ ...props.filterOptions });\r\n      }\r\n    }\r\n  };\r\n\r\n  const filteredList = (stationList, searchInStation) => {\r\n    return stationList.filter((station) => bySearch(station, searchInStation));\r\n  };\r\n\r\n  const bySearch = (station, searchInStation) => {\r\n    if (searchInStation) {\r\n      return station.station\r\n        .toLowerCase()\r\n        .includes(searchInStation.toLowerCase());\r\n    } else return station;\r\n  };\r\n\r\n  const clearAllStationTag = () => {\r\n    updatingKeyForCall();\r\n    props?.setSelectedstation([]);\r\n    props?.setStationTag([]);\r\n    delete props?.filterOptions?.by_stations;\r\n    delete props.filterOptions.search_data;\r\n    props.updateSeachText({});\r\n    setSearch({ search: \"\" });\r\n    setTag([]);\r\n    props.setFilterOptions({ ...props.filterOptions });\r\n  };\r\n\r\n  const selectAllHandler = (e) => {\r\n    if (props.selectedMail.length !== 0) {\r\n      props.setSelectedMail([]);\r\n      props.setSelectedMailData([]);\r\n    } else {\r\n      props.setSelectedMail(props.filterMailData);\r\n      props.setSelectedMailData(props.mailData);\r\n    }\r\n  };\r\n\r\n  const getUnreadCount = async () => {\r\n    logDataFunction(\"COUNT UNREAD MAIL\", 0, 0);\r\n    const resp = await Api.ApiHandle(`${GET_UNREAD_COUNT}`, \"\", \"GET\", logData);\r\n    if (resp && resp.status === 1) {\r\n      props?.updateUnreadMailsCount(resp.data);\r\n    }\r\n  };\r\n\r\n  const callApiForUpdata = async (data, removeFromUnread) => {\r\n    props?.setLoader(true);\r\n    if (removeFromUnread !== undefined) {\r\n      props?.updateArchiveLoader(removeFromUnread);\r\n    }\r\n    logDataFunction(\"UPDATE MAILS\", 0, 0);\r\n    const resp = await Api.ApiHandle(UPDATE_MAIL, data, \"PUT\", logData);\r\n\r\n    if (resp.status === 1) {\r\n      props?.setLoader(false);\r\n      props?.updateArchiveLoader(false);\r\n      setApiCalledCount((prev) => ({ value: prev.value + 1 }));\r\n      props.setSelectedMailData([]);\r\n      setOperateMarkReadUnread(false);\r\n      getUnreadCount();\r\n      props.setSelectedMail([]);\r\n    }\r\n  };\r\n\r\n  const updateReadUnreadCache = (isRead, removeFromUnread) => {\r\n    if (removeFromUnread) {\r\n      props?.updateUnreadCall(0);\r\n      props.updateArchiveCall(0);\r\n      props.updateAllCall(0);\r\n      props.updateStarredCall(0);\r\n      props.updateCrashedCall(0);\r\n    } else if (props?.isActiveModule === \"Archive\" && !isRead) {\r\n      props.updateUnreadCall(0);\r\n      props.updateArchiveCall(0);\r\n      props.updateAllCall(0);\r\n      props.updateCrashedCall(0);\r\n      props.updateStarredCall(0);\r\n    } else {\r\n      const designationId = props?.userData?.designations.filter((item) => {\r\n        if (item.default_desig) return item;\r\n      })[0].id;\r\n      let idsToUpdate = [];\r\n      props?.selectedMailData?.forEach((item) => {\r\n        idsToUpdate.push(item?.id);\r\n      });\r\n      props?.mailData.filter((item) => {\r\n        if (idsToUpdate.includes(item?.id)) {\r\n          if (designationId == item?.actualFormId) {\r\n            item.fromAction = updateActions(item?.fromAction, isRead);\r\n          } else {\r\n            item.mailAction = updateActions(item?.mailAction, isRead);\r\n          }\r\n        }\r\n      });\r\n      if (!isRead) {\r\n        props.updateArchiveCall(0);\r\n      }\r\n\r\n      switch (props.isActiveModule) {\r\n        case \"Unread\":\r\n          props.updateAllCall(0);\r\n          props.updateStarredCall(0);\r\n          props.updateCrashedCall(0);\r\n          break;\r\n        case \"All\":\r\n          props?.updateUnreadCall(0);\r\n          props.updateStarredCall(0);\r\n          props.updateCrashedCall(0);\r\n          break;\r\n        case \"Crashed\":\r\n          props?.updateUnreadCall(0);\r\n          props.updateAllCall(0);\r\n          props.updateStarredCall(0);\r\n          break;\r\n        case \"Starred\":\r\n          props?.updateUnreadCall(0);\r\n          props.updateAllCall(0);\r\n          props.updateCrashedCall(0);\r\n          break;\r\n\r\n        default:\r\n          props.updateUnreadCall(0);\r\n          props.updateAllCall(0);\r\n          props.updateArchiveCall(0);\r\n          props.updateCrashedCall(0);\r\n          props.updateStarredCall(0);\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateActions = (action, isRead) => {\r\n    let params = \"\";\r\n    switch (action) {\r\n      case \"99\":\r\n        isRead ? (params = \"98\") : (params = \"99\");\r\n        break;\r\n      case \"98\":\r\n        isRead ? (params = \"98\") : (params = \"99\");\r\n        break;\r\n      case \"97\":\r\n        isRead ? (params = \"96\") : (params = \"97\");\r\n        break;\r\n      case \"96\":\r\n        isRead ? (params = \"96\") : (params = \"97\");\r\n        break;\r\n      case \"89\":\r\n        isRead ? (params = \"88\") : (params = \"89\");\r\n        break;\r\n      case \"88\":\r\n        isRead ? (params = \"88\") : (params = \"89\");\r\n        break;\r\n      case \"87\":\r\n        isRead ? (params = \"87\") : (params = \"86\");\r\n        break;\r\n      case \"86\":\r\n        isRead ? (params = \"87\") : (params = \"86\");\r\n        break;\r\n      case \"79\":\r\n        isRead ? (params = \"78\") : (params = \"79\");\r\n        break;\r\n      case \"78\":\r\n        isRead ? (params = \"78\") : (params = \"79\");\r\n        break;\r\n      case \"69\":\r\n        isRead ? (params = \"68\") : (params = \"69\");\r\n        break;\r\n      case \"68\":\r\n        isRead ? (params = \"68\") : (params = \"69\");\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    return params;\r\n  };\r\n\r\n  const handleFolderCached = () => {\r\n    if (props?.folderCachedData !== undefined) {\r\n      props?.updateFolderCachedData(\"delete\");\r\n    }\r\n  };\r\n  const readUnread = async (isRead, removeFromUnread) => {\r\n    handleFolderCached();\r\n    await updateReadUnreadCache(isRead, removeFromUnread);\r\n\r\n    const arr = [];\r\n\r\n    props.selectedMailData.forEach(async (item, i) => {\r\n      let _createParams = {};\r\n      if (props.meMailData.includes(item.id)) {\r\n        _createParams = await createParams(\r\n          isRead,\r\n          removeFromUnread,\r\n          \"action\",\r\n          \"is_read_mail\",\r\n          item.fromAction,\r\n          item\r\n        );\r\n      } else {\r\n        _createParams = await createParams(\r\n          isRead,\r\n          removeFromUnread,\r\n          \"action\",\r\n          \"is_read_mail\",\r\n          item.mailAction,\r\n          item\r\n        );\r\n      }\r\n      arr.push(_createParams);\r\n      if (i === props.selectedMailData.length - 1) {\r\n        callApiForUpdata(arr, removeFromUnread);\r\n      }\r\n    });\r\n  };\r\n\r\n  const createParams = (\r\n    isRead,\r\n    removeFromUnread,\r\n    actionKey,\r\n    readKey,\r\n    mailActionValue,\r\n    inbox\r\n  ) => {\r\n    let params = {\r\n      id: inbox.id,\r\n      userMailId: inbox.userMailId,\r\n    };\r\n\r\n    if (isRead && !removeFromUnread) {\r\n      params[actionKey] = checkReadMailAction(mailActionValue);\r\n      params[readKey] = 1;\r\n    } else if (!isRead && !removeFromUnread) {\r\n      params[actionKey] = checkMailAction(mailActionValue);\r\n      params[readKey] = 0;\r\n    } else {\r\n      params[actionKey] = checkReadMailAction(mailActionValue);\r\n      params[readKey] = 0;\r\n    }\r\n\r\n    return params;\r\n  };\r\n\r\n  const checkMailAction = (action) => {\r\n    let mailAction = \"\";\r\n    switch (action) {\r\n      case \"98\":\r\n        mailAction = \"99\";\r\n        break;\r\n      case \"96\":\r\n        mailAction = \"97\";\r\n        break;\r\n      case \"88\":\r\n        mailAction = \"89\";\r\n        break;\r\n      case \"86\":\r\n        mailAction = \"86\";\r\n        break;\r\n      case \"78\":\r\n        mailAction = \"79\";\r\n        break;\r\n      case \"68\":\r\n        mailAction = \"69\";\r\n        break;\r\n      case \"99\":\r\n        mailAction = \"99\";\r\n        break;\r\n      case \"97\":\r\n        mailAction = \"97\";\r\n        break;\r\n      case \"89\":\r\n        mailAction = \"89\";\r\n        break;\r\n      case \"87\":\r\n        mailAction = \"86\";\r\n        break;\r\n      case \"79\":\r\n        mailAction = \"79\";\r\n        break;\r\n      case \"69\":\r\n        mailAction = \"69\";\r\n        break;\r\n    }\r\n\r\n    return mailAction;\r\n  };\r\n\r\n  const checkReadMailAction = (action) => {\r\n    let mailAction = \"\";\r\n    switch (action) {\r\n      case \"99\":\r\n        mailAction = \"98\";\r\n        break;\r\n      case \"97\":\r\n        mailAction = \"96\";\r\n        break;\r\n      case \"89\":\r\n        mailAction = \"88\";\r\n        break;\r\n      case \"86\":\r\n        mailAction = \"87\";\r\n        break;\r\n      case \"79\":\r\n        mailAction = \"78\";\r\n        break;\r\n      case \"69\":\r\n        mailAction = \"68\";\r\n        break;\r\n      case \"98\":\r\n        mailAction = \"98\";\r\n        break;\r\n      case \"96\":\r\n        mailAction = \"96\";\r\n        break;\r\n      case \"88\":\r\n        mailAction = \"88\";\r\n        break;\r\n      case \"87\":\r\n        mailAction = \"87\";\r\n        break;\r\n      case \"78\":\r\n        mailAction = \"78\";\r\n        break;\r\n      case \"68\":\r\n        mailAction = \"68\";\r\n        break;\r\n    }\r\n\r\n    return mailAction;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nk-ibx-head\" style={{ padding: \"11.5px 15px\" }}>\r\n        {operateForwardTo && props.selectedMail.length > 0 && (\r\n          <ForwardTo\r\n            operateForwardTo={operateForwardTo}\r\n            setOperateForwardTo={setOperateForwardTo}\r\n            selectedMail={props.selectedMail}\r\n            setSelectedMail={props.setSelectedMail}\r\n            selectedMailData={props.selectedMailData}\r\n          />\r\n        )}\r\n        {addToFolder && props.selectedMail.length > 0 && (\r\n          <div className=\"folderAdd\">\r\n            <FolderAdd\r\n              addToFolder={addToFolder}\r\n              setAddToFolder={setAddToFolder}\r\n              selectedMail={props.selectedMail}\r\n              setSelectedMail={props.setSelectedMail}\r\n              selectedMailData={props.selectedMailData}\r\n              setSelectedMailData={props.setSelectedMailData}\r\n              setFilterOptions={props.setFilterOptions}\r\n              setLoader={props.setLoader}\r\n              loader={props.loader}\r\n              setIsFolderLoaderId={props.setIsFolderLoaderId}\r\n              setIsMailAddedToFolder={props?.setIsMailAddedToFolder}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"nk-ibx-head-actions fullWidth\">\r\n          <div className=\"nk-ibx-head-check\"></div>\r\n          <ul className=\"nk-ibx-head-tools g-1 fullWidth\">\r\n            {props?.filterOptions?.is_sent !== 1 &&\r\n              props?.filterOptions?.is_crashed !== 1 &&\r\n              props?.filterOptions?.is_starred !== 1 && (\r\n                <li style={{ marginLeft: \"0.7%\" }}>\r\n                  <div\r\n                    className={`pretty ${\r\n                      props.isMailAllSelect.fullSelect\r\n                        ? \"p-image p-plain\"\r\n                        : \"p-default p-curve\"\r\n                    }`}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"allSelect\"\r\n                      onChange={selectAllHandler}\r\n                      checked={\r\n                        props.isMailAllSelect.fullSelect ||\r\n                        props.isMailAllSelect.partialSelect\r\n                          ? true\r\n                          : false\r\n                      }\r\n                    />\r\n                    <div\r\n                      className={`state ${\r\n                        props.isMailAllSelect.partialSelect && \"p-primary\"\r\n                      }`}\r\n                    >\r\n                      {props.isMailAllSelect.fullSelect && (\r\n                        <img className=\"image\" src={Agree} />\r\n                      )}\r\n                      <label id=\"allSelect\"></label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"station-filter\">\r\n                    <div\r\n                      ref={closeWinRef}\r\n                      style={{\r\n                        fontSize: \"medium\",\r\n                        marginTop: \"3px\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setOperateMarkReadUnread(\r\n                          (operateMarkReadUnread) => !operateMarkReadUnread\r\n                        );\r\n                        operateStationList\r\n                          ? setOperateStationList(false)\r\n                          : setOperateStationList(false);\r\n                      }}\r\n                    >\r\n                      <em\r\n                        style={{ fontSize: 15 }}\r\n                        className=\"ni ni-downward-alt-fill\"\r\n                      ></em>\r\n                    </div>\r\n\r\n                    {operateMarkReadUnread && (\r\n                      <div\r\n                        ref={closeWinRef}\r\n                        className=\"station-filter-dropdown\"\r\n                        style={{ left: \"-12px\", zIndex: \"9\" }}\r\n                      >\r\n                        <ul className=\"link-tidy\">\r\n                          {props?.filterOptions?.mail_action !==\r\n                            MAIL_ACTIONS.READ && (\r\n                            <li onClick={() => readUnread(1)}>Mark as Read</li>\r\n                          )}\r\n\r\n                          <li onClick={() => readUnread(0)}>Mark as Unread</li>\r\n                          {props?.filterOptions?.mail_action ===\r\n                            MAIL_ACTIONS.UNREAD && (\r\n                            <li onClick={() => readUnread(1, true)}>\r\n                              Move to Archive\r\n                            </li>\r\n                          )}\r\n\r\n                          <li\r\n                            className=\"add-to-folder\"\r\n                            onClick={() => {\r\n                              props?.selectedMail?.length > 0 &&\r\n                                setAddToFolder((addToFolder) => !addToFolder);\r\n                            }}\r\n                          >\r\n                            Add to Folder\r\n                            <em\r\n                              className=\"icon ni ni-forward-alt-fill\"\r\n                              style={{ fontSize: 17 }}\r\n                            ></em>\r\n                          </li>\r\n                          <li\r\n                            onClick={() => {\r\n                              props?.selectedMail?.length > 0 &&\r\n                                setOperateForwardTo(\r\n                                  (operateForwardTo) => !operateForwardTo\r\n                                );\r\n                            }}\r\n                          >\r\n                            Forward to\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </li>\r\n              )}\r\n            <li>\r\n              <abbr\r\n                title={\r\n                  props?.isActiveModule === \"Unread\"\r\n                    ? \"Refresh For New Mails\"\r\n                    : \"Refresh\"\r\n                }\r\n              >\r\n                <div\r\n                  className=\"btn btn-icon btn-trigger\"\r\n                  onClick={() => handleRefreshClick(\"refresh\")}\r\n                >\r\n                  <em className=\"icon ni ni-undo\"></em>\r\n                </div>\r\n              </abbr>\r\n            </li>\r\n            {/* <li className=\"mr-n1\">\r\n              <div className=\"my-dropdown\">\r\n                <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                  <em className=\"icon ni ni-sort-line\"></em>\r\n                </div>\r\n                <div\r\n                  className=\"dropdown-content\"\r\n                  style={{ overflow: \"auto\", zIndex: 4 }}\r\n                >\r\n                  <ul className=\"nk-ibx-label\" style={{ cursor: \"pointer\" }}>\r\n                    <li\r\n                      onClick={() => {\r\n                        handleSortClick(\"createdAt\");\r\n                      }}\r\n                    >\r\n                      <a>\r\n                        {sortTimeState ? (\r\n                          <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                        ) : (\r\n                          <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                        )}\r\n                        <span className=\"nk-ibx-label-text nk-ibx-label-text-width\">\r\n                          Sort By Time\r\n                        </span>\r\n                      </a>\r\n                    </li>\r\n                    <li\r\n                      onClick={() => {\r\n                        handleSortClick(\"op\");\r\n                      }}\r\n                    >\r\n                      <a>\r\n                        {sortOpState ? (\r\n                          <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                        ) : (\r\n                          <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                        )}\r\n                        <span className=\"nk-ibx-label-text nk-ibx-label-text-width\">\r\n                          Sort By OP\r\n                        </span>\r\n                      </a>\r\n                    </li>\r\n                    <li\r\n                      onClick={() => {\r\n                        handleSortClick(\"branch\");\r\n                      }}\r\n                    >\r\n                      <a>\r\n                        {sortFromState ? (\r\n                          <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                        ) : (\r\n                          <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                        )}\r\n                        <span className=\"nk-ibx-label-text nk-ibx-label-text-width \">\r\n                          Sort By Branch\r\n                        </span>\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </li> */}\r\n\r\n            {\r\n              <li className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                <div className=\"station-filter\">\r\n                  <div\r\n                    ref={closeWinRef}\r\n                    style={{\r\n                      fontSize: \"medium\",\r\n                      paddingLeft: \"8px\",\r\n                      marginTop: \"3px\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setOperateStationList(\r\n                        (operateStationList) => !operateStationList\r\n                      );\r\n                      operateMarkReadUnread\r\n                        ? setOperateMarkReadUnread(false)\r\n                        : setOperateMarkReadUnread(false);\r\n                    }}\r\n                  >\r\n                    <abbr title=\"Station List\">\r\n                      Station\r\n                      <em\r\n                        style={{ fontSize: 15 }}\r\n                        className=\"ni ni-downward-alt-fill\"\r\n                      ></em>\r\n                    </abbr>\r\n                  </div>\r\n\r\n                  {operateStationList && (\r\n                    <div className=\"station-filter-dropdown\" ref={closeWinRef}>\r\n                      <div className=\"input-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control border-right-0 rounded-0 search-input\"\r\n                          placeholder=\"Search stations...\"\r\n                          name=\"search\"\r\n                          autoComplete=\"off\"\r\n                          onChange={(e) => {\r\n                            setSearchInStation(e.target.value);\r\n                          }}\r\n                          style={{ height: \"auto\" }}\r\n                        />\r\n                        <div className=\"input-group-btn search-button-div\">\r\n                          <button\r\n                            className=\"btn btn-default border border-left-0 rounded-0 search-button\"\r\n                            type=\"submit\"\r\n                          >\r\n                            <em className=\"icon ni ni-search search-button-em\"></em>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"station-filter-dropdown-list\">\r\n                        <ul className=\"link-tidy\">\r\n                          <div style={{ borderBottom: \"1px solid lightgray\" }}>\r\n                            <li style={{ display: \"flex\", minWidth: 180 }}>\r\n                              <div\r\n                                id=\"ResetAll\"\r\n                                style={{\r\n                                  padding: \"0px 5px\",\r\n                                }}\r\n                                onClick={handleCheckedStation}\r\n                              >\r\n                                Clear All\r\n                              </div>\r\n                              <hr\r\n                                style={{\r\n                                  height: 20,\r\n                                  margin: \"0px 5px\",\r\n                                  border: \"1px solid lightgray\",\r\n                                }}\r\n                              />\r\n                              <div\r\n                                id=\"SelectAll\"\r\n                                style={{\r\n                                  padding: \"0px 5px\",\r\n                                }}\r\n                                onClick={handleCheckedStation}\r\n                              >\r\n                                Select All\r\n                              </div>\r\n                            </li>\r\n                          </div>\r\n\r\n                          {filteredList(stationList, searchInStation).map(\r\n                            (stat, i) => {\r\n                              return (\r\n                                <>\r\n                                  {stat?.station !== \"null\" ? (\r\n                                    <li key={`stationList${i}`}>\r\n                                      <div className=\"custom-control custom-control-sm custom-checkbox\">\r\n                                        <input\r\n                                          type=\"checkbox\"\r\n                                          className=\"custom-control-input station_checkbox_1\"\r\n                                          id={`${stat?.id}`}\r\n                                          name={stat?.station}\r\n                                          onChange={handleCheckedStation}\r\n                                          checked={\r\n                                            props?.selectedStation.includes(\r\n                                              stat?.id\r\n                                            )\r\n                                              ? true\r\n                                              : false\r\n                                          }\r\n                                        />\r\n                                        <label\r\n                                          className=\"custom-control-label\"\r\n                                          htmlFor={`${stat?.id}`}\r\n                                        >\r\n                                          {stat?.station}\r\n                                        </label>\r\n                                      </div>\r\n                                    </li>\r\n                                  ) : null}\r\n                                </>\r\n                              );\r\n                            }\r\n                          )}\r\n                        </ul>\r\n                      </div>\r\n                      <div className=\"station-filter-bottom\">\r\n                        <Button\r\n                          onClick={handleStationSubmit}\r\n                          className=\"station-filter-submit\"\r\n                          disabled={disableStationSubmit}\r\n                        >\r\n                          Submit\r\n                        </Button>\r\n                        <Button\r\n                          onClick={handleCancel}\r\n                          style={{ backgroundColor: \"#d02121\" }}\r\n                          className=\"station-filter-submit\"\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </li>\r\n            }\r\n          </ul>\r\n        </div>\r\n        <div\r\n          style={{\r\n            width: \"30%\",\r\n            position: \"fixed\",\r\n            right: 0,\r\n          }}\r\n        >\r\n          <ul className=\"nk-ibx-head-tools g-1\">\r\n            <li>\r\n              <form\r\n                className=\"navbar-form search-navbar-head\"\r\n                onSubmit={searchMail}\r\n              >\r\n                <div className=\"input-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control border-right-0 rounded-0 search-input\"\r\n                    placeholder={`Search in ${sectionName} mails`}\r\n                    name=\"search\"\r\n                    value={search?.search}\r\n                    onChange={handleSearch}\r\n                    style={{\r\n                      height: \"auto\",\r\n                    }}\r\n                  />\r\n                  <div className=\"input-group-btn search-button-div\">\r\n                    <button\r\n                      className=\"btn btn-default border border-left-0 rounded-0 search-button\"\r\n                      type=\"submit\"\r\n                    >\r\n                      <em className=\"icon ni ni-search search-button-em\"></em>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </li>\r\n\r\n            {props?.isLoadingForCount ? (\r\n              <li\r\n                style={{\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Loader\r\n                  type=\"ThreeDots\"\r\n                  color=\"#6576ff\"\r\n                  height={30}\r\n                  width={30}\r\n                />\r\n              </li>\r\n            ) : (\r\n              <>\r\n                <li className=\"d-none d-sm-block ml-n5\">\r\n                  <div\r\n                    className={`btn btn-icon btn-trigger btn-tooltip ${\r\n                      props.total > props.mailDataLength &&\r\n                      !props?.loader &&\r\n                      props?.disablePreviousNext.previous\r\n                        ? \"\"\r\n                        : \"disabled-action\"\r\n                    }`}\r\n                  >\r\n                    <em\r\n                      className=\"icon ni ni-chevron-left\"\r\n                      onClick={(e) => {\r\n                        props.getPrevClick(e);\r\n                      }}\r\n                    ></em>\r\n                  </div>\r\n                </li>\r\n\r\n                <li>\r\n                  {props?.total}/{props?.noOfMails}\r\n                </li>\r\n\r\n                <li className=\"d-none d-sm-block\">\r\n                  <div\r\n                    className={`btn btn-icon btn-trigger btn-tooltip ${\r\n                      props.total < props.noOfMails &&\r\n                      !props?.loader &&\r\n                      props?.disablePreviousNext.next\r\n                        ? \"\"\r\n                        : \"disabled-action\"\r\n                    }`}\r\n                  >\r\n                    <em\r\n                      className=\"icon ni ni-chevron-right\"\r\n                      onClick={() => {\r\n                        props.getNextClick();\r\n                      }}\r\n                    ></em>\r\n                  </div>\r\n                </li>\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n        <div className=\"search-wrap\" data-search=\"search\">\r\n          <div className=\"search-content\">\r\n            <a\r\n              className=\"search-back btn btn-icon toggle-search\"\r\n              data-target=\"search\"\r\n            >\r\n              <em className=\"icon ni ni-arrow-left\"></em>\r\n            </a>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control border-transparent form-focus-none\"\r\n              placeholder=\"Search by user or message\"\r\n            />\r\n            <button className=\"search-submit btn btn-icon\">\r\n              <em className=\"icon ni ni-search\"></em>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"search-station-tags\"\r\n        style={{\r\n          paddingBottom:\r\n            props?.stationTag?.length > 0 || tag?.length > 0 ? \"1.5%\" : \"\",\r\n        }}\r\n      >\r\n        {props?.stationTag?.length > 0 &&\r\n          props?.stationTag?.map((stat, i) => {\r\n            return (\r\n              <div className=\"search-tag\" key={`props?.stationTag${i}`}>\r\n                <ul className=\"nk-ibx-tags g-1\">\r\n                  <li className=\"btn-group is-tags\">\r\n                    <a className=\"btn btn-xs btn btn-dim\">\r\n                      {props.filterOptions.is_sent !== 1\r\n                        ? `From: ${stat}`\r\n                        : `To: ${stat}`}\r\n                    </a>\r\n                    <a className=\"btn btn-xs btn-icon btn btn-dim\">\r\n                      <em\r\n                        className=\"icon ni ni-cross\"\r\n                        onClick={() => deleteStationTag(stat)}\r\n                      ></em>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            );\r\n          })}\r\n\r\n        {props.searchText.hasOwnProperty(\"searchData\") &&\r\n          Object.values(props.searchText.searchData).map((data, i) => {\r\n            return (\r\n              <div className=\"search-tag\" key={`${data}-${i}`}>\r\n                <ul className=\"nk-ibx-tags g-1\">\r\n                  <li className=\"btn-group is-tags\">\r\n                    <a className=\"btn btn-xs btn btn-dim\">{data}</a>\r\n                    <a\r\n                      className=\"btn btn-xs btn-icon btn btn-dim\"\r\n                      onClick={() => deleteSeachKey(data)}\r\n                    >\r\n                      <em className=\"icon ni ni-cross\"></em>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            );\r\n          })}\r\n        {props?.stationTag?.length > 0 && (\r\n          <div className=\"search-tag\">\r\n            <ul className=\"nk-ibx-tags g-1\">\r\n              <li className=\"btn-group is-tags\">\r\n                <a className=\"btn btn-xs btn btn-dim\">Clear All</a>\r\n                <a className=\"btn btn-xs btn-icon btn btn-dim\">\r\n                  <em\r\n                    className=\"icon ni ni-cross\"\r\n                    onClick={clearAllStationTag}\r\n                  ></em>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateData,\r\n  updateSeachText,\r\n  updateUnreadCall,\r\n  updateUnreadMailsCount,\r\n  updateArchiveCall,\r\n  updateAllCall,\r\n  updateSentCall,\r\n  updateCrashedCall,\r\n  updateStarredCall,\r\n  updateFolderCachedData,\r\n  updateArchiveLoader,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data,\r\n  userData: state.userData,\r\n  searchText: state.searchText,\r\n  isActiveModule: state.isActiveModule,\r\n  folderCachedData: state.folderCachedData,\r\n});\r\nexport default connect(mapStateToProps, mapActionToProps)(InboxNavbar);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\components\\Viewsearchbar.jsx",["479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516"],"import { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GET_LIST_STATIONS } from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport {\r\n  updateData,\r\n  updateSeachText,\r\n  updateFilterOptions,\r\n  updateStationList,\r\n  updateSortFilter,\r\n} from \"../../redux/action/InboxAction\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\n\r\nconst Viewsearchbar = (props) => {\r\n  const [searchData, setSearchData] = useState({});\r\n  const [sortTimeState, setSortTimeState] = useState(false);\r\n  const [sortOpState, setSortOpState] = useState(false);\r\n  const [sortFromState, setSortFromState] = useState(false);\r\n  const [tagData, setTagData] = useState({});\r\n  const [search, setSearch] = useState({});\r\n  const [tag, setTag] = useState([]);\r\n  const [stationList, setStationList] = useState([]);\r\n  const [stationTag, setStationTag] = useState([]);\r\n  const [test, setTest] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) {\r\n      if (props?.selected !== \"sent\") {\r\n        getListOfStations();\r\n      }\r\n    }\r\n  }, [props?.selected]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(props.userData).length) {\r\n      if (props?.selected !== \"sent\") {\r\n        getListOfStations();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getkeyValue(\"reset\");\r\n    if (props?.searchText?.searchData?.length > 0) {\r\n      props?.updateSeachText({});\r\n    }\r\n    if (props?.station?.length) {\r\n      props?.updateStationList([]);\r\n    }\r\n  }, [props?.isActiveModule3Column]);\r\n\r\n  useEffect(() => {\r\n    let arr = props.sortFilter.split(\"=\");\r\n    let order = arr[1] == \"ASC\" ? true : false;\r\n    switch (arr[0]) {\r\n      case \"createdAt\":\r\n        setSortTimeState(order);\r\n        break;\r\n      case \"op\":\r\n        setSortOpState(order);\r\n        break;\r\n      case \"branch\":\r\n        setSortFromState(order);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [props.sortFilter]);\r\n\r\n  // const handleChange = (event) => {\r\n  //   const inputData = { ...searchData };\r\n  //   inputData[event.target.name] = event.target.value;\r\n\r\n  //   if (event.target.value.length > 0) {\r\n  //     setSearchData(inputData);\r\n  //     setTagData(inputData);\r\n  //   } else setSearchData({});\r\n  // };\r\n\r\n  const handleSearch = (event) => {\r\n    const inputData = { ...search };\r\n    inputData[event.target.name] = event.target.value;\r\n    // console.log(inputData);\r\n    if (event.target.value.length > 0) {\r\n      setSearch(inputData);\r\n    } else setSearch(\"\");\r\n  };\r\n\r\n  const searchMail = (event) => {\r\n    event.preventDefault();\r\n    let exists = Object.values(search).includes(\"\");\r\n\r\n    if (!exists && Object.keys(search).length !== 0) {\r\n      const _searchText = { ...props.searchText };\r\n      const _searchData = _searchText.hasOwnProperty(\"searchData\")\r\n        ? _searchText.searchData\r\n        : [];\r\n\r\n      const _tag = Object.values(search).map((data) => data);\r\n      if (_searchData.includes(..._tag)) {\r\n        Toaster(\"error\", \"Same data already exists\");\r\n\r\n        setSearch({ search: \"\" });\r\n        return;\r\n      }\r\n\r\n      _searchText[\"searchData\"] = [..._searchData, ..._tag];\r\n\r\n      props.updateSeachText(_searchText);\r\n      setTag([..._searchData, ..._tag]);\r\n      setSearch({ search: \"\" });\r\n\r\n      if (_searchText.searchData.length > 0) {\r\n        // const searchData = [...tag, ..._tag].join();\r\n\r\n        props.updateFilterOptions({\r\n          ...props.filterOptions,\r\n          search_data: _searchText.searchData,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteSeachKey = (deletedData) => {\r\n    const _searchText = { ...props.searchText };\r\n    if (_searchText?.searchData?.length > 0) {\r\n      const _tag = [..._searchText.searchData];\r\n      const index = _tag.indexOf(deletedData);\r\n      _tag.splice(index, 1);\r\n\r\n      _searchText[\"searchData\"] = _tag;\r\n      props.updateSeachText(_searchText);\r\n      setTag(_tag);\r\n      props.updateFilterOptions({\r\n        ...props.filterOptions,\r\n        search_data: [..._tag].join(),\r\n      });\r\n    } else {\r\n      // delete props.filterOptions.search_data;\r\n      props.updateFilterOptions({ ...props.filterOptions });\r\n    }\r\n  };\r\n\r\n  const getkeyValue = (reset) => {\r\n    if (reset === \"reset\") {\r\n      var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n      let arr_key = [];\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        if (inputs[i].type === \"checkbox\") {\r\n          inputs[i].checked = false;\r\n        }\r\n      }\r\n      setStationTag([]);\r\n      return arr_key;\r\n    } else if (reset === \"select\") {\r\n      var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n      let arr_key = [];\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        if (inputs[i].type === \"checkbox\") {\r\n          inputs[i].checked = true;\r\n          arr_key.push(inputs[i].id);\r\n        }\r\n      }\r\n      return arr_key;\r\n    } else {\r\n      var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n      let arr_key = [];\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        if (inputs[i].checked) {\r\n          arr_key.push(inputs[i].id);\r\n        }\r\n      }\r\n      return arr_key;\r\n    }\r\n  };\r\n\r\n  const handleChecked = (e) => {\r\n    if (e !== undefined) {\r\n      const target = e.target;\r\n      var id = target.id;\r\n    }\r\n    var arr = [];\r\n    if (id === \"ResetAll\") {\r\n      getkeyValue(\"reset\");\r\n      props?.updateStationList([]);\r\n    } else if (id === \"SelectAll\") {\r\n      let key_selected = getkeyValue(\"select\");\r\n      stationList?.map((stat, i) => {\r\n        for (let i = 0; i < key_selected.length; i++) {\r\n          if (stat?.id == key_selected[i]) {\r\n            arr.push(stat?.station);\r\n          }\r\n        }\r\n        setStationTag(arr);\r\n      });\r\n      props?.updateStationList(key_selected);\r\n    } else if (e === undefined) {\r\n      let key_selected = getkeyValue();\r\n      stationList?.map((stat, i) => {\r\n        for (let i = 0; i < key_selected.length; i++) {\r\n          if (stat?.id == key_selected[i]) {\r\n            arr.push(stat?.station);\r\n          }\r\n        }\r\n        setStationTag(arr);\r\n      });\r\n      props?.updateStationList(key_selected);\r\n    } else {\r\n      let key_selected = getkeyValue();\r\n      stationList?.map((stat, i) => {\r\n        for (let i = 0; i < key_selected.length; i++) {\r\n          if (stat?.id == key_selected[i]) {\r\n            arr.push(stat?.station);\r\n          }\r\n        }\r\n        setStationTag(arr);\r\n      });\r\n      props?.updateStationList(key_selected);\r\n    }\r\n  };\r\n\r\n  const filterCheck = (selectedOption) => {\r\n    let filter = \"\";\r\n    if (typeof selectedOption === \"string\") {\r\n      switch (selectedOption) {\r\n        case \"unread\":\r\n          filter = \"&is_read=0\";\r\n          break;\r\n        case \"archive\":\r\n          filter = \"\";\r\n          break;\r\n        case \"sent\":\r\n          filter = \"&is_sent=1\";\r\n          break;\r\n        case \"crashed\":\r\n          filter = \"&is_crashed=0&is_crashed=1\";\r\n          break;\r\n        case \"starred\":\r\n          filter = \"&is_starred=1\";\r\n          break;\r\n\r\n        default:\r\n          filter = \"\";\r\n      }\r\n    } else {\r\n      filter = `&folder=${selectedOption}`;\r\n    }\r\n    return filter;\r\n  };\r\n\r\n  const getListOfStations = async () => {\r\n    let filter = filterCheck(props?.selected);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_LIST_STATIONS}${props?.userData?.designations[0]?.id}${filter}`,\r\n      \"\",\r\n      \"GET\"\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const station = [];\r\n      resp?.data?.map((stat) => {\r\n        let obj = {\r\n          id: stat?.id,\r\n          station: stat?.station,\r\n          checked: false,\r\n        };\r\n        for (let i = 0; i < props?.station.length; i++) {\r\n          if (obj.id == props?.station[i]) {\r\n            obj.checked = true;\r\n          }\r\n        }\r\n        station.push(obj);\r\n      });\r\n      setStationList(station);\r\n    } else {\r\n      Toaster(\"error\", \"Couldn't get list of stations\");\r\n    }\r\n  };\r\n\r\n  // const handleSortClick = async (sort) => {\r\n  //   if (sort === \"createdAt\") {\r\n  //     if (sortTimeState) {\r\n  //       props?.updateSortFilter(`${sort}=DESC`);\r\n  //       setSortTimeState(false);\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(false);\r\n  //     } else {\r\n  //       props?.updateSortFilter(`${sort}=ASC`);\r\n  //       setSortFromState(false);\r\n  //       setSortTimeState(true);\r\n  //       setSortOpState(false);\r\n  //     }\r\n  //   } else if (sort === \"op\") {\r\n  //     if (sortOpState) {\r\n  //       props?.updateSortFilter(`${sort}=DESC`);\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(false);\r\n  //       setSortTimeState(false);\r\n  //     } else {\r\n  //       props?.updateSortFilter(`${sort}=ASC`);\r\n  //       setSortFromState(false);\r\n  //       setSortOpState(true);\r\n  //       setSortTimeState(false);\r\n  //     }\r\n  //   } else {\r\n  //     if (sortFromState) {\r\n  //       props?.updateSortFilter(`${sort}=DESC`);\r\n  //       setSortFromState(false);\r\n  //       setSortTimeState(false);\r\n  //       setSortOpState(false);\r\n  //     } else {\r\n  //       props?.updateSortFilter(`${sort}=ASC`);\r\n  //       setSortFromState(true);\r\n  //       setSortTimeState(false);\r\n  //       setSortOpState(false);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleRefreshClick = () => {\r\n    props?.getAllMails(props?.selected);\r\n  };\r\n\r\n  const defaultSelect = () => {\r\n    var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n    // setStationListLength(inputs.length);\r\n    let prev = 0;\r\n    for (var i = 0; i < inputs.length; i++) {\r\n      if (inputs[i].type === \"checkbox\") {\r\n        inputs[i].checked = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteStationTag = (index) => {\r\n    var inputs = document.querySelectorAll(\".station_checkbox_1\");\r\n    let statId;\r\n    stationList.map((stat) => {\r\n      if (stat?.station == index) {\r\n        statId = stat?.id;\r\n      }\r\n    });\r\n    for (var i = 0; i < inputs.length; i++) {\r\n      if (inputs[i].checked) {\r\n        if (inputs[i]?.id == statId) {\r\n          inputs[i].checked = false;\r\n        }\r\n      }\r\n    }\r\n    setStationTag(stationTag.filter((item) => item != index));\r\n    handleChecked();\r\n  };\r\n\r\n  const clearAllStationTag = () => {\r\n    getkeyValue(\"reset\");\r\n    props?.updateStationList([]);\r\n    // setTag([]);\r\n    props?.updateSeachText({});\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"nk-ibx-head\"\r\n        style={{\r\n          borderRight: \"0px\",\r\n          borderBottom: \"0px\",\r\n        }}\r\n      >\r\n        <div className=\"nk-ibx-head-actions\" style={{ width: \"100%\" }}>\r\n          <ul\r\n            className=\"nk-ibx-head-tools g-1 ul-list-header\"\r\n            style={{ width: \"inherit\" }}\r\n          >\r\n            {props?.component !== \"inbox\" ? (\r\n              <li className=\"d-none d-md-block li-list-header-left\">\r\n                <form\r\n                  className=\"navbar-form search-navbar-head\"\r\n                  role=\"search\"\r\n                  onSubmit={searchMail}\r\n                >\r\n                  <div className=\"input-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control border-right-0 rounded-0 search-input\"\r\n                      style={{ height: \"auto\" }}\r\n                      placeholder={`Search in ${props?.isActiveModule3Column}`}\r\n                      name=\"search\"\r\n                      value={search?.search}\r\n                      onChange={handleSearch}\r\n                    />\r\n                    <div className=\"input-group-btn search-button-div\">\r\n                      <button\r\n                        className=\"btn btn-default border border-left-0 rounded-0 search-button\"\r\n                        type=\"submit\"\r\n                      >\r\n                        <em className=\"icon ni ni-search search-button-em\"></em>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </li>\r\n            ) : (\r\n              <>\r\n                {props?.selected !== \"sent\" && (\r\n                  <>\r\n                    <li className=\"li-list-header-left\">\r\n                      <div\r\n                        className=\"btn btn-icon btn-trigger\"\r\n                        onClick={handleRefreshClick}\r\n                      >\r\n                        <em className=\"icon ni ni-undo\"></em>\r\n                      </div>\r\n                    </li>\r\n                    {/* <li className=\"mr-n1 li-list-header-left\">\r\n                      <div className=\"my-dropdown\">\r\n                        <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                          <em className=\"icon ni ni-sort-line\"></em>\r\n                        </div>\r\n                        <div\r\n                          className=\"dropdown-content\"\r\n                          style={{ overflow: \"auto\", zIndex: 4 }}\r\n                        >\r\n                          <ul\r\n                            className=\"nk-ibx-label\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                          >\r\n                            <li\r\n                              onClick={() => {\r\n                                handleSortClick(\"createdAt\");\r\n                              }}\r\n                            >\r\n                              <a>\r\n                                {sortTimeState ? (\r\n                                  <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                                ) : (\r\n                                  <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                                )}\r\n                                <span className=\"nk-ibx-label-text nk-ibx-label-text-width\">\r\n                                  Sort By Time\r\n                                </span>\r\n                              </a>\r\n                            </li>\r\n                            <li\r\n                              onClick={() => {\r\n                                handleSortClick(\"op\");\r\n                              }}\r\n                            >\r\n                              <a>\r\n                                {sortOpState ? (\r\n                                  <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                                ) : (\r\n                                  <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                                )}\r\n                                <span className=\"nk-ibx-label-text nk-ibx-label-text-width\">\r\n                                  Sort By OP\r\n                                </span>\r\n                              </a>\r\n                            </li>\r\n                            <li\r\n                              onClick={() => {\r\n                                handleSortClick(\"branch\");\r\n                              }}\r\n                            >\r\n                              <a>\r\n                                {sortFromState ? (\r\n                                  <em className=\"ni ni-downward-ios icon-size-reduced\"></em>\r\n                                ) : (\r\n                                  <em className=\"ni ni-upword-ios icon-size-reduced\"></em>\r\n                                )}\r\n                                <span className=\"nk-ibx-label-text nk-ibx-label-text-width \">\r\n                                  Sort By Branch\r\n                                </span>\r\n                              </a>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </li> */}\r\n\r\n                    <li className=\"btn btn-trigger btn-icon btn-tooltip li-list-header-left\">\r\n                      <div className=\"station-filter\">\r\n                        <div\r\n                          style={{\r\n                            fontSize: \"14px\",\r\n                            padding: \"5px 5px\",\r\n                            margin: \"-5px 0px\",\r\n                          }}\r\n                        >\r\n                          Station\r\n                          <em\r\n                            style={{ fontSize: 12 }}\r\n                            className=\"ni ni-downward-alt-fill\"\r\n                          ></em>\r\n                        </div>\r\n\r\n                        <div\r\n                          className=\"station-filter-dropdown\"\r\n                          style={{ marginTop: 6, left: -13 }}\r\n                        >\r\n                          <ul className=\"link-tidy\">\r\n                            <div\r\n                              style={{ borderBottom: \"1px solid lightgray\" }}\r\n                            >\r\n                              <li\r\n                                style={{ display: \"flex\", minWidth: \"170px\" }}\r\n                              >\r\n                                <div\r\n                                  id=\"ResetAll\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"center\",\r\n                                  }}\r\n                                  onClick={handleChecked}\r\n                                >\r\n                                  Clear All\r\n                                </div>\r\n                                <hr\r\n                                  style={{\r\n                                    height: 20,\r\n                                    margin: \"0px 10px\",\r\n                                    border: \"1px solid lightgray\",\r\n                                  }}\r\n                                />\r\n                                <div\r\n                                  id=\"SelectAll\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"center\",\r\n                                  }}\r\n                                  onClick={handleChecked}\r\n                                >\r\n                                  Select All\r\n                                </div>\r\n                              </li>\r\n                            </div>\r\n\r\n                            {stationList.map((stat, i) => {\r\n                              return (\r\n                                <li key={`stationList${i}`}>\r\n                                  <div className=\"custom-control custom-control-sm custom-checkbox\">\r\n                                    <input\r\n                                      type=\"checkbox\"\r\n                                      className=\"custom-control-input station_checkbox_1\"\r\n                                      id={`${stat?.id}`}\r\n                                      onChange={handleChecked}\r\n                                      // checked={stat.checked}\r\n                                    />\r\n                                    <label\r\n                                      className=\"custom-control-label\"\r\n                                      htmlFor={`${stat?.id}`}\r\n                                    >\r\n                                      {stat?.station}\r\n                                    </label>\r\n                                  </div>\r\n                                </li>\r\n                              );\r\n                            })}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  </>\r\n                )}\r\n                <li\r\n                  className=\"li-list-header-right\"\r\n                  style={{ marginLeft: \"auto\" }}\r\n                >\r\n                  <ul className=\"nk-ibx-head-tools g-1 ul-list-header\">\r\n                    {\r\n                      <li className=\"d-none d-sm-block\">\r\n                        <div\r\n                          className={`btn btn-icon btn-trigger btn-tooltip ${\r\n                            props.total > props.mailDataLength\r\n                              ? \"\"\r\n                              : \"disabled-action\"\r\n                          }`}\r\n                          title=\"Prev\"\r\n                        >\r\n                          <em\r\n                            className=\"icon ni ni-chevron-left\"\r\n                            onClick={() => {\r\n                              props.getPrevClick();\r\n                            }}\r\n                          ></em>\r\n                        </div>\r\n                      </li>\r\n                    }\r\n                    <li style={{ marginRight: 5 }}>\r\n                      {props?.total}/{props?.totalMails}\r\n                    </li>\r\n\r\n                    <li className=\"d-none d-sm-block\">\r\n                      <div\r\n                        className={`btn btn-icon btn-trigger btn-tooltip ${\r\n                          props.total < props.totalMails\r\n                            ? \"\"\r\n                            : \"disabled-action\"\r\n                        }`}\r\n                        title=\"Next\"\r\n                      >\r\n                        <em\r\n                          className=\"icon ni ni-chevron-right\"\r\n                          onClick={() => {\r\n                            props.getNextClick(props.mailDataLength);\r\n                          }}\r\n                        ></em>\r\n                      </div>\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div style={{ display: \"flex\", width: \"97%\", overflowX: \"auto\" }}>\r\n        {props?.component === \"inbox\" && props?.selected !== \"sent\" && (\r\n          <div className=\"search-station-tags\">\r\n            {stationTag?.length > 0 &&\r\n              stationTag?.map((stat, i) => {\r\n                return (\r\n                  <div className=\"search-tag\" key={`stationTag${i}`}>\r\n                    <ul className=\"nk-ibx-tags g-1\">\r\n                      <li className=\"btn-group is-tags\">\r\n                        <a className=\"btn btn-xs btn btn-dim\">{stat}</a>\r\n                        <a className=\"btn btn-xs btn-icon btn btn-dim\">\r\n                          <em\r\n                            className=\"icon ni ni-cross\"\r\n                            onClick={() => deleteStationTag(stat)}\r\n                          ></em>\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                );\r\n              })}\r\n            {/* {stationTag?.length > 0 && (\r\n            <div className=\"search-tag\">\r\n              <ul className=\"nk-ibx-tags g-1\">\r\n                <li className=\"btn-group is-tags\">\r\n                  <a className=\"btn btn-xs btn btn-dim\">Clear All</a>\r\n                  <a className=\"btn btn-xs btn-icon btn btn-dim\">\r\n                    <em\r\n                      className=\"icon ni ni-cross\"\r\n                      onClick={clearAllStationTag}\r\n                    ></em>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          )} */}\r\n          </div>\r\n        )}\r\n\r\n        {props?.component === \"inbox\" &&\r\n          props.searchText.hasOwnProperty(\"searchData\") &&\r\n          Object.keys(props.searchText.searchData).length > 0 && (\r\n            <div>\r\n              <div\r\n                className=\"nk-ibx-head\"\r\n                style={{ padding: \"0.5px 0px\", borderRight: 0 }}\r\n              >\r\n                {Object.values(props.searchText.searchData).map((data, i) => {\r\n                  return (\r\n                    <div className=\"search-tag\" key={`${data}-${i}`}>\r\n                      <ul className=\"nk-ibx-tags g-1\">\r\n                        <li className=\"btn-group is-tags\">\r\n                          <a className=\"btn btn-xs btn btn-dim\">{data}</a>\r\n                          <a\r\n                            className=\"btn btn-xs btn-icon btn btn-dim\"\r\n                            onClick={() => deleteSeachKey(data)}\r\n                          >\r\n                            <em className=\"icon ni ni-cross\"></em>\r\n                          </a>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        {props?.component === \"inbox\" && stationTag?.length > 0 && (\r\n          <div className=\"search-tag\">\r\n            <ul className=\"nk-ibx-tags g-1\">\r\n              <li className=\"btn-group is-tags\">\r\n                <a className=\"btn btn-xs btn btn-dim\">Clear All</a>\r\n                <a className=\"btn btn-xs btn-icon btn btn-dim\">\r\n                  <em\r\n                    className=\"icon ni ni-cross\"\r\n                    onClick={clearAllStationTag}\r\n                  ></em>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateData,\r\n  updateSeachText,\r\n  updateFilterOptions,\r\n  updateStationList,\r\n  updateSortFilter,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data,\r\n  userData: state.userData,\r\n  searchText: state.searchText,\r\n  station: state.station,\r\n  sortFilter: state.sortFilter,\r\n  isActiveModule3Column: state.isActiveModule3Column,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Viewsearchbar);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Viewcommentbox.jsx",["517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557"],"import { useState, useEffect, useRef } from \"react\";\r\n// import { useReactToPrint } from \"react-to-print\";\r\nimport { connect } from \"react-redux\";\r\nimport Select from \"react-select\";\r\n// import ReactToPrint from \"react-to-print\";\r\nimport Commentbox from \"../../views/Commentbox\";\r\nimport PrintView from \"../../components/print/printView\";\r\nimport Axios from \"axios\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { renderImage } from \"../../components/common/renderImage\";\r\n\r\nimport {\r\n  GET_MAIL_BY_ID,\r\n  UPDATE_MAIL,\r\n  GET_LIST_DESIGNATION,\r\n  COMMENT_ON_MAIL,\r\n  LOGS_ADD,\r\n  GET_PRE_DEFINED_COMMENTS,\r\n  FREQUENT_ADDRESSES,\r\n  GET_COMMENTS,\r\n  ANNOTATION_ADD,\r\n} from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { formatDate } from \"../../util/dateFormat/DateFormat\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport Loading from \"../../util/loader/Loading\";\r\nimport MailBody from \"./../../views/mailview/MailBody\";\r\nimport Track from \"./../../components/common/track\";\r\nimport MailMarginComments from \"../../views/mailview/MailMarginComments\";\r\nimport { PostHighlight } from \"../../components/common/annotation\";\r\n\r\n// import Topreplaybuttons from \"../../views/Topreplaybuttons\";\r\n\r\nconst usePrevious = (value) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n};\r\n\r\nconst pageStyle = `\r\n@media print {\r\n  html, body {\r\n    height: initial !important;\r\n    overflow: initial !important;\r\n    -webkit-print-color-adjust: exact;\r\n    color-adjust: exact !important;\r\n  }\r\n  @page {\r\n    size: auto;\r\n    margin: 10pt 10t 20pt 10pt;\r\n  }\r\n  \r\n  @page {\r\n    @bottom-right {\r\n         content: counter(page) \"/\" counter(pages);\r\n     }\r\n  } \r\n}\r\n\r\n@media all {\r\n  .page-break {\r\n    display: none;\r\n  }\r\n}\r\n@page {\r\n  counter-increment: page;\r\n  counter-reset: page 1;\r\n  @top-right {\r\n      content: \"Page \" counter(page) \" of \" counter(pages);\r\n  }\r\n}\r\n`;\r\nlet windowDoc;\r\n\r\nconst Viewcommentbox = (props) => {\r\n  const [isStar, setIsStar] = useState(false);\r\n  const [inputCommentData, setInputCommentData] = useState(\"\");\r\n  const [mailData, setMailData] = useState({});\r\n  const [isTrack, setisTrack] = useState(false);\r\n  const [openPrintcall, setopenPrintcall] = useState(false);\r\n  const [preDefinedComments, setPreDefinedComments] = useState([]);\r\n  const [recentCommentid, setRecentCommentid] = useState(\"\");\r\n  const [generalCommentData, setGeneralCommentData] = useState([]);\r\n  const [commonAddresses, setCommonAddresses] = useState([]);\r\n  const [openFolderList, setOpenFolderList] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [to, setTo] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [allAnnotation, setallAnnotation] = useState([]);\r\n  const [color, setColor] = useState(\"\");\r\n  const [colorID, setColorID] = useState(\"\");\r\n  const [startChar, setStartChar] = useState(\"\");\r\n  const [endChar, setEndChar] = useState(\"\");\r\n  const [selectedAnnotation, setselectedAnnotation] = useState([]);\r\n  const [marginNotesStatic, setmarginNotesStatic] = useState(\"\");\r\n  const [marginButtonStatic, setmarginButtonStatic] = useState(\"\");\r\n  const [usercolorcodeObj, setusercolorcodeObj] = useState({});\r\n  const [selectedData, setselectedData] = useState({});\r\n  const [showAnnotationButtons, setshowAnnotationButtons] = useState(false);\r\n  const [open, setOpen] = useState(\"close\");\r\n  const [annotationText, setAnnotationText] = useState();\r\n  const [annotationDataForPrint, setAnnotationDataForPrint] = useState();\r\n  const [beforeSelectedAnnotation, setBeforeSelectedAnnotation] = useState(\"\");\r\n\r\n  const printRef = useRef();\r\n  const commentBoxRef = useRef();\r\n  const topRef = useRef();\r\n  const commentBoxCommentData = useRef();\r\n  const prevStar = usePrevious(isStar);\r\n  const userData = props?.userData?.designations;\r\n\r\n  const loadIframe = () => {\r\n    setTimeout(() => {\r\n      windowDoc = document.getElementById(\"iframeResult\").contentWindow.window;\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props?.mailId) {\r\n      loadIframe();\r\n      setTo([]);\r\n      setLoading(true);\r\n      getMail(props?.mailId);\r\n\r\n      getPreDefinedComments();\r\n      getCommentData();\r\n      getFrequentAddresses();\r\n      setshowAnnotationButtons(false);\r\n    }\r\n  }, [props.mailId]);\r\n\r\n  useEffect(async () => {\r\n    setBeforeSelectedAnnotation(\"\");\r\n    // setselectedAnnotation([]);\r\n    if (open === \"delete\") {\r\n      setMailData({});\r\n      await getMail(props?.mailId);\r\n      loadIframe();\r\n    }\r\n  }, [open]);\r\n\r\n  useEffect(() => {\r\n    setTo([]);\r\n    // setMailData([]);\r\n  }, [props?.mailId]);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    setMailData({});\r\n  }, [props?.selected]);\r\n\r\n  useEffect(() => {\r\n    setMailData({});\r\n  }, [props?.searchText]);\r\n\r\n  useEffect(() => {\r\n    setMailData({});\r\n  }, [props?.station]);\r\n\r\n  useEffect(async () => {\r\n    if (typeof prevStar !== \"undefined\" && prevStar !== isStar) {\r\n      await updateMail({ is_starred: isStar ? 1 : 0 });\r\n      await getMail(props.mailId);\r\n    }\r\n  }, [isStar]);\r\n\r\n  useEffect(() => {\r\n    annotationData();\r\n  }, [annotationDataForPrint]);\r\n\r\n  const annotationData = () => {\r\n    var anno_text_array = [];\r\n    var obj = {};\r\n    var ary = [];\r\n    var previous = \"\";\r\n    annotationDataForPrint?.map((ann, i) => {\r\n      if (!obj.hasOwnProperty(ann?.anno_text)) {\r\n        obj[`${ann?.anno_text}`] = [ann];\r\n      } else {\r\n        let ann_array = obj[`${ann?.anno_text}`];\r\n        ann_array.push(ann);\r\n        obj[`${ann?.anno_text}`] = ann_array;\r\n      }\r\n      // if (!anno_text_array.includes(ann?.anno_text)) {\r\n      //   anno_text_array.push(ann?.anno_text);\r\n      // }\r\n    });\r\n    setAnnotationText(obj);\r\n  };\r\n\r\n  const Openfolderlist = () => {\r\n    setOpenFolderList(true);\r\n  };\r\n\r\n  const getMail = async (mailId) => {\r\n    const resp = await Api.ApiHandle(`${GET_MAIL_BY_ID}/${mailId}`, \"\", \"GET\");\r\n\r\n    if (resp.status === 1) {\r\n      const data = {\r\n        id: resp.data?.id,\r\n        to: resp.data?.To?.designation,\r\n        toBranch: resp.data?.To?.branch,\r\n        from: resp.data?.From?.designation,\r\n        branch: resp.data?.From?.branch,\r\n        fromId: resp?.data?.From?.id,\r\n        op: resp?.data?.op,\r\n        subject: resp.data?.subject,\r\n        createdAt: formatDate(resp.data?.createdAt),\r\n        folders: resp.data?.Folder,\r\n        body: resp.bodyData?.body,\r\n        is_starred: resp.data?.is_starred,\r\n        isCrashed: resp.data?.is_crashed,\r\n        attachmentList: resp.data?.attachements,\r\n      };\r\n\r\n      data.is_starred === 1 ? setIsStar(true) : setIsStar(false);\r\n      renderImage(data.body).then((res) => {\r\n        data.body = res;\r\n        setMailData(data);\r\n        setopenPrintcall(false);\r\n        if (!loading) {\r\n          setLoading(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    setopenPrintcall(true);\r\n    getMail(props?.mailId);\r\n  };\r\n\r\n  const getListDesignation = async () => {\r\n    const resp = await Api.ApiHandle(`${GET_LIST_DESIGNATION}`, \"\", \"GET\");\r\n\r\n    if (resp?.status === 1) {\r\n      const _options = [];\r\n      resp?.data.forEach((list, i) => {\r\n        if (userData[0]?.id !== list?.id) {\r\n          const options = {\r\n            value: `${list?.designation}-${list?.branch}`,\r\n            label: `${list?.designation}-${list?.branch}`,\r\n            id: list?.id,\r\n          };\r\n          _options.push(options);\r\n        }\r\n      });\r\n\r\n      setOptions(_options);\r\n    }\r\n  };\r\n\r\n  const getFrequentAddresses = async () => {\r\n    const resp = await Api.ApiHandle(\r\n      `${FREQUENT_ADDRESSES}${userData[0]?.id}?type=${props?.isMostFrequent}`,\r\n      \"\",\r\n      \"GET\"\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const _commonAddresses = [];\r\n      resp?.data?.map((com) => {\r\n        const common = {\r\n          id: com?.id,\r\n          branch: com?.branch,\r\n          designation: com?.designation,\r\n        };\r\n        _commonAddresses.push(common);\r\n      });\r\n\r\n      setCommonAddresses(_commonAddresses);\r\n    }\r\n  };\r\n\r\n  const getPreDefinedComments = async () => {\r\n    const resp = await Api.ApiHandle(`${GET_PRE_DEFINED_COMMENTS}`, \"\", \"GET\");\r\n\r\n    if (resp?.status === 1) {\r\n      const _preDefinedComments = [];\r\n      resp?.data?.map((com) => {\r\n        const comments = {\r\n          comments: com.content,\r\n        };\r\n        _preDefinedComments.push(comments);\r\n      });\r\n\r\n      setPreDefinedComments(_preDefinedComments);\r\n    }\r\n  };\r\n\r\n  const logprint = () => {\r\n    let logData = {\r\n      type: \"PRINT\",\r\n      mail_id: mailData.id,\r\n    };\r\n    Api.ApiHandle(LOGS_ADD, logData, \"POST\");\r\n  };\r\n\r\n  const handleToData = (to) => {\r\n    setTo(to);\r\n  };\r\n\r\n  const handleSendComment = async () => {\r\n    if (to.length <= 0) {\r\n      Toaster(\"error\", \"To field cannot be empty\");\r\n    } else {\r\n      to.map(async (toID) => {\r\n        let payload = {\r\n          to: toID.id,\r\n          mail_id: props?.mailId,\r\n          from: userData[0]?.id,\r\n        };\r\n        if (inputCommentData !== \"\") {\r\n          payload.comment = inputCommentData;\r\n        }\r\n        const resp = await Api.ApiHandle(`${COMMENT_ON_MAIL}`, payload, \"POST\");\r\n\r\n        if (resp.status !== 1) {\r\n          Toaster(\"error\", resp.message);\r\n        } else {\r\n          setInputCommentData(\"\");\r\n          Toaster(\"success\", `Message sent successfully to ${toID.label} `);\r\n          setTo(\"\");\r\n          setRecentCommentid(inputCommentData);\r\n\r\n          if (props.inboxData.length > 1 && props.selected === \"unread\") {\r\n            updateMailOnComment(props.mailId);\r\n            openNextMail();\r\n          }\r\n        }\r\n      });\r\n      // setEdit(false);\r\n      if (props?.mailId) await getMail(props?.mailId);\r\n    }\r\n  };\r\n\r\n  const updateMailOnComment = async (id) => {\r\n    let index = 0;\r\n    props.inboxData.forEach((mail, i) => {\r\n      if (mail.id === props.mailId) index = i;\r\n    });\r\n\r\n    if (props.selected === \"sent\") {\r\n      if (props.inboxData[index].fromIsRead === 0) {\r\n        props.inboxData[index].fromIsRead = 1;\r\n        const payload = { from_is_read: 1 };\r\n\r\n        await Api.ApiHandle(`${UPDATE_MAIL}/${id}`, payload, \"PUT\");\r\n      }\r\n    } else {\r\n      let payload = {};\r\n      if (\r\n        props?.userData?.designations[0]?.id == props.inboxData[index].from_id\r\n      ) {\r\n        if (props.inboxData[index].fromIsRead === 0) {\r\n          props.inboxData[index].fromIsRead = 1;\r\n          payload = { from_is_read: 1 };\r\n        }\r\n      } else {\r\n        if (props.inboxData[index].isRead === 0) {\r\n          props.inboxData[index].isRead = 1;\r\n          payload = { is_read: 1 };\r\n        }\r\n      }\r\n      if (props.inboxData[index].isRead === 0) {\r\n        props.inboxData[index].isRead = 1;\r\n        if (props.inboxData[index].isCrashed === 1) {\r\n          props.inboxData[index].isCrashed = 1;\r\n          payload.is_crashed = 0;\r\n        }\r\n      }\r\n      if (\r\n        payload.hasOwnProperty(\"is_read\") ||\r\n        payload.hasOwnProperty(\"from_is_read\")\r\n      ) {\r\n        await Api.ApiHandle(`${UPDATE_MAIL}/${id}`, payload, \"PUT\");\r\n\r\n        // if (resp?.status) setUnreadMails(unreadMails - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const openNextMail = () => {\r\n    let index = 0;\r\n    props.inboxData.forEach((mail, i) => {\r\n      if (mail.id === props.mailId) index = i + 1;\r\n    });\r\n\r\n    if (props.inboxData.length > index) {\r\n      scrollToTop();\r\n      props.setMailId(props.inboxData[index].id);\r\n      props.getAllMails(\"unread\");\r\n    }\r\n  };\r\n\r\n  //downaload the attachment files\r\n  const downlaodAttachment = (dis, attachements) => {\r\n    let logData = {\r\n      type: \"DOWNLOAD\",\r\n      mail_id: mailData.id,\r\n      attach_id: attachements.id,\r\n    };\r\n\r\n    Api.ApiHandle(LOGS_ADD, logData, \"POST\");\r\n\r\n    let url = \"\";\r\n    if (attachements.host == null) {\r\n      url = attachements.url;\r\n    } else {\r\n      url = attachements.host + attachements.url;\r\n    }\r\n    let headers = {};\r\n    if (localStorage.getItem(\"auth\")) {\r\n      headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n    }\r\n    let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/download/${attachements.id}`;\r\n    let name = url.split(\"/\");\r\n    dis.target.style.display = \"none\";\r\n    dis.target.parentElement.querySelector(\".spinner-border\").style.display =\r\n      \"inline-block\";\r\n    Axios.get(apiurl, { responseType: \"arraybuffer\", headers: headers })\r\n      .then((res) => {\r\n        fileDownload(res.data, name[name.length - 1]);\r\n        dis.target.parentElement.querySelector(\r\n          \".spinner-border\"\r\n        ).style.display = \"none\";\r\n        dis.target.style.display = \"inline-block\";\r\n        // Toaster(\"success\", \"Download File Successfully\");\r\n      })\r\n      .catch(function (error) {\r\n        Toaster(\"error\", error.message);\r\n      });\r\n    // url.split(\"/\");\r\n    // const a = document.createElement(\"a\");\r\n    // a.href = url;\r\n    // a.download = url.split(\"/\").pop();\r\n    // document.body.appendChild(a);\r\n    // a.click();\r\n    // document.body.removeChild(a);\r\n  };\r\n\r\n  const viewAttachment = (attachements) => {\r\n    let url = \"\";\r\n    if (attachements.host == null) {\r\n      url = attachements.url;\r\n    } else {\r\n      url = attachements.host + attachements.url;\r\n    }\r\n\r\n    url.split(\"/\");\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.target = \"_blank\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  };\r\n\r\n  const handleScrollingClick = () => {\r\n    commentBoxRef?.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleInputCommentData = (e) => {\r\n    setInputCommentData(e.target.value);\r\n  };\r\n\r\n  const handlePreDefinedComment = (com) => {\r\n    setInputCommentData(com);\r\n  };\r\n\r\n  const handleSelectFolder = async (folderId) => {\r\n    await updateMail({ folder: folderId });\r\n    await getMail(props?.mailId);\r\n  };\r\n\r\n  const handleDeleteSelectedFolder = async () => {\r\n    await updateMail({ folder: null });\r\n    await getMail(props?.mailId);\r\n  };\r\n\r\n  const updateMail = async (payload) => {\r\n    const resp = await Api.ApiHandle(\r\n      `${UPDATE_MAIL}/${props?.mailId}`,\r\n      payload,\r\n      \"put\"\r\n    );\r\n  };\r\n\r\n  const handleIsStar = () => setIsStar((isStar) => !isStar);\r\n\r\n  const scrollToTop = () =>\r\n    topRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n  const handleHistory = () => {\r\n    setisTrack(true);\r\n  };\r\n\r\n  const handleTrackCloseModal = () => {\r\n    setisTrack(false);\r\n  };\r\n\r\n  const handleTrackOpenModal = () => {\r\n    setisTrack(true);\r\n  };\r\n  const handleFrequentAddresses = (common, id) => {\r\n    let selectedOption = {\r\n      value: common,\r\n      label: common,\r\n      id: id,\r\n    };\r\n    setTo((prev) => [...prev, selectedOption]);\r\n    setCommonAddresses(commonAddresses.filter((item) => item?.id !== id));\r\n  };\r\n\r\n  // const replyButton = () => {\r\n  //   let selectedOption = {\r\n  //     value: `${mailData?.from}-${mailData?.branch}`,\r\n  //     label: `${mailData?.from}-${mailData?.branch}`,\r\n  //     id: `${mailData?.fromId}`,\r\n  //   };\r\n  //   setTo((prev) => [...prev, selectedOption]);\r\n  //   // handleScrollingClick();\r\n  // };\r\n\r\n  const onClickAnnotation = async (start, end) => {\r\n    setStartChar(start);\r\n    setEndChar(end);\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION_ADD}?mailid=${props?.mailId}&start=${start}&end=${end}&designationId=${userData[0]?.id}`,\r\n      \"\",\r\n      \"GET\"\r\n    );\r\n    if (resp.status == 1) {\r\n      setselectedAnnotation(resp.data);\r\n      setshowAnnotationButtons(false);\r\n      setOpen(\"open\");\r\n    }\r\n  };\r\n\r\n  const getCommentData = async () => {\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_COMMENTS}/${props?.mailId}`,\r\n      \"\",\r\n      \"GET\"\r\n    );\r\n    if (resp?.status === 1) {\r\n      const _commentData = [];\r\n      resp?.data?.map((comment) => {\r\n        const comments = {\r\n          id: comment?.id,\r\n          fromDesignationName: comment?.From?.designation,\r\n          fromBranchName: comment?.From?.branch,\r\n          toId: comment?.To?.id,\r\n          toDesignationName: comment?.To?.designation,\r\n          toBranchName: comment?.To?.branch,\r\n          commentData: comment?.comment,\r\n          updatedTime: comment?.updatedAt,\r\n        };\r\n        _commentData.push(comments);\r\n      });\r\n      setGeneralCommentData(_commentData);\r\n      // if (_commentData.length > 0) setOpenTextBox(false);\r\n    } else {\r\n      Toaster(\"error\", \"Some Error Occured while getting comments\");\r\n    }\r\n  };\r\n\r\n  // const handleBeforeAnnot = (selectedDetails) => {\r\n  //   setselectedData(selectedDetails);\r\n  //   setshowAnnotationButtons(true);\r\n  //   setOpen(false);\r\n  // };\r\n\r\n  const handleHighlightButton = (backgr, color_id) => {\r\n    setColorID(color_id);\r\n    setColor(backgr);\r\n    setshowAnnotationButtons(true);\r\n    setOpen(\"close\");\r\n  };\r\n\r\n  const handleAnnotCommnet = () => {\r\n    if (windowDoc?.getSelection() === null) {\r\n      Toaster(\"error\", \"Select text again !!\");\r\n    }\r\n    if (windowDoc?.getSelection()?.toString() === \"\") {\r\n      Toaster(\"error\", \"Please select some Text !!\");\r\n    } else {\r\n      setBeforeSelectedAnnotation(windowDoc.getSelection().toString());\r\n      setselectedAnnotation([]);\r\n      setshowAnnotationButtons(false);\r\n      setOpen(\"open\");\r\n    }\r\n  };\r\n  const handleAnnotMark = async () => {\r\n    let selectedtext = PostHighlight(\"selector\", color, 1);\r\n    // console.log(selectedtext);\r\n    if (selectedtext.start != selectedtext.end) {\r\n      selectedtext.color_id = colorID;\r\n      selectedtext.mail_id = props?.mailId;\r\n    }\r\n    const commentData = {\r\n      anno_text: selectedtext.text,\r\n      start_char: selectedtext.start,\r\n      end_char: selectedtext.end,\r\n      color_code_id: selectedtext.color_id,\r\n      degn_id: userData[0]?.id,\r\n      mailid: selectedtext.mail_id,\r\n    };\r\n\r\n    const resp = await Api.ApiHandle(ANNOTATION_ADD, commentData, \"POST\");\r\n    if (resp?.status === 1) {\r\n      Toaster(\"success\", \"Highlighted successfully\");\r\n    }\r\n    setshowAnnotationButtons(false);\r\n  };\r\n  const getAllAnnotation = async () => {\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION_ADD}?mailid=${props?.mailId}`,\r\n      \"\",\r\n      \"GET\"\r\n    );\r\n    if (resp.status == 1) {\r\n      setallAnnotation(resp.data);\r\n    }\r\n  };\r\n\r\n  // const handleAnnotCommnet = () => {\r\n  //   setshowAnnotationButtons(false);\r\n  //   setOpen(true);\r\n  // };\r\n  // const handleAnnotMark = async () => {\r\n  //   let selectedtext = PostHighlight(\"selector\", color,1);\r\n  //   // console.log(selectedtext);\r\n  //   if (selectedtext.start != selectedtext.end) {\r\n  //     selectedtext.color_id = colorID;\r\n  //     selectedtext.mail_id = props?.mailId;\r\n  //   }\r\n  //   const commentData = {\r\n  //     anno_text: selectedtext.text,\r\n  //     start_char: selectedtext.start,\r\n  //     end_char: selectedtext.end,\r\n  //     color_code_id: selectedtext.color_id,\r\n  //     degn_id: userData[0]?.id,\r\n  //     mailid: selectedtext.mail_id,\r\n  //   };\r\n\r\n  //   const resp = await Api.ApiHandle(ANNOTATION_ADD, commentData, \"POST\");\r\n  //   setshowAnnotationButtons(false);\r\n  // };\r\n  // const getAllAnnotation = async () => {\r\n  //   const resp = await Api.ApiHandle(\r\n  //     `${ANNOTATION_ADD}?mailid=${props?.mailId}`,\r\n  //     \"\",\r\n  //     \"GET\"\r\n  //   );\r\n  //   if (resp.status == 1) {\r\n  //     setallAnnotation(resp.data);\r\n  //   }\r\n  // };\r\n\r\n  const closeMarginNotes = () => {\r\n    setselectedAnnotation([]);\r\n    setBeforeSelectedAnnotation(\"\");\r\n    setOpen(\"close\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {props?.mailId && !loading ? (\r\n        <div className=\"mt-4\" ref={topRef}>\r\n          <div\r\n            className=\"row px-4\"\r\n            style={{ borderBottom: \"0.5px solid black\" }}\r\n          >\r\n            <div className=\"col-9\">\r\n              <h4 className=\"title font-18 text-color-1\">{mailData.subject}</h4>\r\n              <div className=\"text-ul\">\r\n                <ul className=\"list-inline\">\r\n                  {mailData?.op !== null && mailData?.op !== \"\" ? (\r\n                    <li>Ops Name: {mailData.op}</li>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <li>Date: {mailData?.createdAt}</li>\r\n                  {mailData?.isCrashed !== null && (\r\n                    <li style={{ color: \"red\" }}>(Crash Message)</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-3\">\r\n              <ul className=\"d-flex g-1\">\r\n                <li\r\n                  className=\"mr-n1\"\r\n                  onClick={() => {\r\n                    handleHistory();\r\n                  }}\r\n                >\r\n                  <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                    <em className=\"icon ni ni-navigate-fill\"></em>\r\n                  </div>\r\n                </li>\r\n\r\n                {props?.selected !== \"sent\" && (\r\n                  <li className=\"mr-n1\">\r\n                    <div className=\"my-dropdown\">\r\n                      <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                        <em\r\n                          className=\"icon ni ni-folder-fill\"\r\n                          onClick={() => Openfolderlist()}\r\n                        ></em>\r\n                      </div>\r\n                      <div className=\"dropdown-content\">\r\n                        <ul className=\"nk-ibx-label\">\r\n                          {openFolderList &&\r\n                            props.folderList.map((folder, id) => {\r\n                              return (\r\n                                <li\r\n                                  onClick={() => handleSelectFolder(folder?.id)}\r\n                                >\r\n                                  <div>\r\n                                    <em\r\n                                      className=\"icon ni ni-folder-fill font-22\"\r\n                                      style={{ color: folder?.folderColor }}\r\n                                    ></em>\r\n                                    <span className=\"nk-ibx-label-text\">\r\n                                      {folder?.folderName}\r\n                                    </span>\r\n                                  </div>\r\n                                </li>\r\n                              );\r\n                            })}\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                )}\r\n\r\n                {/* <li className=\"mr-n1\">\r\n                <div className=\"asterisk\">\r\n                  <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                    <em className=\"asterisk-off icon ni ni-star\"></em>\r\n                    <em className=\"asterisk-on icon ni ni-star-fill\"></em>\r\n                  </div>\r\n                </div>\r\n              </li> */}\r\n\r\n                {props?.selected !== \"sent\" && (\r\n                  <li className=\"mr-n1\">\r\n                    <div className=\"asterisk\">\r\n                      <div\r\n                        className=\"btn btn-trigger btn-icon btn-tooltip\"\r\n                        onClick={handleIsStar}\r\n                      >\r\n                        <a>\r\n                          <em\r\n                            className={`asterisk-${\r\n                              mailData?.is_starred === 1 ? \"on\" : \"off\"\r\n                            } icon ni ni-star${\r\n                              mailData?.is_starred === 1 ? \"-fill\" : \"\"\r\n                            }`}\r\n                            style={{\r\n                              position: \"absolute\",\r\n                              bottom: -15,\r\n                              cursor: \"pointer\",\r\n                            }}\r\n                          ></em>\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                )}\r\n\r\n                <li\r\n                  className=\"mr-n1\"\r\n                  style={{\r\n                    marginLeft: `${props?.selected !== \"sent\" ? \"35px\" : \"\"}`,\r\n                  }}\r\n                  onClick={() => {\r\n                    // handlePrint();\r\n                    logprint();\r\n                  }}\r\n                >\r\n                  <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                    <em\r\n                      onClick={handlePrint}\r\n                      className=\"icon ni ni-printer-fill\"\r\n                    ></em>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          {props?.selected !== \"sent\" && (\r\n            <div style={{ marginLeft: \"22px\", marginBottom: \"10px\" }}>\r\n              <ul className=\"nk-ibx-tags g-1\">\r\n                {mailData?.folders && (\r\n                  <li\r\n                    className=\"btn-group is-tags\"\r\n                    style={{\r\n                      color: mailData.folders?.Color?.text,\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"btn btn-xs btn btn-dim\"\r\n                      style={{ color: mailData?.folders?.Color?.text }}\r\n                    >\r\n                      {mailData?.folders?.name}\r\n                    </div>\r\n                    <div\r\n                      className=\"btn btn-xs btn-icon btn btn-dim\"\r\n                      style={{ color: mailData?.folders?.Color.text }}\r\n                    >\r\n                      <em\r\n                        className=\"icon ni ni-cross\"\r\n                        onClick={handleDeleteSelectedFolder}\r\n                      ></em>\r\n                    </div>\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          {isTrack && (\r\n            <div style={{ top: \"-150px\" }}>\r\n              <Track\r\n                closeModal={handleTrackCloseModal}\r\n                openModal={handleTrackOpenModal}\r\n                visible={isTrack}\r\n                mail_id={mailData.id}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"col-md-11\">\r\n            <Commentbox\r\n              // commentDataRef={commentBoxCommentData}\r\n              // onScrollingClick={handleScrollingClick}\r\n              generalCommentData={generalCommentData}\r\n              inputCommentData={inputCommentData}\r\n              mailId={props.mailId}\r\n              updateComment={recentCommentid}\r\n            />\r\n            {props?.selected === \"sent\" && (\r\n              <div className=\"toBlock\">\r\n                <h4 className=\"styleTO\">To:</h4>\r\n                <h6 className=\"styleToName\">{`${mailData?.to}(${mailData?.toBranch})`}</h6>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"col-md-1\"></div>\r\n\r\n          <div className=\"col-md-12 pb-100\">\r\n            <div className=\"px-2\">\r\n              <MailBody\r\n                body={mailData?.body}\r\n                call=\"3-col\"\r\n                setAnnotationDataForPrint={setAnnotationDataForPrint}\r\n                mail_id={props?.mailId}\r\n                userData={userData[0]}\r\n                // allAnnotation={allAnnotation}\r\n                onClickAnnotation={onClickAnnotation}\r\n                setusercolorcodeObj={setusercolorcodeObj}\r\n                // handleMarginNotes={handleMarginNotes}\r\n                // handleBeforeAnnot={handleBeforeAnnot}\r\n                handleHighlightButton={handleHighlightButton}\r\n                closeMarginNotes={closeMarginNotes}\r\n                // setshowAnnotationButtons={setshowAnnotationButtons}\r\n              />\r\n              {showAnnotationButtons && (\r\n                <div className={`right-icon col3-marginButtonStatic`}>\r\n                  <ul className=\"float-right ml-5\">\r\n                    <li\r\n                      className=\"border-br-radius-0\"\r\n                      onClick={handleAnnotMark}\r\n                    >\r\n                      <a className=\"btn btn-icon\">\r\n                        <span className=\"d-flex align-items-center\">\r\n                          <em className=\"icon ni ni-chat\"></em>\r\n                        </span>\r\n                      </a>\r\n                    </li>\r\n                    <li\r\n                      className=\"border-tr-radius-0\"\r\n                      onClick={handleAnnotCommnet}\r\n                    >\r\n                      <a className=\"btn btn-icon\">\r\n                        <span className=\"d-flex align-items-center\">\r\n                          <em className=\"icon ni ni-edit\"></em>\r\n                        </span>\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              )}\r\n              <div className={`col-md-4 col3-marginNotesStatic`}>\r\n                {open === \"open\" && (\r\n                  <MailMarginComments\r\n                    mailId={props?.mailId}\r\n                    color={color}\r\n                    colorID={colorID}\r\n                    selectedData={selectedData}\r\n                    usercolorcodeObj={usercolorcodeObj}\r\n                    beforeSelectedAnnotation={beforeSelectedAnnotation}\r\n                    selectedAnnotation={selectedAnnotation}\r\n                    closeMarginNotes={closeMarginNotes}\r\n                    startChar={startChar}\r\n                    endChar={endChar}\r\n                    selected={props?.selected}\r\n                    setOpen={setOpen}\r\n                    type=\"3\"\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-3 px-2\">\r\n              {mailData.attachmentList?.length > 0 && (\r\n                <div className=\"col-md-12\">\r\n                  <p>\r\n                    <strong>Attachments</strong>\r\n                  </p>\r\n                  <div className=\"attach-files\">\r\n                    <ul className=\"attach-list\">\r\n                      {mailData.attachmentList?.map((attachment, id) => {\r\n                        let extent = attachment.url.split(\"/\");\r\n                        let attactype = extent[extent.length - 1].split(\".\");\r\n\r\n                        return (\r\n                          <li\r\n                            className=\"attach-item\"\r\n                            key={id}\r\n                            style={{\r\n                              overflow: \"hidden\",\r\n                              whiteSpace: \"nowrap\",\r\n                              textOverflow: \"ellipsis\",\r\n                            }}\r\n                          >\r\n                            <span>\r\n                              <em\r\n                                className=\"ni ni-download\"\r\n                                style={{ paddingRight: 4 }}\r\n                                onClick={(e) =>\r\n                                  downlaodAttachment(e, attachment)\r\n                                }\r\n                              ></em>\r\n                              <div\r\n                                className=\"spinner-border\"\r\n                                role=\"status\"\r\n                                style={{\r\n                                  display: \"none\",\r\n                                  height: \"1.5rem\",\r\n                                  width: \"1.5rem\",\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                              </div>\r\n                              <span style={{ paddingLeft: 10 }}>\r\n                                {attachment?.body_flag === 0\r\n                                  ? attachment?.name\r\n                                  : \"Original Document\"}\r\n                              </span>\r\n                            </span>\r\n                            <br></br>\r\n                            <span>\r\n                              {attactype[1] &&\r\n                              (attactype[1] == \"png\" ||\r\n                                attactype[1] == \"jpeg\" ||\r\n                                attactype[1] == \"jpg\" ||\r\n                                attactype[1] == \"pdf\") ? (\r\n                                <span\r\n                                  onClick={() => viewAttachment(attachment)}\r\n                                  style={{ color: \"blue\", cursor: \"pointer\" }}\r\n                                >\r\n                                  View\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n\r\n                              {attactype[1] &&\r\n                              (attactype[1] == \"png\" ||\r\n                                attactype[1] == \"jpeg\" ||\r\n                                attactype[1] == \"jpg\" ||\r\n                                attactype[1] == \"pdf\") ? (\r\n                                <span style={{ paddingLeft: 10 }}>\r\n                                  {attachment?.size}\r\n                                </span>\r\n                              ) : (\r\n                                <span style={{ paddingLeft: 35 }}>\r\n                                  {attachment?.size}\r\n                                </span>\r\n                              )}\r\n                            </span>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>{\" \"}\r\n            {/* {props?.mailId && <Topreplaybuttons onClick={replyButton} />} */}\r\n            <div ref={commentBoxRef} style={{ marginLeft: \"-10%\" }}>\r\n              <div className=\"nk-ibx-reply-form nk-reply-form\">\r\n                <div className=\"nk-reply-form-header\">\r\n                  <div className=\"nk-reply-form-group\">\r\n                    <div className=\"nk-reply-form-input-group\">\r\n                      {/* to for the comment */}\r\n                      <div className=\"nk-reply-form-input nk-reply-form-input-to\">\r\n                        <label className=\"label\" style={{ paddingTop: 2 }}>\r\n                          To\r\n                        </label>\r\n                        <Select\r\n                          isMulti\r\n                          name=\"colors\"\r\n                          options={options}\r\n                          placeholder=\"\r\n                        Enter the user Designation-Branch or Select from below...\"\r\n                          value={to}\r\n                          onChange={handleToData}\r\n                          isClearable={true}\r\n                        />\r\n                      </div>\r\n                      <div className=\"nk-reply-form-tools\">\r\n                        <ul\r\n                          className=\"nk-reply-form-actions g-1\"\r\n                          style={{ flexWrap: \"wrap\" }}\r\n                        >\r\n                          {commonAddresses?.map((com, i) => {\r\n                            return (\r\n                              <li\r\n                                key={`commonAddresses${i}`}\r\n                                className=\"mr-2\"\r\n                                onClick={() =>\r\n                                  handleFrequentAddresses(\r\n                                    `${com?.designation}-${com?.branch}`,\r\n                                    com?.id\r\n                                  )\r\n                                }\r\n                              >\r\n                                <div className=\"frequent_addresses_button\">{`${com?.designation}-${com?.branch}`}</div>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"no-select\">\r\n                  <div className=\"nk-reply-form-editor\">\r\n                    <div className=\"nk-reply-form-field\">\r\n                      <textarea\r\n                        className=\"form-control form-control-simple no-resize\"\r\n                        placeholder=\"Enter Comments...\"\r\n                        value={inputCommentData}\r\n                        onChange={handleInputCommentData}\r\n                      ></textarea>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"nk-reply-form-tools\">\r\n                    <ul\r\n                      className=\"nk-reply-form-actions g-1\"\r\n                      style={{ flexWrap: \"wrap\" }}\r\n                    >\r\n                      {preDefinedComments?.map((com, i) => {\r\n                        return (\r\n                          <li\r\n                            key={`preDefinedComments${i}`}\r\n                            className=\"mr-2\"\r\n                            onClick={() =>\r\n                              handlePreDefinedComment(com.comments)\r\n                            }\r\n                          >\r\n                            <div className=\"myButton\">{com.comments}</div>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <div className=\"nk-reply-form-tools\">\r\n                    <ul className=\"nk-reply-form-actions g-1\">\r\n                      <li className=\"mr-2\">\r\n                        <button\r\n                          className=\"btn btn-primary\"\r\n                          type=\"submit\"\r\n                          onClick={() => handleSendComment()}\r\n                        >\r\n                          Send\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : loading ? (\r\n        <div style={{ marginLeft: \"36%\", marginTop: \"38%\" }}>\r\n          <Loading />\r\n        </div>\r\n      ) : (\r\n        Object.keys(mailData).length <= 0 && (\r\n          <div style={{ marginLeft: \"36%\", marginTop: \"calc(100vh - 450px)\" }}>\r\n            <h4>No Mails Selected</h4>\r\n          </div>\r\n        )\r\n      )}\r\n      {openPrintcall && (\r\n        <div\r\n          className=\"printElement\"\r\n          id=\"printElement\"\r\n          style={{ overflow: \"auto\", height: \"0px\" }}\r\n          // style={{ display: \"block\", overflow: \"auto\" }}\r\n        >\r\n          <PrintView\r\n            // ref={printRef}\r\n            call=\"3-col-print\"\r\n            // annotationDataForPrint={annotationDataForPrint}\r\n            annotationText={annotationText}\r\n            subject={mailData?.subject}\r\n            generalCommentData={generalCommentData}\r\n            op={mailData?.op}\r\n            toBranch={mailData?.toBranch}\r\n            to={mailData?.to}\r\n            time={mailData?.createdAt}\r\n            body={mailData?.body}\r\n            mailId={props?.mailId}\r\n            crashed={mailData?.isCrashed}\r\n            updateComment={recentCommentid}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  folderList: state.folderList,\r\n  searchText: state.searchText,\r\n  station: state.station,\r\n  isActiveModule3Column: state.isActiveModule3Column,\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Viewcommentbox);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\Inbox.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\compose_to.jsx",["558","559","560","561","562","563","564"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GET_ALL_BRANCH } from \"../../config/constants\";\r\nimport { ApiHandle } from \"../../util/api/ApicallModule\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./compose_to.css\";\r\n\r\nfunction ComposeTo(props) {\r\n  const closeWinRef = useRef(null);\r\n  let isFullSize = props?.isFullSize ? 8 : 2;\r\n  let commonAddresses = [...props?.commonAddresses];\r\n  const [ownBranchDesignationList, setOwnBranchDesignationList] = useState([]);\r\n  const [otherBranches, setOtherBranches] = useState({});\r\n  const [operateDesignationList, setOperateDesignationList] = useState(false);\r\n  const [searchInStation, setSearchInStation] = useState(\"\");\r\n  const [dropDownOwnBranch, setDropDownOwnBranch] = useState(true);\r\n  const [selectedDesignation, setSelectedDesignation] = useState([]);\r\n  const [selectedDesignationName, setSelectedDesignationName] = useState([]);\r\n  const [ownBranchCheckBox, setOwnBranchCheckBox] = useState(false);\r\n  const [otherBranchesDesignation, setOtherBranchesDesignation] = useState({});\r\n  const [isLoading, setIsLoading] = useState({});\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    getAllBranches();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSelectedDesignation([]);\r\n    setSelectedDesignationName([]);\r\n    setSearchInStation(\"\");\r\n    setOwnBranchCheckBox(false);\r\n  }, [props?.mailId]);\r\n\r\n  useEffect(() => {\r\n    setSearchInStation(\"\");\r\n  }, [isLoading]);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (closeWinRef.current && !closeWinRef.current.contains(event.target)) {\r\n        setOperateDesignationList(false);\r\n        setSearchInStation(\"\");\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [closeWinRef]);\r\n\r\n  useEffect(() => {\r\n    [...props?.to]?.forEach((item) => {\r\n      let prevSelectedId = [...selectedDesignation];\r\n      if (!prevSelectedId.includes(item?.id)) {\r\n        setSelectedDesignation((prev) => [...prev, item?.id]);\r\n        setSelectedDesignationName((prev) => [...prev, item]);\r\n      }\r\n    });\r\n  }, [props?.to]);\r\n\r\n  useEffect(() => {\r\n    commonAddresses.forEach((item) => {\r\n      if (selectedDesignation?.includes(item?.id)) {\r\n        props?.handleFrequentAddresses(item, item?.id);\r\n      }\r\n    });\r\n\r\n    props?.setTo([...selectedDesignationName]);\r\n\r\n    let arr = props?.allCommonAddresses.filter(\r\n      (item) => !selectedDesignation.includes(item.id)\r\n    );\r\n\r\n    props?.setCommonAddresses(arr);\r\n  }, [selectedDesignation]);\r\n\r\n  const getAllBranches = async () => {\r\n    const designationId = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    })[0].id;\r\n    logDataFunction(\"GET ALL BRANCH\", 0, 0);\r\n    const resp = await ApiHandle(`${GET_ALL_BRANCH}`, \"\", \"GET\", logData);\r\n    if (resp?.status === 1) {\r\n      setOwnBranchDesignationList(\r\n        resp?.data?.ownBranch?.filter((item) => item.id !== designationId)\r\n      );\r\n      let branch = resp?.data;\r\n      delete branch[\"ownBranch\"];\r\n      setOtherBranches(branch);\r\n    }\r\n  };\r\n\r\n  const filteredList = (stationList, searchInStation) => {\r\n    return (\r\n      Array.isArray(stationList) &&\r\n      stationList?.filter((station) =>\r\n        bySearch(`${station?.designation}-${station?.branch}`, searchInStation)\r\n      )\r\n    );\r\n  };\r\n\r\n  const bySearch = (stationBranch, searchInStation) => {\r\n    if (searchInStation) {\r\n      return stationBranch\r\n        ?.toLowerCase()\r\n        ?.includes(searchInStation?.toLowerCase());\r\n    } else return stationBranch;\r\n  };\r\n\r\n  const handleCheckedDesignation = (e, item) => {\r\n    const { id, checked } = e.target;\r\n\r\n    let ID = id.split(\"-\");\r\n\r\n    if (checked) {\r\n      setSelectedDesignation((prev) => [...prev, +ID[1]]);\r\n      setSelectedDesignationName((prev) => [...prev, item]);\r\n    } else {\r\n      setSelectedDesignation(\r\n        selectedDesignation.filter((item) => item !== +ID[1])\r\n      );\r\n      setSelectedDesignationName(\r\n        selectedDesignationName?.filter((item) => item.id !== +ID[1])\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOwnBranch = (e) => {\r\n    setOwnBranchCheckBox((ownBranchCheckBox) => !ownBranchCheckBox);\r\n    let prevSelectedId = [...selectedDesignation];\r\n\r\n    !ownBranchCheckBox\r\n      ? ownBranchDesignationList.forEach((item) => {\r\n          if (!prevSelectedId.includes(item?.id)) {\r\n            setSelectedDesignation((prev) => [...prev, +item.id]);\r\n            setSelectedDesignationName((prev) => [...prev, item]);\r\n          }\r\n        })\r\n      : ownBranchDesignationList.forEach(() => {\r\n          setSelectedDesignation([]);\r\n          setSelectedDesignationName([]);\r\n        });\r\n    setSearchInStation(\"\");\r\n  };\r\n\r\n  const listingDesignation = (desig, i) => {\r\n    if (props.blankTo === true) {\r\n      setSelectedDesignationName([]);\r\n      setSelectedDesignation([]);\r\n    }\r\n    return (\r\n      <div key={`selectedDesignation${i}`} className=\"selected-name\">\r\n        <span>\r\n          {`${desig?.designation}(${desig?.branch})`}\r\n          {/* {desig?.first_name !== null && desig?.first_name !== undefined ? (\r\n            <i> ({desig?.first_name})</i>\r\n          ) : null} */}\r\n        </span>\r\n        <em\r\n          className=\"icon ni ni-cross\"\r\n          style={{\r\n            opacity: \"0.54\",\r\n            marginLeft: 3,\r\n            fontSize: 12,\r\n          }}\r\n          onClick={() => {\r\n            setSelectedDesignationName(\r\n              selectedDesignationName.filter((item) => item.id !== +desig.id)\r\n            );\r\n            setSelectedDesignation(\r\n              selectedDesignation.filter((item) => item !== +desig.id)\r\n            );\r\n            handleSelectedCommonAddress(desig);\r\n          }}\r\n        ></em>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleBranchDesignationArrow = (item, data) => {\r\n    setOtherBranchesDesignation((prev) => ({\r\n      ...prev,\r\n      [item]: {\r\n        isOpen: !prev[item]?.isOpen,\r\n        data,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleLoading = (item, isTrue) => {\r\n    setIsLoading((prev) => ({\r\n      ...prev,\r\n      [item]: isTrue,\r\n    }));\r\n  };\r\n\r\n  const handleArrow = async (e, item) => {\r\n    handleLoading(item, true);\r\n    if (\r\n      !otherBranchesDesignation[item]?.isOpen &&\r\n      !otherBranchesDesignation[item]?.data?.length > 0\r\n    ) {\r\n      handleBranchDesignationArrow(item, otherBranches[item]);\r\n      handleLoading(item, false);\r\n    } else {\r\n      handleBranchDesignationArrow(item, otherBranches[item]);\r\n\r\n      handleLoading(item, false);\r\n    }\r\n  };\r\n\r\n  const filteredListing = (data, branch) => {\r\n    const filteredArray =\r\n      Array.isArray(filteredList(data, searchInStation)) &&\r\n      filteredList(data, searchInStation)?.map((item, id) => {\r\n        return (\r\n          <li\r\n            key={\r\n              branch === \"own\" ? `ownBranchList${id}` : `otherBranchList${id}`\r\n            }\r\n          >\r\n            <div className=\"custom-control custom-control-sm custom-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input station_checkbox_1\"\r\n                name=\"ownBranchList\"\r\n                id={`branch-${item?.id}`}\r\n                onChange={(e) => {\r\n                  handleCheckedDesignation(e, item);\r\n                }}\r\n                checked={selectedDesignation?.includes(item?.id) ? true : false}\r\n              />\r\n              <label\r\n                className=\"custom-control-label\"\r\n                htmlFor={`branch-${item?.id}`}\r\n              >\r\n                {`${item?.designation}-${item?.branch}  `}\r\n                {/* {item?.first_name !== null && item?.first_name !== undefined ? (\r\n                  <i> ({item.first_name})</i>\r\n                ) : null} */}\r\n              </label>\r\n            </div>\r\n          </li>\r\n        );\r\n      });\r\n    return filteredArray;\r\n  };\r\n\r\n  const branchList = (item) => {\r\n    return (\r\n      <div\r\n        className=\"other-branch-name\"\r\n        onClick={(e) => {\r\n          handleArrow(e, item);\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            fontSize: 17,\r\n            fontWeight: \"500\",\r\n            opacity: \"0.7\",\r\n          }}\r\n        >\r\n          {item}\r\n        </div>\r\n        {isLoading[item] ? (\r\n          <Loader type=\"ThreeDots\" color=\"#6576ff\" height={20} width={20} />\r\n        ) : otherBranchesDesignation[item]?.isOpen ? (\r\n          <em className=\"icon ni ni-chevron-down\"></em>\r\n        ) : (\r\n          <em className=\"icon ni ni-chevron-right\"></em>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSelectedCommonAddress = (common) => {\r\n    if (common?.hasOwnProperty(\"belongsTo\")) {\r\n      props?.setCommonAddresses((prev) => [...prev, common]);\r\n    }\r\n  };\r\n\r\n  const frequentCommonAddresses = (commonAddresses) => {\r\n    return (\r\n      <div className=\"nk-reply-form-tools\" style={{ borderTop: \"none\" }}>\r\n        <ul className=\"nk-reply-form-actions g-1\" style={{ flexWrap: \"wrap\" }}>\r\n          {commonAddresses?.map((com, i) => {\r\n            return (\r\n              <li\r\n                key={`commonAddresses${i}`}\r\n                className=\"mr-2\"\r\n                onClick={() => {\r\n                  props?.handleFrequentAddresses(com, com?.id);\r\n                }}\r\n              >\r\n                <div className=\"frequent_addresses_button\">\r\n                  {`${com?.designation}-${com?.branch}`}\r\n                  {/* {com?.first_name !== null && com?.first_name !== undefined ? (\r\n                    <i> ({com?.first_name})</i>\r\n                  ) : null} */}\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleFocus = (event) => {\r\n    if (event.keyCode === 9 && event.target.nodeName === \"INPUT\") {\r\n      window?.document?.getElementById(\"subject\")?.focus();\r\n      setOperateDesignationList(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchInStation = (value) => {\r\n    if (value === \"\") {\r\n      Object.keys(otherBranches).map((item) => {\r\n        let data = otherBranches[item];\r\n\r\n        setOtherBranchesDesignation((prev) => ({\r\n          ...prev,\r\n          [item]: {\r\n            isOpen: false,\r\n            data,\r\n          },\r\n        }));\r\n      });\r\n    } else {\r\n      Object.keys(otherBranches).map((item) => {\r\n        let data = otherBranches[item];\r\n        setOtherBranchesDesignation((prev) => ({\r\n          ...prev,\r\n          [item]: {\r\n            isOpen: true,\r\n            data,\r\n          },\r\n        }));\r\n      });\r\n    }\r\n  };\r\n\r\n  const showingOtherBranches = (branches) =>\r\n    Object.keys(branches).map((item, id) => {\r\n      let checker = [];\r\n      let tempItemArray = [];\r\n      return (\r\n        <>\r\n          <div className=\"other-branch\">\r\n            <div key={`otherBranchesNone${id}`} style={{ display: \"none\" }}>\r\n              {\r\n                (checker = filteredListing(\r\n                  otherBranchesDesignation[item]?.data,\r\n                  \"other\"\r\n                ))\r\n              }\r\n\r\n              {checker?.length == 0 ? tempItemArray.push(item) : \"\"}\r\n            </div>\r\n            <li key={`otherBranches${id}`} style={{ padding: \"0rem 1.1rem\" }}>\r\n              {!tempItemArray.includes(item) ? branchList(item) : \"\"}\r\n              {otherBranchesDesignation[item]?.isOpen && (\r\n                <div>\r\n                  {filteredListing(\r\n                    otherBranchesDesignation[item]?.data,\r\n                    \"other\"\r\n                  )}\r\n                </div>\r\n              )}\r\n            </li>\r\n          </div>\r\n        </>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className=\"composeBox\">\r\n      <div className=\"designation-list\" ref={closeWinRef}>\r\n        <div className=\"designation-list-dropdown\">\r\n          <div className=\"compose-to\">\r\n            <div className=\"listing-selected-name\">\r\n              {!operateDesignationList &&\r\n              selectedDesignationName?.length > isFullSize\r\n                ? selectedDesignationName\r\n                    ?.slice(0, isFullSize)\r\n                    .map((desig, i) => {\r\n                      return listingDesignation(desig, i);\r\n                    })\r\n                : selectedDesignationName?.length > 0 &&\r\n                  selectedDesignationName?.map((desig, i) => {\r\n                    return listingDesignation(desig, i);\r\n                  })}\r\n            </div>\r\n            {!operateDesignationList &&\r\n              selectedDesignationName?.length > isFullSize && (\r\n                <h3\r\n                  className=\"more-recipients\"\r\n                  onClick={() => {\r\n                    setOperateDesignationList(true);\r\n                  }}\r\n                >\r\n                  {selectedDesignationName?.length - isFullSize} more\r\n                </h3>\r\n              )}\r\n\r\n            <input\r\n              type=\"text\"\r\n              className=\"compose-to-textarea\"\r\n              placeholder={`To`}\r\n              name=\"search\"\r\n              onFocus={() => {\r\n                setOperateDesignationList(true);\r\n              }}\r\n              value={searchInStation}\r\n              autoComplete=\"off\"\r\n              onChange={(e) => {\r\n                setSearchInStation(e.target.value);\r\n                handleSearchInStation(e.target.value);\r\n              }}\r\n              onKeyDown={handleFocus}\r\n            />\r\n          </div>\r\n          {operateDesignationList && (\r\n            <div>\r\n              <div className=\"designation-list-dropdown-list\">\r\n                <ul className=\"link-tidy\">\r\n                  <div\r\n                    className=\"own-branch\"\r\n                    style={{\r\n                      display:\r\n                        filteredListing(ownBranchDesignationList, \"own\")\r\n                          ?.length === 0\r\n                          ? \"none\"\r\n                          : \"\",\r\n                    }}\r\n                  >\r\n                    <div className=\"custom-control custom-control-sm custom-checkbox other-branch-name \">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input station_checkbox_1\"\r\n                        id=\"ownBranch\"\r\n                        name=\"ownBranch\"\r\n                        checked={ownBranchCheckBox}\r\n                        onChange={handleOwnBranch}\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"ownBranch\"\r\n                        style={{\r\n                          fontSize: 17,\r\n                          fontWeight: \"500\",\r\n                          opacity: \"0.7\",\r\n                        }}\r\n                      >\r\n                        Own Branch\r\n                      </label>\r\n                      <div\r\n                        onClick={() => {\r\n                          setDropDownOwnBranch(\r\n                            (dropDownOwnBranch) => !dropDownOwnBranch\r\n                          );\r\n                        }}\r\n                      >\r\n                        {dropDownOwnBranch ? (\r\n                          <em className=\"icon ni ni-chevron-down\"></em>\r\n                        ) : (\r\n                          <em className=\"icon ni ni-chevron-right\"></em>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {dropDownOwnBranch &&\r\n                      filteredListing(ownBranchDesignationList, \"own\")}\r\n                  </div>\r\n\r\n                  {showingOtherBranches(otherBranches)}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"frequentAddresses\">\r\n        {commonAddresses.length > 0 && frequentCommonAddresses(commonAddresses)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\nexport default connect(mapStateToProps)(ComposeTo);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\sidebar\\tinyEditor.jsx",["565","566","567"],"// import React, { useRef, useState } from 'react';\r\n// import { Editor } from '@tinymce/tinymce-react';\r\n// import { Editor } from '../../Assets/tiny/tinymce';\r\n// import axios from 'axios';\r\n// import './App.css';\r\n\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function EditorComponent(props) {\r\n  const handleEditorChange = (e) => {\r\n    // props.setBodyData(content)\r\n  };\r\n\r\n  useEffect(() => {\r\n    let tinymce = window.tinymce;\r\n    tinymce.remove();\r\n    tinymce.init({\r\n      initialValue: \"<p>dsfdsfs<p>\",\r\n      setup: function (editor) {\r\n        editor.on(\"init\", function (e) {\r\n          editor.setContent(props.containerValue);\r\n        });\r\n        editor.on(\"input NodeChange\", function (e) {\r\n          props.updateContainerValue(editor.getContent());\r\n        });\r\n      },\r\n      plugins: \"autoresize\",\r\n      autoresize_min_height: 100,\r\n      autoresize_max_height: 1000,\r\n      autoresize_bottom_margin: 0,\r\n      onchange_callback: \"tinyChangeHandler\",\r\n      selector: \"#mytextarea\",\r\n      base_url: \"/tiny/\",\r\n      // height: 440,\r\n      // maxHeight: 350,\r\n      // overflow: \"auto\",\r\n      border: \"0px\",\r\n      paste_data_images: true,\r\n      menubar: false,\r\n      convert_urls: true,\r\n      plugins:\r\n        \" print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists imagetools textpattern noneditable help charmap quickbars emoticons\",\r\n      toolbar: \"\",\r\n      content_style: \"body { font-size:14px;height:100vh;}p{margin: 0px 0px; }\",\r\n    });\r\n    // tinymce.execCommand('mceInsertRawHTML', false, data);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* <Editor\r\n          initialValue=\"<p></p>\"\r\n          init={{\r\n            base_url: '/tiny/',\r\n            height: 300,\r\n            border: \"0px\",\r\n            menubar: false,\r\n            selector: 'textarea#full-featured-non-premium',\r\n            plugins: ' print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists imagetools textpattern noneditable help charmap quickbars emoticons',\r\n            imagetools_cors_hosts: ['picsum.photos'],\r\n            // menubar: 'file edit view insert format tools table help',\r\n            toolbar: '',\r\n            toolbar_sticky: false,\r\n            // external_plugins: {\"ruler\": \"http://localhost:3000/tiny/plugins/newRuler/plugins.js\"},\r\n            // nanospell_server: \"php\",\r\n            toggleState: false,\r\n            browser_spellcheck: false,\r\n            nanospell_autostart: false,\r\n            contextmenu_never_use_native :false,\r\n            nonbreaking_force_tab: false,\r\n            autosave_ask_before_unload: false,\r\n            autosave_interval: '30s',\r\n            autosave_prefix: '{path}{query}-{id}-',\r\n            autosave_restore_when_empty: false,\r\n            autosave_retention: '2m',\r\n            image_advtab: false\r\n          }}\r\n          onEditorChange={handleEditorChange}\r\n        /> */}\r\n      <textarea\r\n        id=\"mytextarea\"\r\n        onpaste=\"handleEditorChange()\"\r\n        style={{ height: \"300px\", width: \"100%\" }}\r\n      ></textarea>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\common\\drag_drop.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailMarginComments.jsx",["568","569","570","571","572","573"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { ANNOTATION_ADD, ANNOTATION } from \"../../config/constants\";\r\nimport { PostHighlight } from \"../../components/common/annotation\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\n\r\nfunction MailMarginComments(props) {\r\n  const marginNotesRef = useRef();\r\n  const [heading, setheading] = useState(\"\");\r\n  const [marginCommentData, setMarginCommentData] = useState(\"\");\r\n  const [marginNotes, setMarginNotes] = useState([]);\r\n  const [previousSelected, setpreviousSelected] = useState({});\r\n  const [updateMode, setUpdateMode] = useState(false);\r\n  const [editCommentId, setEditCommentId] = useState(0);\r\n  const [enableSent, setEnableSent] = useState(0);\r\n  const [startChar, setStartChar] = useState(\"\");\r\n  const [endChar, setEndChar] = useState(\"\");\r\n  const [beforeSelectedHandle, setBeforeSelectedHandle] = useState(0);\r\n  const [designation, setDesignation] = useState(0);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    const designation = props?.userData?.designations.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    });\r\n    setDesignation(designation[0]);\r\n  }, [props?.userData]);\r\n\r\n  useEffect(() => {\r\n    setMarginNotesDynami();\r\n    if (props?.selectedAnnotation?.length > 0) {\r\n      setheading(props?.selectedAnnotation[0]?.anno_text);\r\n    }\r\n    setBeforeSelectedHandle(0);\r\n  }, [props?.selectedAnnotation]);\r\n\r\n  useEffect(() => {\r\n    if (props?.beforeSelectedAnnotation !== \"\") {\r\n      setheading(props?.beforeSelectedAnnotation);\r\n      setBeforeSelectedHandle(1);\r\n    }\r\n  }, [props?.beforeSelectedAnnotation]);\r\n\r\n  useEffect(() => {\r\n    if (marginNotes.length > 0 && props.selectedAnnotation.length > 0) {\r\n      handleDefaultNotes();\r\n    }\r\n    marginNotes?.map((notes) => {\r\n      setEnableSent(notes?.enb_sent);\r\n    });\r\n  }, [marginNotes]);\r\n\r\n  const handleDefaultNotes = () => {\r\n    const data = {\r\n      anno_text: props.selectedAnnotation[0].anno_text,\r\n      start_char: props.selectedAnnotation[0].start_char,\r\n      end_char: props.selectedAnnotation[0].end_char,\r\n      color_code_id: props.selectedAnnotation[0].color_code_id,\r\n      mailid: props.selectedAnnotation[0].mailid,\r\n    };\r\n    setpreviousSelected(data);\r\n  };\r\n\r\n  const handleMarginComments = (e) => {\r\n    setMarginCommentData(e.target.value);\r\n  };\r\n\r\n  const setMarginNotesDynami = () => {\r\n    const comment = [];\r\n    props?.selectedAnnotation.forEach((res) => {\r\n      if (res.anno_comment) {\r\n        let data = {\r\n          id: res.id,\r\n          mailid: res.mailid,\r\n          degn_id: res.degn_id,\r\n          enb_sent: res.enb_sent,\r\n          designationName: res.anno_from.designation,\r\n          branchName: res.anno_from.branch,\r\n          commentData: res.anno_comment,\r\n          color: res?.Color?.background,\r\n          time: new Date(res.createdAt).toLocaleTimeString(\"en-GB\"),\r\n          // updatedAt: new Date(res.updatedAt).toLocaleTimeString(),\r\n          date: new Date(res.createdAt).toLocaleDateString(\"en-GB\"),\r\n        };\r\n        comment.push(data);\r\n      }\r\n    });\r\n    setMarginNotes(comment);\r\n    setBeforeSelectedHandle(0);\r\n  };\r\n\r\n  const handleSubmitMarginComments = async (e) => {\r\n    e.preventDefault();\r\n    var selectedtext = PostHighlight(\"selector\", props.color, 1);\r\n\r\n    if (props?.selectedAnnotation.length > 0 || selectedtext.text.length > 0) {\r\n      selectedtext.color_id = props?.colorID;\r\n\r\n      const time = new Date().toLocaleTimeString(\"en-GB\");\r\n      const date = new Date().toLocaleDateString(\"en-GB\");\r\n      setMarginCommentData(\"\");\r\n      let commentData = {};\r\n\r\n      commentData = {\r\n        anno_text:\r\n          props?.selectedAnnotation.length > 0\r\n            ? props?.selectedAnnotation[0].anno_text\r\n            : selectedtext.text,\r\n        start_char:\r\n          props?.selectedAnnotation.length > 0\r\n            ? props?.selectedAnnotation[0].start_char\r\n            : selectedtext.start,\r\n        end_char:\r\n          props?.selectedAnnotation.length > 0\r\n            ? props?.selectedAnnotation[0].end_char\r\n            : selectedtext.end,\r\n        color_code_id: selectedtext.color_id,\r\n        mailid: props?.mailId,\r\n        anno_comment: marginCommentData,\r\n        mainMailId: props.uniqueMailId,\r\n      };\r\n\r\n      setStartChar(commentData?.start_char);\r\n      setEndChar(commentData?.end_char);\r\n\r\n      logDataFunction(\"SUBMIT COMMENT ON ANNOTATION MAIL\", 0, 0);\r\n      const resp = await Api.ApiHandle(\r\n        ANNOTATION_ADD,\r\n        commentData,\r\n        \"POST\",\r\n        logData\r\n      );\r\n      if (resp.status === 1) {\r\n        const comment = {\r\n          id: resp.data.id,\r\n          mailid: props?.mailId,\r\n          designationName: designation.designation,\r\n          branchName: designation.branch,\r\n          commentData: marginCommentData,\r\n          time: time,\r\n          date: date,\r\n        };\r\n        const _commentData = [];\r\n        _commentData.push(comment);\r\n        setMarginNotes([..._commentData, ...marginNotes]);\r\n        setBeforeSelectedHandle(0);\r\n      } else Toaster(\"error\", \"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const updateComment = async (e) => {\r\n    e.preventDefault();\r\n    const params = {\r\n      mailid: props.mailId,\r\n      anno_comment: marginCommentData,\r\n      id: editCommentId,\r\n    };\r\n    logDataFunction(\"UPDATE COMMENT ON ANNNOTATION MAIL\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION}/${editCommentId}`,\r\n      params,\r\n      \"PUT\",\r\n      logData\r\n    );\r\n\r\n    if (resp.status === 1) {\r\n      const _marginNotes = [...marginNotes];\r\n      _marginNotes.forEach((data) => {\r\n        if (data.id === editCommentId) data.commentData = marginCommentData;\r\n      });\r\n      setMarginNotes(_marginNotes);\r\n      setMarginCommentData(\"\");\r\n      setUpdateMode(false);\r\n    } else Toaster(\"error\", \"Something went wrong\");\r\n  };\r\n\r\n  const handleEditComment = (i, id) => {\r\n    setEditCommentId(id);\r\n    setUpdateMode(true);\r\n    let comment = marginNotes[i];\r\n    setMarginCommentData(comment.commentData);\r\n    marginNotesRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleDeleteComment = async (data, i) => {\r\n    const params = {\r\n      mailid: data.mailid,\r\n      id: data.id,\r\n    };\r\n    logDataFunction(\"DELETE COMMENT ON ANNOTATION MAIL\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION}/${data.id}`,\r\n      params,\r\n      \"delete\",\r\n      logData\r\n    );\r\n\r\n    if (resp.status === 1) {\r\n      marginNotes.splice(i, 1);\r\n      setMarginNotes([...marginNotes]);\r\n    } else Toaster(\"error\", \"Something went wrong\");\r\n  };\r\n\r\n  const handleAnnotationDelete = async () => {\r\n    const params = {\r\n      mailid: props?.mailId,\r\n      mainMailId: props?.uniqueMailId,\r\n      start_char: startChar === \"\" ? props?.startChar : startChar,\r\n      end_char: endChar === \"\" ? props?.endChar : endChar,\r\n    };\r\n    logDataFunction(\"DELETE ANNOTATION MAIL\", 0, 0);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${ANNOTATION_ADD}`,\r\n      params,\r\n      \"delete\",\r\n      logData\r\n    );\r\n    if (resp.status === 1) {\r\n      props?.setOpen(\"delete\");\r\n    } else {\r\n      Toaster(\"error\", \"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"right-jumbotron\">\r\n        <div className=\"jumbotron no-select\">\r\n          <span className=\"lead-text border-bottom p-2 pl-3 margin-heading\">\r\n            Margin Notes\r\n            <div className=\"margin-heading\">\r\n              {!beforeSelectedHandle && !enableSent && (\r\n                <div>\r\n                  <em\r\n                    className=\"icon ni ni-trash-fill\"\r\n                    style={{ marginRight: 27, marginTop: 8 }}\r\n                    onClick={handleAnnotationDelete}\r\n                  ></em>\r\n                </div>\r\n              )}\r\n              <div style={{ float: \"right\" }} onClick={props.closeMarginNotes}>\r\n                <em className=\"icon ni ni-cross-sm\"></em>\r\n              </div>\r\n            </div>\r\n          </span>\r\n          <div\r\n            className=\"jumbotron-overflow\"\r\n            style={{ height: marginNotes?.length > 0 ? \"370px\" : \"\" }}\r\n          >\r\n            <div className=\"margin-heading-highlighted\">\r\n              <div className=\"heading-margin\">\"{heading}\"</div>\r\n              {\r\n                <div className=\"highlight-by-heading\">\r\n                  <span className=\"highlight-by\">Highlighted by :</span>\r\n                  <ul>\r\n                    {props?.selectedAnnotation?.map((ann, i) => {\r\n                      return (\r\n                        ann?.anno_comment === null && (\r\n                          <li key={i}>\r\n                            {ann?.anno_from?.designation}-\r\n                            {ann?.anno_from?.branch}\r\n                          </li>\r\n                        )\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <div className=\"form-chat\" ref={marginNotesRef}>\r\n              <div className=\"form-group\">\r\n                <form>\r\n                  <textarea\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter Comments...\"\r\n                    rows=\"3\"\r\n                    value={marginCommentData}\r\n                    onChange={handleMarginComments}\r\n                  ></textarea>\r\n                  <button\r\n                    className=\"btn chat-btn\"\r\n                    disabled={marginCommentData.length < 1}\r\n                    onClick={\r\n                      updateMode ? updateComment : handleSubmitMarginComments\r\n                    }\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            {marginNotes.map((notes, i) => {\r\n              return (\r\n                <>\r\n                  <div key={`marginNotes${i}`}>\r\n                    {notes.commentData != \"\" && (\r\n                      <div\r\n                        className=\"chatbox-1 chat-bg-color-1\"\r\n                        style={{ backgroundColor: notes?.color }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          className=\"d-flex justify-content-between\"\r\n                        >\r\n                          <span className=\"lead-text\">{`${notes?.designationName}(${notes.branchName})`}</span>\r\n                          {!notes?.enb_sent && (\r\n                            <div>\r\n                              <em\r\n                                className=\"ni ni-edit-fill\"\r\n                                onClick={() => {\r\n                                  handleEditComment(i, notes.id);\r\n                                }}\r\n                              />\r\n                              <em\r\n                                className=\"ni ni-trash-fill\"\r\n                                onClick={() => {\r\n                                  handleDeleteComment(notes, i);\r\n                                }}\r\n                              />\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n\r\n                        <p className=\"text-justify\">{notes.commentData}</p>\r\n                        <hr></hr>\r\n                        <div>\r\n                          <ul className=\"list-inline d-flex justify-content-end\">\r\n                            <li>{notes.date}</li>\r\n                            <li>{notes.updatedAt || notes.time}</li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(MailMarginComments);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\MailBody.jsx",["574","575","576","577","578","579","580"],"import React, { useState, useEffect } from \"react\";\r\nimport { selectAndHighlightRange } from \"../../components/common/annotation\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { GET_COLOR_CODE, ANNOTATION_ADD } from \"../../config/constants\";\r\n\r\nfunction MailBody({\r\n  body,\r\n  call,\r\n  mail_id,\r\n  onClickAnnotation,\r\n  setusercolorcodeObj,\r\n  closeMarginNotes,\r\n  setLoadingDetails,\r\n  handleHighlightButton,\r\n  setAnnotationDataForPrint,\r\n  inboxMailData,\r\n  mailIds,\r\n}) {\r\n  let styleCode = `body{background-color:#ffff;}#iframeResult{background-color: #ffffff;height: 100%;width: 100%;}`;\r\n  let colorcodeObj = {};\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const handleTextSelector = (backgr, color_id) => {\r\n    handleHighlightButton(backgr, color_id);\r\n  };\r\n\r\n  let col = \"8\";\r\n  if (call == \"3-col\") {\r\n    col = \"12\";\r\n  }\r\n  if (call == \"3-col-print\") {\r\n    col = \"12\";\r\n  }\r\n  const [annoatationdata, setannoatationdata] = useState([]);\r\n  const [colorCodeApi, setColorCodeApi] = useState(false);\r\n  const [getAllAnnotationApi, setGetAllAnnotationApi] = useState(false);\r\n\r\n  useEffect(() => {\r\n    closeMarginNotes();\r\n    setannoatationdata([]);\r\n  }, [body]);\r\n\r\n  useEffect(() => {\r\n    if (colorCodeApi === true && getAllAnnotationApi === true) {\r\n      setLoadingDetails(true);\r\n    }\r\n  }, [colorCodeApi, getAllAnnotationApi]);\r\n\r\n  const handleheight = (e) => {\r\n    function myStopFunction() {\r\n      clearInterval(heightInt);\r\n    }\r\n    var heightInt = setInterval(() => {\r\n      if (e?.target?.contentWindow != null) {\r\n        myStopFunction();\r\n        if (e?.target?.contentDocument?.body !== null) {\r\n          e.target.contentDocument.body.innerHTML = `<div id=\"selector\">${e.target.contentDocument?.body?.innerHTML}</div><style>#selector{overflow-x: auto}img{page-break-before: always;max-width:100%;height:100%;}</style>`;\r\n          var innerWindow =\r\n            document?.getElementById(\"iframeResult\")?.contentWindow;\r\n          innerWindow.annoClick = annoClick;\r\n          innerWindow.getannotationcomment = getannotationcomment;\r\n          innerWindow.annoatationdata = annoatationdata;\r\n\r\n          let object = innerWindow.document.getElementById(\"selector\");\r\n          object.addEventListener(\"mouseup\", function (event) {\r\n            annoClick(event, colorcodeObj);\r\n          });\r\n\r\n          if (e?.target?.contentWindow?.document?.body != null) {\r\n            let height =\r\n              e?.target?.contentWindow?.document?.body?.scrollHeight + 50;\r\n\r\n            if (call == \"3-col-print\") {\r\n              height = height * 0.92;\r\n            }\r\n            e.target.style.height = height + \"px\";\r\n            getColorCode();\r\n            getAllAnnotation();\r\n          }\r\n        }\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  const getAllAnnotation = async () => {\r\n    let annotationData = [];\r\n    logDataFunction(\"ALL ANNOTATION MAIL\", 0, 0);\r\n    mailIds?.forEach(async (item, index) => {\r\n      const resp = await Api.ApiHandle(\r\n        `${ANNOTATION_ADD}?mailid=${inboxMailData}`,\r\n        \"\",\r\n        \"GET\",\r\n        logData\r\n      );\r\n      if (resp && resp?.status === 1) {\r\n        annotationData.push(...resp.data);\r\n      }\r\n      if (mailIds?.length - 1 === index) {\r\n        setGetAllAnnotationApi(true);\r\n        setannoatationdata(annotationData);\r\n        setAnnotation(annotationData);\r\n        setAnnotationDataForPrint(annotationData);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getColorCode = async () => {\r\n    logDataFunction(\"COLOUR CODE\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_COLOR_CODE}?mailid=${mail_id}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n    if (resp?.status === 1) {\r\n      setColorCodeApi(true);\r\n    }\r\n    colorcodeObj = resp?.data;\r\n    let innerWindow = document.getElementById(\"iframeResult\")?.contentWindow;\r\n    if (innerWindow) innerWindow.colorcodeObj = colorcodeObj;\r\n    setusercolorcodeObj(resp.data);\r\n  };\r\n\r\n  const setAnnotation = (data) => {\r\n    data.map((res) => {\r\n      selectAndHighlightRange(\r\n        \"selector\",\r\n        res.start_char,\r\n        res.end_char,\r\n        res?.Color?.background,\r\n        res.anno_comment\r\n      );\r\n    });\r\n    let sel = document\r\n      .getElementById(\"iframeResult\")\r\n      ?.contentWindow?.window.getSelection();\r\n    let range;\r\n    if (sel?.rangeCount && sel?.getRangeAt) {\r\n      range = sel?.getRangeAt(0);\r\n    }\r\n    if (range) {\r\n      sel?.removeAllRanges();\r\n    }\r\n  };\r\n\r\n  const annoClick = (e, asd) => {\r\n    const color_id = colorcodeObj?.id;\r\n    const backgr = colorcodeObj?.background;\r\n\r\n    handleTextSelector(backgr, color_id);\r\n  };\r\n\r\n  const getannotationcomment = (start, end) => {\r\n    onClickAnnotation(start, end);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style>{styleCode}</style>\r\n      <div className={`col-md-${col}`}>\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          scrolling=\"no\"\r\n          id=\"iframeResult\"\r\n          name=\"iframeResult\"\r\n          allowFullScreen={true}\r\n          onLoad={(e) => {\r\n            handleheight(e);\r\n          }}\r\n          srcDoc={body}\r\n        ></iframe>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MailBody;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Commentbox.jsx",["581"],"import { useState, useEffect } from \"react\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { formatDateTime } from \"../util/dateFormat/DateFormat\";\r\nimport { connect } from \"react-redux\";\r\nimport Axios from \"axios\";\r\nimport Toaster from \"../util/toaster/Toaster\";\r\nimport { LogApi } from \"../util/apiLog/LogApi\";\r\n\r\nconst Commentbox = (props) => {\r\n  const [openTextBox, setOpenTextBox] = useState(true);\r\n  const [downLoadAll, setDownLoadAll] = useState(false);\r\n  let attachment_ids = [];\r\n  let logData = {};\r\n\r\n  useEffect(() => {\r\n    setDownLoadAll(false);\r\n    if (props?.generalCommentData.length > 0) {\r\n      props?.generalCommentData.forEach((attachments) => {\r\n        attachments.attachmentList.forEach((attachment) => {\r\n          attachment_ids = [...attachment_ids, attachment.id];\r\n          if (attachment_ids.length > 0) {\r\n            setDownLoadAll(true);\r\n          } else {\r\n            setDownLoadAll(false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [props?.generalCommentData]);\r\n\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const handleOpenTextBox = () => {\r\n    setOpenTextBox((openTextBox) => !openTextBox);\r\n  };\r\n\r\n  const downlaodAttachment = (attachements) => {\r\n    // setSpinner({ bool: true, id: attachements.id });\r\n\r\n    if (attachements?.url.includes(\"http://\" || \"https://\")) {\r\n      let url = \"\";\r\n      if (attachements.host == null) {\r\n        url = attachements.url;\r\n      } else {\r\n        url = attachements.host + attachements.url;\r\n      }\r\n      let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/download/${attachements.id}`;\r\n      let name = url.split(\"/\");\r\n      let headers = {};\r\n\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n      logDataFunction(\"DOWNLOAD ATTACHMENT FROM COMMENT BOX\", props.mailId, [\r\n        attachements.id,\r\n      ]);\r\n      LogApi(logData);\r\n      Axios.get(apiurl, { responseType: \"blob\", headers: headers })\r\n        .then(async (res) => {\r\n          fileDownload(res.data, name[name.length - 1]);\r\n          // setSpinner(false);\r\n        })\r\n        .catch(function (error) {\r\n          Toaster(\"error\", error.message);\r\n          // setSpinner(false);\r\n        });\r\n    } else {\r\n      let apiurl = `${process.env.REACT_APP_BASE_API_URL}/api/attachment/downloadfile/${attachements.id}`;\r\n      let headers = {};\r\n\r\n      if (localStorage.getItem(\"auth\")) {\r\n        headers.Authorization = `Bearer ${localStorage.getItem(\"auth\")}`;\r\n      }\r\n      logDataFunction(\"DOWNLOAD ATTACHMENT FROM COMMENT BOX\", props.mailId, [\r\n        attachements.id,\r\n      ]);\r\n      LogApi(logData);\r\n\r\n      Axios.get(apiurl, { responseType: \"blob\", headers: headers })\r\n        .then(async (res) => {\r\n          fileDownload(res.data, attachements?.name);\r\n          // setSpinner(false);\r\n        })\r\n        .catch(function (error) {\r\n          Toaster(\"error\", error.message);\r\n          // setSpinner(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleDownloadAllAttachment = () => {\r\n    if (props?.generalCommentData.length > 0) {\r\n      props?.generalCommentData.forEach((attachments) => {\r\n        attachments.attachmentList.forEach((attachment) => {\r\n          return (attachment_ids = [...attachment_ids, attachment.id]);\r\n        });\r\n      });\r\n    }\r\n\r\n    const win = window.open(\r\n      `${process.env.REACT_APP_BASE_API_URL}/api/zipFile/downloadzip?attach_id=${attachment_ids}&user_id=${props.userData.id}`,\r\n      \"_blank\"\r\n    );\r\n    win?.focus();\r\n\r\n    logDataFunction(\r\n      \"DOWNLOAD ALL ATTACHMENT FROM COMMENT\",\r\n      props.mailId,\r\n      attachment_ids\r\n    );\r\n    attachment_ids = [];\r\n    LogApi(logData);\r\n  };\r\n\r\n  return (\r\n    props?.generalCommentData.length > 0 && (\r\n      <div>\r\n        {!openTextBox ? (\r\n          <div\r\n            className=\"jumbotron col-md-12 pt-4 \"\r\n            style={{\r\n              display: \"flex\",\r\n              marginRight: 10,\r\n              marginLeft: 10,\r\n              width: \"98.7%\",\r\n              justifyContent: \"space-between\",\r\n              cursor: \"default\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            <span\r\n              className=\"lead-text\"\r\n              style={{ color: \"#707070\", fontSize: 18 }}\r\n            >\r\n              Notes\r\n            </span>\r\n            <em\r\n              style={{ alignContent: \"center\" }}\r\n              className=\"ni ni-sort-down-fill\"\r\n              onClick={handleOpenTextBox}\r\n            ></em>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              display: \"flex\",\r\n              marginRight: 10,\r\n              marginLeft: 10,\r\n              width: \"98.7%\",\r\n              justifyContent: \"space-between\",\r\n              cursor: \"default\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            <div className=\"jumbotron col-md-12 pt-4\">\r\n              <div\r\n                className=\"comment-head\"\r\n                style={{\r\n                  marginBottom: 10,\r\n                  justifyContent: \"space-between\",\r\n                  cursor: \"default\",\r\n                }}\r\n              >\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <span\r\n                    className=\"lead-text\"\r\n                    style={{ color: \"#707070\", fontSize: 18 }}\r\n                  >\r\n                    Notes\r\n                  </span>\r\n                  {downLoadAll ? (\r\n                    <abbr\r\n                      title=\"Download All\"\r\n                      style={{ marginLeft: \"25rem\" }}\r\n                      onClick={handleDownloadAllAttachment}\r\n                    >\r\n                      <div className=\"btn btn-trigger btn-icon btn-tooltip\">\r\n                        <em className=\"icon ni ni-download\"></em>\r\n                      </div>\r\n                    </abbr>\r\n                  ) : null}\r\n                </div>\r\n\r\n                <em\r\n                  className=\"ni ni-sort-up-fill\"\r\n                  onClick={handleOpenTextBox}\r\n                ></em>\r\n              </div>\r\n\r\n              <div style={{ overflow: \"auto\", maxHeight: 250 }}>\r\n                {props?.generalCommentData?.map((comment, i) => {\r\n                  return (\r\n                    <div className=\"pt-3\" key={`generalComment${comment.id}`}>\r\n                      <div>\r\n                        <table>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td\r\n                                style={{\r\n                                  width: \"33%\",\r\n                                  color: \"#526484\",\r\n                                  fontWeight: \"bold\",\r\n                                }}\r\n                              >\r\n                                {`From: ${comment?.fromDesignationName}(${comment?.fromBranchName})`}\r\n                              </td>\r\n                              <td\r\n                                style={{\r\n                                  width: \"33%\",\r\n                                  color: \"#526484\",\r\n                                  fontWeight: \"bold\",\r\n                                }}\r\n                              >\r\n                                {comment?.toDesignationName !== undefined &&\r\n                                comment?.toId !== null\r\n                                  ? `To: ${comment?.toDesignationName}(${comment?.toBranchName})`\r\n                                  : \"\"}\r\n                              </td>\r\n                              <td style={{ padding: \"0px 20px\" }}>\r\n                                <div className=\"comment-time\">\r\n                                  {formatDateTime(comment?.createdTime)}\r\n                                </div>\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n\r\n                      <pre className=\"text-justify comment-text\">\r\n                        {comment?.commentData}\r\n                      </pre>\r\n\r\n                      <div className=\"attachment-list-commentBox\">\r\n                        {comment?.attachmentList?.length > 0 && (\r\n                          <div className=\"attachment-name-commentBox\">\r\n                            Attached Files:\r\n                          </div>\r\n                        )}\r\n                        {comment?.attachmentList?.length > 0 &&\r\n                          comment?.attachmentList?.map((item, i) => {\r\n                            return (\r\n                              <div\r\n                                className=\"attachment-commentBox\"\r\n                                key={`attachmentList${i}`}\r\n                                onClick={() => downlaodAttachment(item)}\r\n                              >\r\n                                <div className=\"attachment-commentbox-header\">\r\n                                  <abbr title={`${item?.name}`}>\r\n                                    {item?.name}\r\n                                  </abbr>\r\n                                </div>\r\n                                <em\r\n                                  className=\"icon ni ni-download\"\r\n                                  style={{\r\n                                    fontSize: 17,\r\n                                    color: \"black\",\r\n                                    textDecoration: \"none\",\r\n                                  }}\r\n                                ></em>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\nexport default connect(mapStateToProps)(Commentbox);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\DocView.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\Topreplaybuttons.jsx",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\views\\mailview\\AddAttachment.jsx",["582"],"import React, { useRef, useState } from \"react\";\r\nimport { UPLOAD_ATTACHMENT } from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { LogApi } from \"../../util/apiLog/LogApi\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\n\r\nfunction AddAttachment({\r\n  setFileUploading,\r\n  mailId,\r\n  setattachment,\r\n  attachment,\r\n  isFileUploading,\r\n}) {\r\n  const inputFile = useRef(null);\r\n  let logData = {};\r\n\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const handleInputFile = () => {\r\n    inputFile.current.click();\r\n  };\r\n\r\n  const handleAttachFile = (e) => {\r\n    setFileUploading(true);\r\n\r\n    let val = attachment.map((item) => {\r\n      return item.name;\r\n    });\r\n\r\n    [...e.target.files].forEach(async (item) => {\r\n      let str = item?.name;\r\n      let lastIndex = str.lastIndexOf(\".\");\r\n      let filename = str.slice(0, lastIndex);\r\n      let extname = str.slice(lastIndex + 1);\r\n      if (extname === \"exe\") {\r\n        Toaster(\"error\", \"Incorrect File Format(.exe)\");\r\n        setFileUploading(false);\r\n      } else if (extname === \"json\") {\r\n        Toaster(\"error\", \"Incorrect File Format(.json)\");\r\n        setFileUploading(false);\r\n      } else if (val.includes(item?.name)) {\r\n        Toaster(\"error\", \"File already exist with same name !!\");\r\n        setFileUploading(false);\r\n      } else {\r\n        let fileNameSeparation = filename;\r\n\r\n        const data = new FormData();\r\n\r\n        data.append(\"images\", item);\r\n        data.append(\"imagename\", `${fileNameSeparation}`);\r\n        data.append(\"mailId\", mailId);\r\n        logDataFunction(\"CLICK ON UPLOAD ATTACHMENT\", mailId, 0);\r\n        const resp = await Api.ApiHandle(\r\n          `${UPLOAD_ATTACHMENT}`,\r\n          data,\r\n          \"post\",\r\n          logData\r\n        );\r\n        if (resp?.status === 1) {\r\n          setattachment((prev) => [...prev, resp.data]);\r\n          setFileUploading(false);\r\n          logDataFunction(\"UPLOAD ATTACHMENT\", mailId, [resp?.data?.id]);\r\n          await LogApi(logData);\r\n        } else {\r\n          Toaster(\"error\", \"Something went wrong!!\");\r\n          setFileUploading(false);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <abbr title=\"Add attachment\">\r\n        <input\r\n          multiple\r\n          type=\"file\"\r\n          id=\"file\"\r\n          ref={inputFile}\r\n          style={{ display: \"none\" }}\r\n          onChange={handleAttachFile}\r\n          disabled={isFileUploading}\r\n        />\r\n        <em className=\"icon ni ni-clip-v\" onClick={handleInputFile}></em>\r\n      </abbr>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddAttachment;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\print\\printView.jsx",["583"],"import React, { useEffect } from \"react\";\r\nimport { formatDateTime } from \"../../util/dateFormat/DateFormat\";\r\n\r\nconst PrintView = (props) => {\r\n  useEffect(() => {\r\n    handlePrint(\"Print\");\r\n  }, [props?.generalComment]);\r\n\r\n  const handlePrint = (divName) => {\r\n    var printContents = document.getElementById(divName).innerHTML;\r\n    var popupWin = window.open(\"Print\");\r\n    popupWin.document.open();\r\n    popupWin.document.write(\r\n      `<html><head><title>Print Page</title>\r\n      <style>img{max-width: 100%; page-break-before: always;}</style>\r\n       </head><body onload=\"window.print();\" style=\"-webkit-print-color-adjust: exact;\">\r\n      <div id=\"printAnnotation\">\r\n      ${printContents}\r\n      </div>\r\n      </body>\r\n        </html>`\r\n    );\r\n    popupWin.document.close();\r\n    popupWin.focus();\r\n  };\r\n\r\n  const notesData = (data) => {\r\n    return data?.map((anno, i) => {\r\n      return (\r\n        <>\r\n          {anno?.anno_comment === null && (\r\n            <div style={{ margin: \"2%\" }}>\r\n              Highlighted By: {anno.anno_from.designation}-\r\n              {anno?.anno_from?.branch}\r\n            </div>\r\n          )}\r\n          <div\r\n            style={{ display: \"flex\", marginLeft: \"2%\", marginTop: \"2%\" }}\r\n            key={`marginNotesData${i}`}\r\n          >\r\n            <span\r\n              style={{\r\n                fontSize: 17,\r\n                fontWeight: 800,\r\n                marginBottom: 11,\r\n                color: \"#364a63\",\r\n                display: \"block\",\r\n              }}\r\n            >\r\n              {`From :  ${anno.anno_from.designation}-${anno?.anno_from?.branch}`}\r\n            </span>\r\n            <span\r\n              style={{\r\n                marginTop: 3,\r\n                fontFamily: \"serif\",\r\n                fontWeight: 500,\r\n                fontSize: 15,\r\n                marginLeft: 15,\r\n              }}\r\n            >\r\n              {formatDateTime(anno?.createdAt)}\r\n            </span>\r\n          </div>\r\n          <p style={{ textAlign: \"justify\", marginLeft: \"3%\" }}>\r\n            {anno?.anno_comment}{\" \"}\r\n          </p>\r\n        </>\r\n      );\r\n    });\r\n  };\r\n\r\n  const html = document\r\n    ?.getElementById(\"iframeResult\")\r\n    ?.contentWindow?.document?.getElementById(\"selector\")?.innerHTML;\r\n\r\n  return (\r\n    <div\r\n      className=\"nk-ibx-reply nk-reply\"\r\n      id=\"Print\"\r\n      style={{\r\n        display: \"inline\",\r\n        height: \"100%\",\r\n        maxHeight: \"100%\",\r\n        fontFamily: \"Roboto, sans-serif\",\r\n        \"-webkit-print-color-adjust\": \"exact\",\r\n        WebkitPrintColorAdjust: \"exact\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"nk-ibx-reply-head\"\r\n        style={{\r\n          width: \"100%\",\r\n          paddingLeft: \"1.75rem\",\r\n          paddingRight: \"1.75rem\",\r\n\r\n          display: \"flex\",\r\n          padding: \"1.5rem 1.25rem 0\",\r\n          alignItems: \"flex-start\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <div className=\"no-select\" style={{ marginLeft: -20 }}>\r\n          <div\r\n            className=\"subject-section\"\r\n            style={{ display: \"flex\", fontSize: \"1.5em\", marginBottom: -25 }}\r\n          >\r\n            <h4 className=\"title\" style={{ color: \"#707070\" }}>\r\n              {props.subject}\r\n            </h4>\r\n          </div>\r\n          <div className=\"text-ul\" style={{ marginBottom: 10, fontSize: 16 }}>\r\n            <ul\r\n              className=\"list-inline\"\r\n              style={{ paddingLeft: 0, listStyle: \"none\", margin: 0 }}\r\n            >\r\n              {props?.op !== null && props?.op !== \"\" ? (\r\n                <li\r\n                  style={{\r\n                    marginRight: \"1rem\",\r\n                    color: \"#707070\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                >\r\n                  Ops Name: {props.op}\r\n                </li>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <li\r\n                style={{\r\n                  marginRight: \"1rem\",\r\n                  color: \"#707070\",\r\n                  fontWeight: \"bold\",\r\n                  display: \"inline-block\",\r\n                }}\r\n              >\r\n                Date: {props.time}\r\n              </li>\r\n              <li\r\n                style={{\r\n                  marginRight: \"1rem\",\r\n                  color: \"red\",\r\n                  fontWeight: \"bold\",\r\n                  display: \"inline-block\",\r\n                }}\r\n              >\r\n                {props.crashed ? \"(Crash Message)\" : \"\"}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <div\r\n        style={{ margin: \"12px 1px\", display: \"flex\", flexDirection: \"column\" }}\r\n      >\r\n        <span\r\n          style={{\r\n            fontFamily: \"ui-monospace\",\r\n            fontSize: 16,\r\n            fontWeight: \"bold\",\r\n            marginBottom: 5,\r\n          }}\r\n        >\r\n          {\"From:\" + !props.sourceDesignation && !props?.sourceBranch\r\n            ? `-`\r\n            : !props.sourceDesignation && props?.sourceBranch\r\n            ? `${props?.sourceBranch}`\r\n            : props.sourceDesignation && !props?.sourceBranch\r\n            ? `${props.sourceDesignation}`\r\n            : props.sourceDesignation && props?.sourceBranch\r\n            ? `${props.sourceDesignation}(${props?.sourceBranch})`\r\n            : `-`}\r\n        </span>\r\n        <span\r\n          style={{\r\n            fontFamily: \"ui-monospace\",\r\n            fontSize: 16,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          To:\r\n          {props.to?.map((item, i) =>\r\n            props?.to?.length !== i + 1\r\n              ? `${item?.designation}(${item?.branch}), `\r\n              : `${item?.designation}(${item?.branch})`\r\n          )}\r\n        </span>\r\n      </div>\r\n      <div className=\"nk-ibx-reply-group\">\r\n        <div className=\"nk-ibx-reply-item\">\r\n          <div className={\"nk-reply-body nk-ibx-reply-body is-shown\"}>\r\n            <div className=\"row \">\r\n              {/* <MailBodyPrint\r\n                body={props.body}\r\n                call={props.call}\r\n                mail_id={props?.mailId}\r\n              /> */}\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: html,\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {props?.attachmentList?.length > 0 && (\r\n        <div>\r\n          <div\r\n            style={{\r\n              margin: \"12px 1px\",\r\n              fontFamily: \"ui-monospace\",\r\n              fontSize: 16,\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            List of Attachments:\r\n          </div>\r\n          <div>\r\n            <ul>\r\n              {props?.attachmentList?.map((attach, id) => {\r\n                return (\r\n                  <li key={id} style={{ color: \"grey\" }}>\r\n                    {attach?.body_flag === 0\r\n                      ? attach?.name\r\n                      : \"Original Document\"}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div id=\"comment\"></div>\r\n      {props?.generalCommentData?.length > 0 ? (\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            marginLeft: -3,\r\n            marginRight: -3,\r\n            marginTop: 30,\r\n            borderRadius: 10,\r\n            backgroundColor: \"#e9ecef\",\r\n            borderRadius: 5,\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          <div className=\"col-md-12 pt-4\">\r\n            <div\r\n              className=\"comment-head\"\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: 14,\r\n                justifyContent: \"space-between\",\r\n                paddingLeft: 15,\r\n                paddingTop: 15,\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <div style={{ display: \"flex\" }}>\r\n                <span\r\n                  className=\"lead-text\"\r\n                  style={{\r\n                    display: \"block\",\r\n                    fontWeight: 700,\r\n                    color: \"#707070\",\r\n                    fontSize: 21,\r\n                  }}\r\n                >\r\n                  Notes\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ paddingLeft: 23 }}>\r\n              {props?.generalCommentData?.map((comment, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"pt-3\"\r\n                    style={{ paddingBottom: 3 }}\r\n                    key={`generalComment${comment.id}`}\r\n                  >\r\n                    {/* <div style={{ display: \"flex\" }}>\r\n                      <span\r\n                        className=\"lead-text\"\r\n                        style={{\r\n                          color: \"#707070\",\r\n                          fontSize: \"0.875rem\",\r\n                          fontWeight: 700,\r\n                          display: \"block\",\r\n                        }}\r\n                      >\r\n                        {`${comment?.designationName}(${comment?.branchName})`}\r\n                      </span>\r\n                    </div> */}\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td\r\n                            style={{\r\n                              width: \"37%\",\r\n                              color: \"#526484\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {`From: ${comment?.fromDesignationName}(${comment?.fromBranchName})`}\r\n                          </td>\r\n                          <td\r\n                            style={{\r\n                              width: \"33%\",\r\n                              color: \"#526484\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {comment?.toDesignationName !== undefined &&\r\n                            comment?.toId !== null\r\n                              ? `To: ${comment?.toDesignationName}(${comment?.toBranchName})`\r\n                              : \"\"}\r\n                          </td>\r\n                          <td style={{ padding: \"0px 20px\" }}>\r\n                            <div className=\"comment-time\">\r\n                              {formatDateTime(comment?.createdTime)}\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <p\r\n                      className=\"text-justify\"\r\n                      style={{\r\n                        paddingRight: 10,\r\n                        marginTop: 3,\r\n                        marginLeft: 7,\r\n                      }}\r\n                    >\r\n                      {comment?.commentData}\r\n                    </p>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        marginTop: \"2%\",\r\n                      }}\r\n                    >\r\n                      {comment?.attachmentList?.length > 0 && (\r\n                        <div\r\n                          style={{\r\n                            marginRight: \"1%\",\r\n                            fontWeight: \"500\",\r\n                            color: \"black\",\r\n                            width: \"6%\",\r\n                            fontStyle: \"italic\",\r\n                            flexWrap: \"wrap\",\r\n                          }}\r\n                        >\r\n                          Attached Files:\r\n                        </div>\r\n                      )}\r\n                      {comment?.attachmentList?.length > 0 &&\r\n                        comment?.attachmentList?.map((item, i) => {\r\n                          return (\r\n                            <div\r\n                              style={{\r\n                                marginRight: \"2%\",\r\n                                // width: \"10%\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                color: \"#55aee2\",\r\n                              }}\r\n                              className=\"attachment-commentBox\"\r\n                              key={`attachmentList${i}`}\r\n                            >\r\n                              <div\r\n                                className=\"attachment-commentbox-header\"\r\n                                style={{ width: \"100%\", marginLeft: \"5%\" }}\r\n                              >\r\n                                <abbr title={`${item?.name}`}>\r\n                                  {item?.name}\r\n                                </abbr>\r\n                              </div>\r\n                              <em\r\n                                className=\"icon ni ni-download\"\r\n                                style={{\r\n                                  fontSize: 17,\r\n                                  color: \"black\",\r\n                                  textDecoration: \"none\",\r\n                                }}\r\n                              ></em>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {Object.keys(props?.annotationText).length > 0 && (\r\n        <div\r\n          style={{\r\n            padding: 1,\r\n            background: \"#e9ebff\",\r\n            marginTop: 40,\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div style={{ padding: \"20px 0px 0px\", background: \"#e9ebff\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: 20,\r\n                fontWeight: \"bold\",\r\n                fontFamily: \"ui-monospace\",\r\n                margin: 20,\r\n              }}\r\n            >\r\n              Margin Notes\r\n            </span>\r\n          </div>\r\n          {Object.keys(props?.annotationText).map((ann, i) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  border: \"1px solid grey\",\r\n                  margin: \"20px 50px\",\r\n                  background: \"#e2e2e2\",\r\n                  borderRadius: 5,\r\n                }}\r\n                key={`marginComments${i}`}\r\n              >\r\n                <div\r\n                  style={{\r\n                    padding: \"5px 20px\",\r\n                    fontFamily: \"Segoe UI-MONOSPACE\",\r\n                  }}\r\n                >\r\n                  {`\"${ann}\"`}\r\n                </div>\r\n                {notesData(props?.annotationText[ann])}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrintView;\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\redux\\action_types\\index.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\profileDropdown\\index.js",[],"C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\ForwardTo.jsx",["584","585","586","587","588","589","590"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-awesome-modal\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  COMMENT_ON_MAIL,\r\n  FREQUENT_ADDRESSES,\r\n  GET_PRE_DEFINED_COMMENTS,\r\n} from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport ComposeTo from \"../common/compose_to\";\r\nimport { updateSentCall } from \"../../redux/action/InboxAction\";\r\n\r\nfunction ForwardTo({ setOperateForwardTo, operateForwardTo, ...props }) {\r\n  const [to, setTo] = useState([]);\r\n  const [commonAddresses, setCommonAddresses] = useState([]);\r\n  const [allCommonAddresses, setAllCommonAddresses] = useState([]);\r\n  const [preDefinedComments, setPreDefinedComments] = useState([]);\r\n  const [actualFrequentAddress, setActualFrequentAddress] = useState([]);\r\n  const [disableSendButton, setDisableSendButton] = useState(false);\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [inputCommentData, setInputCommentData] = useState(\"\");\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    getFrequentAddresses();\r\n    getPreDefinedComments();\r\n  }, []);\r\n\r\n  const handleToData = (selected, unselected) => {\r\n    setTo(selected);\r\n\r\n    if (selected.length > 0) {\r\n      if (unselected.hasOwnProperty(\"removedValue\")) {\r\n        const deselectedFrequentAddress = actualFrequentAddress.filter(\r\n          (item) => {\r\n            if (item.id === unselected.removedValue.id) return item;\r\n          }\r\n        );\r\n\r\n        setCommonAddresses((prev) => [...prev, ...deselectedFrequentAddress]);\r\n      } else {\r\n        setCommonAddresses(\r\n          commonAddresses.filter(\r\n            (item) => item?.id !== selected[selected.length - 1].id\r\n          )\r\n        );\r\n      }\r\n    } else setCommonAddresses(actualFrequentAddress);\r\n  };\r\n\r\n  const handleFrequentAddresses = (common, id) => {\r\n    setTo((prev) => [...prev, common]);\r\n\r\n    setCommonAddresses(commonAddresses.filter((item) => item?.id !== id));\r\n  };\r\n\r\n  const getFrequentAddresses = async () => {\r\n    const designation = props?.userData?.designations?.filter((item) => {\r\n      if (item.default_desig) return item;\r\n    });\r\n    logDataFunction(\"LIST OF FREQUENT ADDRESSES\", 0, 0);\r\n    const resp = await Api.ApiHandle(`${FREQUENT_ADDRESSES}?type=${props?.isMostFrequent}`, \"\", \"GET\", logData);\r\n\r\n    if (resp && resp?.status === 1) {\r\n      const _commonAddresses = [];\r\n      resp?.data?.map((com) => {\r\n        if (designation?.designation !== com?.designation) {\r\n          const common = {\r\n            id: com?.id,\r\n            branch: com?.branch,\r\n            designation: com?.designation,\r\n            belongsTo: \"commonAddresses\",\r\n          };\r\n          _commonAddresses.push(common);\r\n        }\r\n      });\r\n      setActualFrequentAddress(_commonAddresses);\r\n\r\n      setCommonAddresses(_commonAddresses);\r\n      setAllCommonAddresses(_commonAddresses);\r\n    }\r\n  };\r\n\r\n  const handleInputCommentData = (e) => {\r\n    setInputCommentData(e.target.value);\r\n  };\r\n\r\n  const getPreDefinedComments = async () => {\r\n    logDataFunction(\"GET PRE-DEFINED COMMENT\", 0, 0);\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_PRE_DEFINED_COMMENTS}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp && resp?.status === 1) {\r\n      const _preDefinedComments = [];\r\n      resp?.data?.map((com) => {\r\n        const comments = {\r\n          comments: com.content,\r\n        };\r\n        _preDefinedComments.push(comments);\r\n      });\r\n\r\n      setPreDefinedComments(_preDefinedComments);\r\n    }\r\n  };\r\n\r\n  const handlePreDefinedComment = (com) => {\r\n    setInputCommentData(\r\n      inputCommentData === \"\" ? `${com}` : `${inputCommentData}, ${com} `\r\n    );\r\n  };\r\n\r\n  const handleSendComment = async () => {\r\n    if (to.length <= 0) {\r\n      Toaster(\"error\", \"To Recipient is required \");\r\n      setDisableSendButton(true);\r\n      setTimeout(() => {\r\n        setDisableSendButton(false);\r\n      }, 3000);\r\n    } else {\r\n      setDisableSendButton(true);\r\n      let payload = {};\r\n\r\n      to?.forEach(async (toID, toIndex) => {\r\n        props.selectedMail.map(async (user_mail_id, mailIndex) => {\r\n          if (inputCommentData === \"\") {\r\n            payload = {\r\n              to: toID.id,\r\n              user_mail_id: user_mail_id,\r\n              mail_action: props.selectedMailData[mailIndex].mailAction,\r\n              from_action: props.selectedMailData[mailIndex].fromAction,\r\n              mail_id: props.selectedMailData[mailIndex].userMailId,\r\n              action: \"Forward\",\r\n            };\r\n          } else {\r\n            payload = {\r\n              to: toID.id,\r\n              user_mail_id: user_mail_id,\r\n              comment: inputCommentData,\r\n              mail_action: props.selectedMailData[mailIndex].mailAction,\r\n              from_action: props.selectedMailData[mailIndex].fromAction,\r\n              mail_id: props.selectedMailData[mailIndex].userMailId,\r\n              action: \"Forward\",\r\n            };\r\n          }\r\n\r\n          // setDisableSendButton(false);\r\n\r\n          logDataFunction(\"COMMENT\", 0, 0);\r\n          const resp = await Api.ApiHandle(\r\n            `${COMMENT_ON_MAIL}`,\r\n            payload,\r\n            \"POST\",\r\n            logData\r\n          );\r\n\r\n          if (resp && resp.status !== 1) {\r\n            if (mailIndex === props.selectedMail.length - 1) {\r\n              Toaster(\"error\", \"Some error occurred\");\r\n              setDisableSendButton(false);\r\n              setOperateForwardTo(false);\r\n            }\r\n          } else {\r\n            if (mailIndex === props.selectedMail.length - 1) {\r\n              setInputCommentData(\"\");\r\n              props.setSelectedMail([]);\r\n              Toaster(\r\n                \"success\",\r\n                `Message sent successfully to ${toID.designation}(${toID.branch}) `\r\n              );\r\n              setDisableSendButton(false);\r\n              setTo([]);\r\n              setOperateForwardTo(false);\r\n              props.updateSentCall(0);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      className=\"modal fade\"\r\n      visible={operateForwardTo}\r\n      id=\"add-folder\"\r\n      width=\"800\"\r\n      height=\"auto\"\r\n      effect=\"fadeInUp\"\r\n    >\r\n      <div className=\"nk-reply-form-header\">\r\n        <div className=\"nk-reply-form-group\">\r\n          {/* <div className=\"nk-reply-form-title d-sm-none\">Reply</div> */}\r\n          <div className=\"nk-reply-form-input-group\">\r\n            <div className=\"mark-leave-tag-container\">\r\n              <h2 style={{ fontSize: \"161%\" }}>Forward To...</h2>\r\n              <em\r\n                className=\"icon ni ni-cross\"\r\n                onClick={() => {\r\n                  setOperateForwardTo(false);\r\n                }}\r\n              ></em>\r\n            </div>\r\n            <hr style={{ marginBottom: \"0rem\" }}></hr>\r\n            {/* to for the comment */}\r\n\r\n            <ComposeTo\r\n              to={to}\r\n              designationList={designationList}\r\n              setTo={setTo}\r\n              commonAddresses={commonAddresses}\r\n              setCommonAddresses={setCommonAddresses}\r\n              allCommonAddresses={allCommonAddresses}\r\n              handleFrequentAddresses={handleFrequentAddresses}\r\n              isFullSize={true}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"no-select\">\r\n        <div className=\"nk-reply-form-editor\">\r\n          <div className=\"nk-reply-form-field\">\r\n            <textarea\r\n              className=\"form-control form-control-simple no-resize\"\r\n              placeholder=\"Enter Comments...\"\r\n              value={inputCommentData}\r\n              onChange={handleInputCommentData}\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"nk-reply-form-tools\">\r\n          <ul\r\n            className=\"nk-reply-form-actions g-1\"\r\n            style={{ flexWrap: \"wrap\" }}\r\n          >\r\n            {preDefinedComments?.map((com, i) => {\r\n              return (\r\n                <li\r\n                  key={`preDefinedComments${i}`}\r\n                  className=\"mr-2\"\r\n                  onClick={() => handlePreDefinedComment(com.comments)}\r\n                >\r\n                  <div className=\"myButton\">{com.comments}</div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <div className=\"nk-reply-form-tools\">\r\n          <ul className=\"nk-reply-form-actions g-1\">\r\n            <li className=\"mr-2\">\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                type=\"submit\"\r\n                onClick={handleSendComment}\r\n                disabled={disableSendButton}\r\n              >\r\n                Send\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst mapActionToProps = {\r\n  updateSentCall,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\nisMostFrequent:state.isMostFrequent\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(ForwardTo);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\FolderAdd.jsx",["591"],"import Modal from \"react-awesome-modal\";\r\nimport { NavLink } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { BULK_UPDATE } from \"../../config/constants\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport Toaster from \"../../util/toaster/Toaster\";\r\nimport {\r\n  updateAddToFolderCache,\r\n  updateFolderCachedData,\r\n} from \"../../redux/action/InboxAction\";\r\nimport profileDropdown from \"../profileDropdown\";\r\nimport Loading from \"../../util/loader/Loading\";\r\n\r\nconst FolderAdd = (props) => {\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  const handleAddToFolder = async (folderId) => {\r\n    let mail_ids = [];\r\n    let userMailIds = [];\r\n    props.setLoader(true);\r\n    // props.setIsFolderLoaderId((prev) => [...prev, folderId]);\r\n    props.setIsFolderLoaderId(folderId);\r\n    // if (props?.folderCachedData[folderId] !== undefined) {\r\n    //   props?.updateAddToFolderCache(props?.folderCachedData[folderId]);\r\n    //   props?.updateFolderCachedData(\"delete\");\r\n    // }\r\n    props.selectedMailData.forEach((item) => {\r\n      mail_ids.push(item.userMailId);\r\n      userMailIds.push(item.id);\r\n    });\r\n\r\n    const payload = {\r\n      mail_ids: mail_ids,\r\n      action: { folder: folderId },\r\n      userMailIds,\r\n    };\r\n    logDataFunction(\"ADD MAIL TO ANOTHER FOLDER\", 0, 0);\r\n    const resp = await Api.ApiHandle(`${BULK_UPDATE}`, payload, \"PUT\", logData);\r\n    if (resp.status !== 1) {\r\n      Toaster(\"error\", \"Some error occurred\");\r\n      props.setLoader(false);\r\n      props.setIsFolderLoaderId(\"\");\r\n    } else {\r\n      props.setLoader(false);\r\n      Toaster(\"success\", `Mail added to folder successfully.`);\r\n      props.setSelectedMail([]);\r\n      props.setAddToFolder(!props.addToFolder);\r\n      props.setSelectedMailData([]);\r\n      props.setIsFolderLoaderId(\"\");\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      if (typeof props.isActiveModule !== \"string\") {\r\n        props.setFilterOptions({\r\n          folder: props.isActiveModule,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const displayFolders = props.folderList.map((item, index) => (\r\n    <li\r\n      style={{ cursor: \"pointer\" }}\r\n      key={index}\r\n      onClick={() => handleAddToFolder(item.apiFolderId)}\r\n    >\r\n      <NavLink>\r\n        <em\r\n          className=\"ni ni-folder-fill\"\r\n          style={{ color: item.apiColorCode }}\r\n        ></em>\r\n        <span className=\"nk-ibx-label-text\" style={{ paddingTop: \"2px\" }}>\r\n          {item.apiFolderName}\r\n        </span>\r\n      </NavLink>\r\n    </li>\r\n  ));\r\n  return (\r\n    <>\r\n      <Modal\r\n        // className=\"modal fade\"\r\n        visible={props.addToFolder}\r\n        id=\"add-folder\"\r\n        width=\"600\"\r\n        height=\"385\"\r\n        effect=\"fadeInUp\"\r\n        onClickAway={() => {\r\n          props.setAddToFolder(!props.addToFolder);\r\n        }}\r\n      >\r\n        <div className=\"nk-reply-form-header\">\r\n          <div className=\"nk-reply-form-group\">\r\n            <div className=\"nk-reply-form-input-group\">\r\n              <div className=\"mark-leave-tag-container\">\r\n                <h2 style={{ fontSize: \"161%\" }}>Add to folder</h2>\r\n                <em\r\n                  className=\"icon ni ni-cross\"\r\n                  onClick={() => {\r\n                    props.setAddToFolder(!props.addToFolder);\r\n                  }}\r\n                />\r\n              </div>\r\n              <hr />\r\n              <div className=\"nk-reply-form-input nk-reply-form-input-to myoverflow\">\r\n                {props.loader ? (\r\n                  <Loading />\r\n                ) : (\r\n                  <ul className=\"typeNone\">{displayFolders}</ul>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapActionToProps = {\r\n  updateAddToFolderCache: updateAddToFolderCache,\r\n  updateFolderCachedData: updateFolderCachedData,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  folderList: state.folderList,\r\n  isActiveModule: state.isActiveModule,\r\n  folderCachedData: state.folderCachedData,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(FolderAdd);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\3ColumnView\\views\\InboxList.jsx",["592","593","594","595"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction InboxList({ inbox, selected, onClick, selectedMail, ...props }) {\r\n  const [activeMail, setActiveMail] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setActiveMail(selectedMail);\r\n  }, [selectedMail]);\r\n  // console.log(inbox);\r\n  // console.log(selected);\r\n  useEffect(() => {\r\n    addRead();\r\n  }, [selected]);\r\n\r\n  const addRead = () => {\r\n    if (selected === \"unread\") {\r\n      inbox?.map((inb) => {\r\n        inb.read = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  const markRead = (id) => {\r\n    if (selected === \"unread\") {\r\n      inbox?.map((inb) => {\r\n        if (inb?.id === id) {\r\n          inb.read = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"nk-ibx-list jumbotron-overflow\"\r\n      style={{\r\n        // borderBottom: \"1px solid lightgray\",\r\n        borderTop: \"1px solid lightgray\",\r\n        maxHeight: \"calc(83vh - 6px)\",\r\n        overflowY: \"auto\",\r\n        paddingBottom: \"5px\",\r\n      }}\r\n    >\r\n      {inbox?.map((inb, i) => (\r\n        <div\r\n          className={`nk-ibx-item ${\r\n            selected !== \"sent\"\r\n              ? selected === \"unread\"\r\n                ? \"addBottomBorder\"\r\n                : inb?.isRead\r\n                ? \"active \"\r\n                : \"addBottomBorder\"\r\n              : inb?.fromIsRead\r\n              ? \"active\"\r\n              : props.userData.designations[0].id === inb.actualFormId\r\n              ? \"addBottomBorder\"\r\n              : \"active\"\r\n          }`}\r\n          key={`inboxList${i}`}\r\n          style={\r\n            inb?.isCrashed === 1 && inb?.isRead === 0\r\n              ? { backgroundColor: \"#FF4F4F\" }\r\n              : inb?.read === true\r\n              ? { backgroundColor: \"#e8e8e8\" }\r\n              : null\r\n          }\r\n          onClick={() => {\r\n            // console.log(inb.id, i);\r\n            onClick(inb?.id, i);\r\n            setActiveMail(inb.id);\r\n            markRead(inb?.id);\r\n          }}\r\n        >\r\n          <div className=\"nk-ibx-item-elem nk-ibx-item-user\">\r\n            <div className=\"user-card\">\r\n              <div className=\"user-name\">\r\n                <div\r\n                  className=\"lead-text\"\r\n                  style={\r\n                    inb?.isCrashed === 1 && inb?.isRead === 0\r\n                      ? { color: \"white\", fontWeight: \"bolder\" }\r\n                      : { fontWeight: \"bolder\", color: \"gray\" }\r\n                  }\r\n                >\r\n                  {selected === \"sent\"\r\n                    ? \"Me\"\r\n                    : props.userData.designations[0].id == inb.from_id\r\n                    ? \"Me\"\r\n                    : inb?.from !== \"\" && inb?.branch !== \"\"\r\n                    ? `${inb?.from}(${inb?.branch})`\r\n                    : inb?.from !== \"\" && inb?.branch === \"\"\r\n                    ? `${inb?.from}`\r\n                    : inb?.from === \"\" && inb?.branch !== \"\"\r\n                    ? `${inb?.branch}`\r\n                    : inb?.from === \"\" && inb?.branch === \"\"\r\n                    ? `-`\r\n                    : `-`}\r\n\r\n                  {selected === \"sent\" && (\r\n                    <div className=\"lead-text\" style={{ fontWeight: 500 }}>\r\n                      To :{\" \"}\r\n                      {inb?.toDesignation !== \"\" && inb?.toBranch !== \"\"\r\n                        ? `${inb?.toDesignation}(${inb?.toBranch})`\r\n                        : inb?.toDesignation !== \"\" && inb?.toBranch === \"\"\r\n                        ? `${inb?.toDesignation}`\r\n                        : inb?.toDesignation === \"\" && inb?.toBranch !== \"\"\r\n                        ? `${inb?.toBranch}`\r\n                        : inb?.toDesignation === \"\" && inb?.toBranch === \"\"\r\n                        ? `-`\r\n                        : `-`}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"nk-ibx-item-elem nk-ibx-item-fluid\"\r\n            style={{ marginRight: -37 }}\r\n          >\r\n            <div className=\"nk-ibx-context-group\">\r\n              <div className=\"nk-ibx-context\">\r\n                <span className=\"nk-ibx-context-text\">\r\n                  <span\r\n                    className=\"heading\"\r\n                    style={\r\n                      inb?.isCrashed === 1 && inb?.isRead === 0\r\n                        ? { color: \"white\" }\r\n                        : { color: \"#707070\" }\r\n                    }\r\n                  >\r\n                    {inb?.subject}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"nk-ibx-item-elem nk-ibx-item-attach\"></div>\r\n          <div\r\n            className=\"nk-ibx-item-elem nk-ibx-item-time\"\r\n            // onClick={setMailView}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"sub-text\"\r\n              style={\r\n                inb?.isCrashed === 1 && inb?.isRead === 0\r\n                  ? {\r\n                      fontWeight: \"bold\",\r\n                      color: \"white\",\r\n                      marginLeft: 126,\r\n                      paddingRight: 14,\r\n                    }\r\n                  : {\r\n                      fontWeight: \"bold\",\r\n                      color: \"#707070\",\r\n                      marginLeft: 126,\r\n                      paddingRight: 14,\r\n                    }\r\n              }\r\n            >\r\n              {inb.op ? inb.op.toUpperCase() : \"\"}\r\n            </div>\r\n            {activeMail === inb.id ? (\r\n              <div style={{ color: \"#6576ff\" }}>\r\n                <em className=\"ni ni-caret-right-fill\"></em>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(InboxList);\r\n","C:\\Users\\Dell\\Desktop\\mailbox\\Mailbox-front\\src\\components\\navbar\\MarkLeave.jsx",["596","597"],"import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-awesome-modal\";\r\nimport Select from \"react-select\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport * as Api from \"../../util/api/ApicallModule\";\r\nimport { GET_LIST_DESIGNATION, LEAVE_ENABLE } from \"../../config/constants\";\r\nimport { connect } from \"react-redux\";\r\nimport { formatDate } from \"../../util/dateFormat/DateFormat\";\r\nimport Loading from \"../../util/loader/Loading\";\r\n\r\nfunction MarkLeave({ setOperateMarkLeave, operateMarkLeave, ...props }) {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const [leaveEnabled, setLeaveEnabled] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [to, setTo] = useState([]);\r\n  const [submitCheck, setSubmitCheck] = useState(false);\r\n  const [error, setError] = useState(\"false\");\r\n  const [leaveID, setLeaveID] = useState(Number);\r\n  const [leaveFrom, setLeaveFrom] = useState(\"\");\r\n  const [leaveTo, setLeaveTo] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [disableSubmit, setDisableSubmit] = useState(false);\r\n  let logData = {};\r\n  const logDataFunction = (type, mail_id, attachId) => {\r\n    logData = {\r\n      type: type,\r\n      mail_id: mail_id,\r\n      attach_id: attachId,\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    getListDesignation();\r\n    getLeave();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (to?.value === undefined) {\r\n      setSubmitCheck(false);\r\n    }\r\n  }, [to]);\r\n\r\n  useEffect(() => {\r\n    initialState();\r\n  }, [operateMarkLeave]);\r\n\r\n  const initialState = () => {\r\n    setError(\"false\");\r\n    setStartDate(new Date());\r\n    setLeaveID(Number);\r\n    setEndDate(new Date());\r\n    setLeaveFrom(\"\");\r\n    setTo([]);\r\n    setLeaveEnabled(false);\r\n    setLeaveTo(\"\");\r\n    setSubmitCheck(false);\r\n  };\r\n\r\n  const getLeave = async () => {\r\n    setIsLoading(true);\r\n    const resp = await Api.ApiHandle(`${LEAVE_ENABLE}`, \"\", \"GET\");\r\n\r\n    if (resp?.status === 1) {\r\n      setIsLoading(false);\r\n      let today = new Date();\r\n      let leaveTo = new Date(resp?.data?.leave_to);\r\n      if (leaveTo > today) {\r\n        setLeaveEnabled(true);\r\n        setLeaveFrom(formatDate(resp?.data?.leave_from));\r\n        setLeaveTo(formatDate(resp?.data?.leave_to));\r\n        setLeaveID(resp?.data?.id);\r\n      }\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (e, header, setDate) => {\r\n    const { value } = e.target;\r\n    let startDate = new Date();\r\n    let endDate = new Date();\r\n    if (header === \"Starting Date\" && new Date(value) < startDate) {\r\n      setError(\"*Previous Start Date cannot be selected\");\r\n    } else if (header === \"Ending Date\" && new Date(value) < endDate) {\r\n      setError(\"*Previous End Date cannot be selected \");\r\n    } else if (\r\n      header === \"Ending Date\" &&\r\n      new Date(value) <= new Date(startDate)\r\n    ) {\r\n      setError(\"*Ending Date must be greater than Starting Date\");\r\n    } else {\r\n      setDate(value);\r\n      setError(\"\");\r\n    }\r\n  };\r\n\r\n  const datePicker = (header, date, setDate) => {\r\n    return (\r\n      <div>\r\n        <div className=\"date-picker-head\">{header}</div>\r\n        <div>\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"datetime-local\"\r\n              name=\"duedate\"\r\n              placeholder=\"Due date\"\r\n              style={{ backgroundColor: \"#C7CCFF\" }}\r\n              value={date}\r\n              onChange={(e) => {\r\n                handleDateChange(e, header, setDate);\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleToData = (to) => {\r\n    setTo(to);\r\n  };\r\n\r\n  const getListDesignation = async () => {\r\n    logDataFunction(\"DESIGNATION LIST\", 0, 0);\r\n\r\n    const resp = await Api.ApiHandle(\r\n      `${GET_LIST_DESIGNATION}`,\r\n      \"\",\r\n      \"GET\",\r\n      logData\r\n    );\r\n\r\n    if (resp?.status === 1) {\r\n      const _options = [];\r\n      resp?.data?.map((list) => {\r\n        if (props?.userData?.id !== list?.id) {\r\n          const options = {\r\n            value: `${list?.designation}-${list?.branch}`,\r\n            label: `${list?.designation}-${list?.branch}`,\r\n            id: list?.id,\r\n          };\r\n          _options.push(options);\r\n        }\r\n      });\r\n\r\n      setOptions(_options);\r\n    }\r\n  };\r\n\r\n  const handleSubmitMarkLeave = async () => {\r\n    setDisableSubmit(true);\r\n    let startingDate = startDate?.split(\"T\");\r\n    let endingDate = endDate?.split(\"T\");\r\n    let params = {\r\n      receiver: to?.id,\r\n      leave_from: `${startingDate[0]} ${startingDate[1]}:00`,\r\n      leave_to: `${endingDate[0]} ${endingDate[1]}:00`,\r\n    };\r\n\r\n    const resp = await Api.ApiHandle(`${LEAVE_ENABLE}`, params, \"POST\");\r\n\r\n    if (resp.status !== 1) {\r\n      setDisableSubmit(false);\r\n\r\n      setError(\"*Some error occurred, Leave not marked\");\r\n    } else {\r\n      setDisableSubmit(false);\r\n      setError(\"\");\r\n      getLeave();\r\n    }\r\n  };\r\n\r\n  const cancelLeave = async () => {\r\n    let params = {\r\n      leave_id: leaveID,\r\n    };\r\n    const resp = await Api.ApiHandle(`${LEAVE_ENABLE}`, params, \"PUT\");\r\n    if (resp.status === 1) {\r\n      setLeaveEnabled(false);\r\n      getLeave();\r\n      initialState();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={operateMarkLeave}\r\n      id=\"mark-leave\"\r\n      width=\"676\"\r\n      height=\"auto\"\r\n      effect=\"fadeInUp\"\r\n      onClickAway={() => {\r\n        setSubmitCheck(false);\r\n        setOperateMarkLeave(false);\r\n      }}\r\n    >\r\n      {isLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <div className=\"nk-reply-form-header\" style={{ borderBottom: \"0px\" }}>\r\n            <div\r\n              className=\"nk-reply-form-group\"\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {!leaveEnabled && (\r\n                <>\r\n                  <div className=\"nk-reply-form-input-group\">\r\n                    <div className=\"mark-leave-tag-container\">\r\n                      <h2 className=\"mark-leave-tag\">Mark Leave...</h2>\r\n                      <em\r\n                        className=\"icon ni ni-cross\"\r\n                        onClick={() => {\r\n                          setSubmitCheck(false);\r\n                          setOperateMarkLeave(false);\r\n                        }}\r\n                      ></em>\r\n                    </div>\r\n                    <hr style={{ marginTop: \"1%\" }} />\r\n                  </div>\r\n                  <div style={{ marginBottom: \"1.5%\" }}>\r\n                    <h3 className=\"disclaimer-text\" style={{ color: \"black\" }}>\r\n                      * You can indicate your leave period here to have your\r\n                      messages auto-forwarded to another officer, during the\r\n                      leave.\r\n                    </h3>\r\n                  </div>\r\n                  <div style={{ color: \"red\" }}>\r\n                    {error !== \"false\" && `${error}`}\r\n                  </div>\r\n                  <div\r\n                    style={{ width: \"100%\" }}\r\n                    className=\"row justify-content-between\"\r\n                  >\r\n                    <div>\r\n                      {datePicker(\"Starting Date\", startDate, setStartDate)}\r\n                    </div>\r\n                    {datePicker(\"Ending Date\", endDate, setEndDate)}\r\n                  </div>\r\n\r\n                  <div className=\"message-forward-tag\">\r\n                    <div style={{ width: \"67%\" }}>\r\n                      <label className=\"label\" style={{ paddingTop: 2 }}>\r\n                        Messages will be forwarded to\r\n                      </label>\r\n                      <Select\r\n                        name=\"colors\"\r\n                        options={options}\r\n                        placeholder=\"\r\n                          Enter the user Designation-Branch or Select from below...\"\r\n                        value={to}\r\n                        onChange={handleToData}\r\n                        isClearable={true}\r\n                        isDisabled={error === \"\" ? false : true}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"submit-block\">\r\n                    <div\r\n                      className=\"nk-ibx-item-elem nk-ibx-item-check checkbox\"\r\n                      style={{ zIndex: 0 }}\r\n                    >\r\n                      <div className=\"custom-control custom-control-sm custom-checkbox\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          className=\"custom-control-input nk-dt-item-check\"\r\n                          id=\"submit-check\"\r\n                          onChange={() => {\r\n                            to?.value !== undefined &&\r\n                              setSubmitCheck((submitCheck) => !submitCheck);\r\n                          }}\r\n                          checked={submitCheck}\r\n                        />\r\n                        <label\r\n                          className=\"custom-control-label\"\r\n                          htmlFor=\"submit-check\"\r\n                        ></label>\r\n                      </div>\r\n                    </div>\r\n                    <div style={{ marginRight: \"42%\" }}>\r\n                      I agree to have my messages auto forwarded to\r\n                      <div style={{ fontWeight: \"bold\", fontStyle: \"oblique\" }}>\r\n                        {!to?.value ? `______` : `${to?.value}`}\r\n                      </div>\r\n                      during the above LEAVE PERIOD.\r\n                    </div>\r\n                    <div>\r\n                      <Button\r\n                        onClick={handleSubmitMarkLeave}\r\n                        // disabled={!submitCheck}\r\n                        // disabled={disableSubmit}\r\n                        disabled={disableSubmit ? disableSubmit : !submitCheck}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"disclaimer\">\r\n                    <h3 className=\"disclaimer-text\">\r\n                      *Note: This is not to be considered as submission of leave\r\n                      application. Only approved leave details are to be entered\r\n                      here for the purpose of forwarding messages.\r\n                    </h3>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {leaveEnabled && (\r\n                <div style={{ width: \"100%\" }}>\r\n                  <div className=\"nk-reply-form-input-group\">\r\n                    <div className=\"mark-leave-tag-container\">\r\n                      <h2 className=\"mark-leave-tag\">Cancel Leave...</h2>\r\n                      <em\r\n                        className=\"icon ni ni-cross\"\r\n                        onClick={() => {\r\n                          setSubmitCheck(false);\r\n                          setOperateMarkLeave(false);\r\n                        }}\r\n                      ></em>\r\n                    </div>\r\n                    <hr></hr>\r\n\r\n                    <div className=\"submit-block\">\r\n                      <div style={{ marginRight: \"39.3%\" }}>\r\n                        You are eligible for the LEAVE PERIOD from\r\n                        <div\r\n                          style={{ fontWeight: \"bold\", fontStyle: \"oblique\" }}\r\n                        >\r\n                          {leaveFrom}\r\n                        </div>\r\n                        to\r\n                        <div\r\n                          style={{ fontWeight: \"bold\", fontStyle: \"oblique\" }}\r\n                        >\r\n                          {leaveTo}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <Button\r\n                          style={{ backgroundColor: \"red\" }}\r\n                          onClick={cancelLeave}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userData: state.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(MarkLeave);\r\n",{"ruleId":"598","severity":1,"message":"599","line":9,"column":8,"nodeType":"600","messageId":"601","endLine":9,"endColumn":23},{"ruleId":"598","severity":1,"message":"602","line":10,"column":8,"nodeType":"600","messageId":"601","endLine":10,"endColumn":14},{"ruleId":"598","severity":1,"message":"603","line":1,"column":27,"nodeType":"600","messageId":"601","endLine":1,"endColumn":36},{"ruleId":"598","severity":1,"message":"604","line":9,"column":3,"nodeType":"600","messageId":"601","endLine":9,"endColumn":11},{"ruleId":"598","severity":1,"message":"605","line":22,"column":7,"nodeType":"600","messageId":"601","endLine":22,"endColumn":21},{"ruleId":"606","severity":1,"message":"607","line":81,"column":11,"nodeType":"608","endLine":81,"endColumn":38},{"ruleId":"598","severity":1,"message":"604","line":4,"column":27,"nodeType":"600","messageId":"601","endLine":4,"endColumn":35},{"ruleId":"609","severity":1,"message":"610","line":44,"column":15,"nodeType":"608","endLine":49,"endColumn":16},{"ruleId":"609","severity":1,"message":"610","line":70,"column":17,"nodeType":"608","endLine":70,"endColumn":43},{"ruleId":"609","severity":1,"message":"610","line":74,"column":17,"nodeType":"608","endLine":74,"endColumn":43},{"ruleId":"609","severity":1,"message":"610","line":95,"column":15,"nodeType":"608","endLine":95,"endColumn":44},{"ruleId":"609","severity":1,"message":"610","line":100,"column":15,"nodeType":"608","endLine":100,"endColumn":44},{"ruleId":"609","severity":1,"message":"610","line":105,"column":15,"nodeType":"608","endLine":105,"endColumn":44},{"ruleId":"598","severity":1,"message":"604","line":4,"column":26,"nodeType":"600","messageId":"601","endLine":4,"endColumn":34},{"ruleId":"598","severity":1,"message":"611","line":39,"column":9,"nodeType":"600","messageId":"601","endLine":39,"endColumn":23},{"ruleId":"612","severity":1,"message":"613","line":55,"column":37,"nodeType":"614","messageId":"615","endLine":55,"endColumn":38,"suggestions":"616"},{"ruleId":"612","severity":1,"message":"617","line":55,"column":54,"nodeType":"614","messageId":"615","endLine":55,"endColumn":55,"suggestions":"618"},{"ruleId":"598","severity":1,"message":"619","line":22,"column":3,"nodeType":"600","messageId":"601","endLine":22,"endColumn":13},{"ruleId":"598","severity":1,"message":"620","line":24,"column":3,"nodeType":"600","messageId":"601","endLine":24,"endColumn":18},{"ruleId":"598","severity":1,"message":"621","line":49,"column":10,"nodeType":"600","messageId":"601","endLine":49,"endColumn":27},{"ruleId":"598","severity":1,"message":"622","line":54,"column":5,"nodeType":"600","messageId":"601","endLine":54,"endColumn":10},{"ruleId":"598","severity":1,"message":"623","line":94,"column":10,"nodeType":"600","messageId":"601","endLine":94,"endColumn":19},{"ruleId":"598","severity":1,"message":"624","line":95,"column":29,"nodeType":"600","messageId":"601","endLine":95,"endColumn":49},{"ruleId":"625","severity":1,"message":"626","line":184,"column":6,"nodeType":"627","endLine":184,"endColumn":21,"suggestions":"628"},{"ruleId":"625","severity":1,"message":"629","line":222,"column":6,"nodeType":"627","endLine":222,"endColumn":8,"suggestions":"630"},{"ruleId":"625","severity":1,"message":"631","line":229,"column":6,"nodeType":"627","endLine":229,"endColumn":23,"suggestions":"632"},{"ruleId":"633","severity":1,"message":"634","line":235,"column":55,"nodeType":"635","messageId":"636","endLine":235,"endColumn":57},{"ruleId":"625","severity":1,"message":"637","line":241,"column":6,"nodeType":"627","endLine":241,"endColumn":23,"suggestions":"638"},{"ruleId":"625","severity":1,"message":"639","line":290,"column":6,"nodeType":"627","endLine":290,"endColumn":28,"suggestions":"640"},{"ruleId":"625","severity":1,"message":"641","line":294,"column":6,"nodeType":"627","endLine":294,"endColumn":8,"suggestions":"642"},{"ruleId":"633","severity":1,"message":"643","line":334,"column":34,"nodeType":"635","messageId":"644","endLine":334,"endColumn":36},{"ruleId":"645","severity":1,"message":"646","line":432,"column":14,"nodeType":"600","messageId":"647","endLine":432,"endColumn":18},{"ruleId":"633","severity":1,"message":"643","line":525,"column":37,"nodeType":"635","messageId":"644","endLine":525,"endColumn":39},{"ruleId":"598","severity":1,"message":"648","line":589,"column":7,"nodeType":"600","messageId":"601","endLine":589,"endColumn":18},{"ruleId":"598","severity":1,"message":"649","line":695,"column":7,"nodeType":"600","messageId":"601","endLine":695,"endColumn":14},{"ruleId":"633","severity":1,"message":"643","line":809,"column":37,"nodeType":"635","messageId":"644","endLine":809,"endColumn":39},{"ruleId":"650","severity":1,"message":"651","line":1039,"column":7,"nodeType":"652","messageId":"653","endLine":1041,"endColumn":15},{"ruleId":"625","severity":1,"message":"654","line":1076,"column":13,"nodeType":"635","endLine":1087,"endColumn":4},{"ruleId":"625","severity":1,"message":"655","line":1087,"column":6,"nodeType":"627","endLine":1087,"endColumn":21,"suggestions":"656"},{"ruleId":"633","severity":1,"message":"634","line":1142,"column":71,"nodeType":"635","messageId":"636","endLine":1142,"endColumn":73},{"ruleId":"657","severity":1,"message":"658","line":1145,"column":23,"nodeType":"659","messageId":"660","endLine":1145,"endColumn":25},{"ruleId":"661","severity":1,"message":"662","line":1285,"column":5,"nodeType":"663","messageId":"664","endLine":1304,"endColumn":6},{"ruleId":"598","severity":1,"message":"603","line":1,"column":20,"nodeType":"600","messageId":"601","endLine":1,"endColumn":29},{"ruleId":"598","severity":1,"message":"665","line":1,"column":31,"nodeType":"600","messageId":"601","endLine":1,"endColumn":37},{"ruleId":"598","severity":1,"message":"666","line":12,"column":10,"nodeType":"600","messageId":"601","endLine":12,"endColumn":22},{"ruleId":"598","severity":1,"message":"667","line":12,"column":24,"nodeType":"600","messageId":"601","endLine":12,"endColumn":39},{"ruleId":"598","severity":1,"message":"668","line":23,"column":10,"nodeType":"600","messageId":"601","endLine":23,"endColumn":15},{"ruleId":"598","severity":1,"message":"669","line":24,"column":8,"nodeType":"600","messageId":"601","endLine":24,"endColumn":14},{"ruleId":"598","severity":1,"message":"670","line":48,"column":10,"nodeType":"600","messageId":"601","endLine":48,"endColumn":20},{"ruleId":"625","severity":1,"message":"671","line":77,"column":6,"nodeType":"627","endLine":77,"endColumn":8,"suggestions":"672"},{"ruleId":"625","severity":1,"message":"673","line":82,"column":6,"nodeType":"627","endLine":82,"endColumn":23,"suggestions":"674"},{"ruleId":"625","severity":1,"message":"675","line":96,"column":6,"nodeType":"627","endLine":96,"endColumn":28,"suggestions":"676"},{"ruleId":"625","severity":1,"message":"677","line":109,"column":6,"nodeType":"627","endLine":109,"endColumn":33,"suggestions":"678"},{"ruleId":"625","severity":1,"message":"641","line":113,"column":6,"nodeType":"627","endLine":113,"endColumn":8,"suggestions":"679"},{"ruleId":"598","severity":1,"message":"680","line":161,"column":9,"nodeType":"600","messageId":"601","endLine":161,"endColumn":22},{"ruleId":"598","severity":1,"message":"681","line":252,"column":9,"nodeType":"600","messageId":"601","endLine":252,"endColumn":36},{"ruleId":"633","severity":1,"message":"643","line":331,"column":40,"nodeType":"635","messageId":"644","endLine":331,"endColumn":42},{"ruleId":"633","severity":1,"message":"643","line":346,"column":45,"nodeType":"635","messageId":"644","endLine":346,"endColumn":47},{"ruleId":"598","severity":1,"message":"682","line":358,"column":12,"nodeType":"600","messageId":"601","endLine":358,"endColumn":17},{"ruleId":"598","severity":1,"message":"683","line":365,"column":9,"nodeType":"600","messageId":"601","endLine":365,"endColumn":21},{"ruleId":"684","severity":1,"message":"685","line":449,"column":15,"nodeType":"608","endLine":449,"endColumn":65},{"ruleId":"684","severity":1,"message":"685","line":465,"column":15,"nodeType":"608","endLine":465,"endColumn":65},{"ruleId":"598","severity":1,"message":"686","line":2,"column":10,"nodeType":"600","messageId":"601","endLine":2,"endColumn":17},{"ruleId":"687","severity":1,"message":"688","line":18,"column":11,"nodeType":"608","messageId":"689","endLine":18,"endColumn":59,"fix":"690"},{"ruleId":"598","severity":1,"message":"691","line":40,"column":9,"nodeType":"600","messageId":"601","endLine":40,"endColumn":22},{"ruleId":"598","severity":1,"message":"692","line":69,"column":10,"nodeType":"600","messageId":"601","endLine":69,"endColumn":14},{"ruleId":"598","severity":1,"message":"693","line":78,"column":10,"nodeType":"600","messageId":"601","endLine":78,"endColumn":21},{"ruleId":"633","severity":1,"message":"634","line":83,"column":67,"nodeType":"635","messageId":"636","endLine":83,"endColumn":69},{"ruleId":"625","severity":1,"message":"694","line":88,"column":6,"nodeType":"627","endLine":88,"endColumn":23,"suggestions":"695"},{"ruleId":"625","severity":1,"message":"696","line":94,"column":6,"nodeType":"627","endLine":94,"endColumn":40,"suggestions":"697"},{"ruleId":"625","severity":1,"message":"698","line":107,"column":6,"nodeType":"627","endLine":107,"endColumn":20,"suggestions":"699"},{"ruleId":"625","severity":1,"message":"700","line":120,"column":6,"nodeType":"627","endLine":120,"endColumn":16,"suggestions":"701"},{"ruleId":"625","severity":1,"message":"696","line":124,"column":6,"nodeType":"627","endLine":124,"endColumn":8,"suggestions":"702"},{"ruleId":"625","severity":1,"message":"698","line":137,"column":6,"nodeType":"627","endLine":137,"endColumn":20,"suggestions":"703"},{"ruleId":"598","severity":1,"message":"704","line":172,"column":11,"nodeType":"600","messageId":"601","endLine":172,"endColumn":17},{"ruleId":"633","severity":1,"message":"634","line":218,"column":71,"nodeType":"635","messageId":"636","endLine":218,"endColumn":73},{"ruleId":"661","severity":1,"message":"662","line":232,"column":5,"nodeType":"663","messageId":"664","endLine":281,"endColumn":6},{"ruleId":"633","severity":1,"message":"634","line":383,"column":71,"nodeType":"635","messageId":"636","endLine":383,"endColumn":73},{"ruleId":"657","severity":1,"message":"658","line":386,"column":23,"nodeType":"659","messageId":"660","endLine":386,"endColumn":25},{"ruleId":"598","severity":1,"message":"705","line":393,"column":9,"nodeType":"600","messageId":"601","endLine":393,"endColumn":27},{"ruleId":"657","severity":1,"message":"658","line":748,"column":47,"nodeType":"659","messageId":"660","endLine":748,"endColumn":49},{"ruleId":"598","severity":1,"message":"706","line":5,"column":5,"nodeType":"600","messageId":"601","endLine":5,"endColumn":17},{"ruleId":"598","severity":1,"message":"707","line":15,"column":10,"nodeType":"600","messageId":"601","endLine":15,"endColumn":22},{"ruleId":"625","severity":1,"message":"708","line":56,"column":6,"nodeType":"627","endLine":56,"endColumn":8,"suggestions":"709"},{"ruleId":"625","severity":1,"message":"710","line":65,"column":6,"nodeType":"627","endLine":65,"endColumn":8,"suggestions":"711"},{"ruleId":"598","severity":1,"message":"712","line":34,"column":10,"nodeType":"600","messageId":"601","endLine":34,"endColumn":18},{"ruleId":"598","severity":1,"message":"713","line":36,"column":10,"nodeType":"600","messageId":"601","endLine":36,"endColumn":14},{"ruleId":"598","severity":1,"message":"714","line":36,"column":16,"nodeType":"600","messageId":"601","endLine":36,"endColumn":23},{"ruleId":"625","severity":1,"message":"715","line":50,"column":6,"nodeType":"627","endLine":50,"endColumn":23,"suggestions":"716"},{"ruleId":"625","severity":1,"message":"696","line":75,"column":6,"nodeType":"627","endLine":75,"endColumn":18,"suggestions":"717"},{"ruleId":"657","severity":1,"message":"658","line":126,"column":19,"nodeType":"659","messageId":"660","endLine":126,"endColumn":21},{"ruleId":"661","severity":1,"message":"662","line":271,"column":7,"nodeType":"663","messageId":"664","endLine":309,"endColumn":8},{"ruleId":"609","severity":1,"message":"718","line":337,"column":15,"nodeType":"608","endLine":337,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":352,"column":15,"nodeType":"608","endLine":352,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":374,"column":15,"nodeType":"608","endLine":374,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":386,"column":15,"nodeType":"608","endLine":386,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":398,"column":15,"nodeType":"608","endLine":398,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":409,"column":15,"nodeType":"608","endLine":409,"endColumn":47},{"ruleId":"609","severity":1,"message":"718","line":418,"column":13,"nodeType":"608","endLine":418,"endColumn":16},{"ruleId":"609","severity":1,"message":"718","line":485,"column":19,"nodeType":"608","endLine":488,"endColumn":20},{"ruleId":"609","severity":1,"message":"718","line":517,"column":21,"nodeType":"608","endLine":521,"endColumn":22},{"ruleId":"609","severity":1,"message":"718","line":535,"column":29,"nodeType":"608","endLine":535,"endColumn":32},{"ruleId":"609","severity":1,"message":"718","line":544,"column":29,"nodeType":"608","endLine":544,"endColumn":32},{"ruleId":"625","severity":1,"message":"719","line":54,"column":6,"nodeType":"627","endLine":54,"endColumn":37,"suggestions":"720"},{"ruleId":"625","severity":1,"message":"719","line":59,"column":6,"nodeType":"627","endLine":59,"endColumn":24,"suggestions":"721"},{"ruleId":"625","severity":1,"message":"719","line":64,"column":6,"nodeType":"627","endLine":64,"endColumn":22,"suggestions":"722"},{"ruleId":"625","severity":1,"message":"719","line":68,"column":6,"nodeType":"627","endLine":68,"endColumn":25,"suggestions":"723"},{"ruleId":"633","severity":1,"message":"643","line":129,"column":34,"nodeType":"635","messageId":"644","endLine":129,"endColumn":36},{"ruleId":"657","severity":1,"message":"658","line":169,"column":48,"nodeType":"659","messageId":"660","endLine":169,"endColumn":50},{"ruleId":"633","severity":1,"message":"643","line":227,"column":37,"nodeType":"635","messageId":"644","endLine":227,"endColumn":39},{"ruleId":"633","severity":1,"message":"643","line":281,"column":37,"nodeType":"635","messageId":"644","endLine":281,"endColumn":39},{"ruleId":"598","severity":1,"message":"724","line":1,"column":39,"nodeType":"600","messageId":"601","endLine":1,"endColumn":50},{"ruleId":"598","severity":1,"message":"725","line":26,"column":10,"nodeType":"600","messageId":"601","endLine":26,"endColumn":18},{"ruleId":"598","severity":1,"message":"726","line":33,"column":27,"nodeType":"600","messageId":"601","endLine":33,"endColumn":45},{"ruleId":"625","severity":1,"message":"727","line":66,"column":6,"nodeType":"627","endLine":66,"endColumn":8,"suggestions":"728"},{"ruleId":"598","severity":1,"message":"729","line":70,"column":9,"nodeType":"600","messageId":"601","endLine":70,"endColumn":21},{"ruleId":"633","severity":1,"message":"634","line":76,"column":18,"nodeType":"635","messageId":"636","endLine":76,"endColumn":20},{"ruleId":"633","severity":1,"message":"643","line":102,"column":29,"nodeType":"635","messageId":"644","endLine":102,"endColumn":31},{"ruleId":"657","severity":1,"message":"658","line":193,"column":17,"nodeType":"659","messageId":"660","endLine":193,"endColumn":19},{"ruleId":"633","severity":1,"message":"643","line":234,"column":30,"nodeType":"635","messageId":"644","endLine":234,"endColumn":32},{"ruleId":"633","severity":1,"message":"634","line":241,"column":73,"nodeType":"635","messageId":"636","endLine":241,"endColumn":75},{"ruleId":"633","severity":1,"message":"634","line":321,"column":31,"nodeType":"635","messageId":"636","endLine":321,"endColumn":33},{"ruleId":"657","severity":1,"message":"730","line":322,"column":20,"nodeType":"659","messageId":"660","endLine":322,"endColumn":22},{"ruleId":"598","severity":1,"message":"731","line":480,"column":27,"nodeType":"600","messageId":"601","endLine":480,"endColumn":36},{"ruleId":"609","severity":1,"message":"718","line":558,"column":21,"nodeType":"608","endLine":564,"endColumn":22},{"ruleId":"598","severity":1,"message":"732","line":3,"column":19,"nodeType":"600","messageId":"601","endLine":3,"endColumn":30},{"ruleId":"598","severity":1,"message":"733","line":8,"column":3,"nodeType":"600","messageId":"601","endLine":8,"endColumn":20},{"ruleId":"598","severity":1,"message":"734","line":17,"column":3,"nodeType":"600","messageId":"601","endLine":17,"endColumn":15},{"ruleId":"598","severity":1,"message":"735","line":47,"column":8,"nodeType":"600","messageId":"601","endLine":47,"endColumn":20},{"ruleId":"598","severity":1,"message":"736","line":96,"column":19,"nodeType":"600","messageId":"601","endLine":96,"endColumn":29},{"ruleId":"598","severity":1,"message":"737","line":118,"column":10,"nodeType":"600","messageId":"601","endLine":118,"endColumn":25},{"ruleId":"598","severity":1,"message":"726","line":118,"column":27,"nodeType":"600","messageId":"601","endLine":118,"endColumn":45},{"ruleId":"598","severity":1,"message":"738","line":125,"column":10,"nodeType":"600","messageId":"601","endLine":125,"endColumn":21},{"ruleId":"598","severity":1,"message":"739","line":125,"column":23,"nodeType":"600","messageId":"601","endLine":125,"endColumn":37},{"ruleId":"598","severity":1,"message":"740","line":129,"column":10,"nodeType":"600","messageId":"601","endLine":129,"endColumn":17},{"ruleId":"598","severity":1,"message":"741","line":129,"column":19,"nodeType":"600","messageId":"601","endLine":129,"endColumn":29},{"ruleId":"598","severity":1,"message":"742","line":136,"column":7,"nodeType":"600","messageId":"601","endLine":136,"endColumn":15},{"ruleId":"625","severity":1,"message":"743","line":154,"column":6,"nodeType":"627","endLine":154,"endColumn":26,"suggestions":"744"},{"ruleId":"625","severity":1,"message":"745","line":165,"column":6,"nodeType":"627","endLine":165,"endColumn":8,"suggestions":"746"},{"ruleId":"625","severity":1,"message":"747","line":182,"column":6,"nodeType":"627","endLine":182,"endColumn":8,"suggestions":"748"},{"ruleId":"625","severity":1,"message":"749","line":204,"column":6,"nodeType":"627","endLine":204,"endColumn":20,"suggestions":"750"},{"ruleId":"625","severity":1,"message":"751","line":208,"column":6,"nodeType":"627","endLine":208,"endColumn":32,"suggestions":"752"},{"ruleId":"625","severity":1,"message":"753","line":212,"column":6,"nodeType":"627","endLine":212,"endColumn":25,"suggestions":"754"},{"ruleId":"625","severity":1,"message":"755","line":219,"column":6,"nodeType":"627","endLine":219,"endColumn":8,"suggestions":"756"},{"ruleId":"625","severity":1,"message":"654","line":221,"column":13,"nodeType":"635","endLine":228,"endColumn":4},{"ruleId":"625","severity":1,"message":"757","line":228,"column":6,"nodeType":"627","endLine":228,"endColumn":12,"suggestions":"758"},{"ruleId":"625","severity":1,"message":"759","line":234,"column":6,"nodeType":"627","endLine":234,"endColumn":30,"suggestions":"760"},{"ruleId":"633","severity":1,"message":"634","line":239,"column":67,"nodeType":"635","messageId":"636","endLine":239,"endColumn":69},{"ruleId":"625","severity":1,"message":"694","line":244,"column":6,"nodeType":"627","endLine":244,"endColumn":23,"suggestions":"761"},{"ruleId":"633","severity":1,"message":"634","line":252,"column":71,"nodeType":"635","messageId":"636","endLine":252,"endColumn":73},{"ruleId":"661","severity":1,"message":"662","line":268,"column":5,"nodeType":"663","messageId":"664","endLine":332,"endColumn":6},{"ruleId":"762","severity":1,"message":"763","line":309,"column":7,"nodeType":"652","messageId":"660","endLine":312,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":313,"column":7,"nodeType":"652","messageId":"660","endLine":316,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":318,"column":7,"nodeType":"652","messageId":"660","endLine":321,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":323,"column":7,"nodeType":"652","messageId":"660","endLine":326,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":328,"column":7,"nodeType":"652","messageId":"660","endLine":331,"endColumn":15},{"ruleId":"625","severity":1,"message":"759","line":379,"column":6,"nodeType":"627","endLine":379,"endColumn":30,"suggestions":"764"},{"ruleId":"633","severity":1,"message":"643","line":383,"column":42,"nodeType":"635","messageId":"644","endLine":383,"endColumn":44},{"ruleId":"633","severity":1,"message":"634","line":415,"column":71,"nodeType":"635","messageId":"636","endLine":415,"endColumn":73},{"ruleId":"633","severity":1,"message":"643","line":488,"column":33,"nodeType":"635","messageId":"644","endLine":488,"endColumn":35},{"ruleId":"598","severity":1,"message":"729","line":630,"column":9,"nodeType":"600","messageId":"601","endLine":630,"endColumn":21},{"ruleId":"633","severity":1,"message":"634","line":636,"column":18,"nodeType":"635","messageId":"636","endLine":636,"endColumn":20},{"ruleId":"625","severity":1,"message":"765","line":784,"column":6,"nodeType":"627","endLine":784,"endColumn":21,"suggestions":"766"},{"ruleId":"625","severity":1,"message":"767","line":792,"column":6,"nodeType":"627","endLine":792,"endColumn":30,"suggestions":"768"},{"ruleId":"625","severity":1,"message":"767","line":800,"column":6,"nodeType":"627","endLine":800,"endColumn":30,"suggestions":"769"},{"ruleId":"633","severity":1,"message":"643","line":853,"column":29,"nodeType":"635","messageId":"644","endLine":853,"endColumn":31},{"ruleId":"633","severity":1,"message":"634","line":865,"column":69,"nodeType":"635","messageId":"636","endLine":865,"endColumn":71},{"ruleId":"633","severity":1,"message":"643","line":879,"column":29,"nodeType":"635","messageId":"644","endLine":879,"endColumn":31},{"ruleId":"598","severity":1,"message":"770","line":1035,"column":11,"nodeType":"600","messageId":"601","endLine":1035,"endColumn":24},{"ruleId":"633","severity":1,"message":"634","line":1035,"column":71,"nodeType":"635","messageId":"636","endLine":1035,"endColumn":73},{"ruleId":"657","severity":1,"message":"730","line":1039,"column":29,"nodeType":"659","messageId":"660","endLine":1039,"endColumn":31},{"ruleId":"657","severity":1,"message":"730","line":1040,"column":30,"nodeType":"659","messageId":"660","endLine":1040,"endColumn":32},{"ruleId":"609","severity":1,"message":"718","line":1286,"column":27,"nodeType":"608","endLine":1286,"endColumn":30},{"ruleId":"609","severity":1,"message":"718","line":1661,"column":31,"nodeType":"608","endLine":1661,"endColumn":59},{"ruleId":"609","severity":1,"message":"718","line":1676,"column":31,"nodeType":"608","endLine":1676,"endColumn":59},{"ruleId":"657","severity":1,"message":"658","line":1813,"column":49,"nodeType":"659","messageId":"660","endLine":1813,"endColumn":51},{"ruleId":"657","severity":1,"message":"658","line":1814,"column":50,"nodeType":"659","messageId":"660","endLine":1814,"endColumn":52},{"ruleId":"657","severity":1,"message":"658","line":1815,"column":50,"nodeType":"659","messageId":"660","endLine":1815,"endColumn":52},{"ruleId":"657","severity":1,"message":"658","line":1816,"column":50,"nodeType":"659","messageId":"660","endLine":1816,"endColumn":52},{"ruleId":"598","severity":1,"message":"771","line":7,"column":3,"nodeType":"600","messageId":"601","endLine":7,"endColumn":16},{"ruleId":"598","severity":1,"message":"772","line":18,"column":3,"nodeType":"600","messageId":"601","endLine":18,"endColumn":15},{"ruleId":"598","severity":1,"message":"773","line":65,"column":10,"nodeType":"600","messageId":"601","endLine":65,"endColumn":18},{"ruleId":"598","severity":1,"message":"774","line":72,"column":10,"nodeType":"600","messageId":"601","endLine":72,"endColumn":15},{"ruleId":"598","severity":1,"message":"775","line":72,"column":17,"nodeType":"600","messageId":"601","endLine":72,"endColumn":25},{"ruleId":"625","severity":1,"message":"654","line":75,"column":13,"nodeType":"635","endLine":77,"endColumn":4},{"ruleId":"625","severity":1,"message":"715","line":77,"column":6,"nodeType":"627","endLine":77,"endColumn":37,"suggestions":"776"},{"ruleId":"625","severity":1,"message":"696","line":82,"column":6,"nodeType":"627","endLine":82,"endColumn":14,"suggestions":"777"},{"ruleId":"598","severity":1,"message":"778","line":84,"column":9,"nodeType":"600","messageId":"601","endLine":84,"endColumn":18},{"ruleId":"779","severity":1,"message":"780","line":251,"column":31,"nodeType":"614","messageId":"781","endLine":251,"endColumn":51},{"ruleId":"609","severity":1,"message":"718","line":400,"column":31,"nodeType":"608","endLine":400,"endColumn":34},{"ruleId":"609","severity":1,"message":"718","line":405,"column":31,"nodeType":"608","endLine":405,"endColumn":34},{"ruleId":"598","severity":1,"message":"782","line":2,"column":10,"nodeType":"600","messageId":"601","endLine":2,"endColumn":15},{"ruleId":"650","severity":1,"message":"783","line":306,"column":5,"nodeType":"652","messageId":"784","endLine":307,"endColumn":20},{"ruleId":"625","severity":1,"message":"785","line":22,"column":6,"nodeType":"627","endLine":22,"endColumn":8,"suggestions":"786"},{"ruleId":"657","severity":1,"message":"658","line":82,"column":21,"nodeType":"659","messageId":"660","endLine":82,"endColumn":23},{"ruleId":"598","severity":1,"message":"787","line":3,"column":5,"nodeType":"600","messageId":"601","endLine":3,"endColumn":10},{"ruleId":"645","severity":1,"message":"788","line":11,"column":11,"nodeType":"600","messageId":"647","endLine":11,"endColumn":16},{"ruleId":"657","severity":1,"message":"658","line":14,"column":13,"nodeType":"659","messageId":"660","endLine":14,"endColumn":15},{"ruleId":"657","severity":1,"message":"730","line":59,"column":48,"nodeType":"659","messageId":"660","endLine":59,"endColumn":50},{"ruleId":"657","severity":1,"message":"658","line":72,"column":13,"nodeType":"659","messageId":"660","endLine":72,"endColumn":15},{"ruleId":"657","severity":1,"message":"658","line":87,"column":21,"nodeType":"659","messageId":"660","endLine":87,"endColumn":23},{"ruleId":"657","severity":1,"message":"658","line":113,"column":18,"nodeType":"659","messageId":"660","endLine":113,"endColumn":20},{"ruleId":"625","severity":1,"message":"789","line":85,"column":6,"nodeType":"627","endLine":89,"endColumn":4,"suggestions":"790"},{"ruleId":"625","severity":1,"message":"696","line":101,"column":6,"nodeType":"627","endLine":101,"endColumn":41,"suggestions":"791"},{"ruleId":"625","severity":1,"message":"792","line":115,"column":6,"nodeType":"627","endLine":115,"endColumn":22,"suggestions":"793"},{"ruleId":"625","severity":1,"message":"794","line":119,"column":6,"nodeType":"627","endLine":119,"endColumn":28,"suggestions":"795"},{"ruleId":"633","severity":1,"message":"643","line":195,"column":30,"nodeType":"635","messageId":"644","endLine":195,"endColumn":32},{"ruleId":"633","severity":1,"message":"643","line":361,"column":30,"nodeType":"635","messageId":"644","endLine":361,"endColumn":32},{"ruleId":"633","severity":1,"message":"643","line":375,"column":28,"nodeType":"635","messageId":"644","endLine":375,"endColumn":30},{"ruleId":"633","severity":1,"message":"643","line":410,"column":28,"nodeType":"635","messageId":"644","endLine":410,"endColumn":30},{"ruleId":"633","severity":1,"message":"634","line":511,"column":73,"nodeType":"635","messageId":"636","endLine":511,"endColumn":75},{"ruleId":"633","severity":1,"message":"796","line":518,"column":37,"nodeType":"635","messageId":"644","endLine":518,"endColumn":39},{"ruleId":"657","severity":1,"message":"658","line":520,"column":29,"nodeType":"659","messageId":"660","endLine":520,"endColumn":31},{"ruleId":"661","severity":1,"message":"662","line":678,"column":5,"nodeType":"663","messageId":"664","endLine":715,"endColumn":6},{"ruleId":"661","severity":1,"message":"662","line":722,"column":5,"nodeType":"663","messageId":"664","endLine":759,"endColumn":6},{"ruleId":"684","severity":1,"message":"685","line":825,"column":25,"nodeType":"608","endLine":825,"endColumn":62},{"ruleId":"609","severity":1,"message":"718","line":1222,"column":13,"nodeType":"608","endLine":1225,"endColumn":14},{"ruleId":"609","severity":1,"message":"718","line":1253,"column":21,"nodeType":"608","endLine":1253,"endColumn":59},{"ruleId":"609","severity":1,"message":"718","line":1258,"column":21,"nodeType":"608","endLine":1258,"endColumn":68},{"ruleId":"609","severity":1,"message":"718","line":1276,"column":21,"nodeType":"608","endLine":1276,"endColumn":59},{"ruleId":"609","severity":1,"message":"718","line":1277,"column":21,"nodeType":"608","endLine":1280,"endColumn":22},{"ruleId":"609","severity":1,"message":"718","line":1292,"column":17,"nodeType":"608","endLine":1292,"endColumn":55},{"ruleId":"609","severity":1,"message":"718","line":1293,"column":17,"nodeType":"608","endLine":1293,"endColumn":64},{"ruleId":"598","severity":1,"message":"797","line":15,"column":10,"nodeType":"600","messageId":"601","endLine":15,"endColumn":20},{"ruleId":"598","severity":1,"message":"798","line":15,"column":22,"nodeType":"600","messageId":"601","endLine":15,"endColumn":35},{"ruleId":"598","severity":1,"message":"799","line":16,"column":10,"nodeType":"600","messageId":"601","endLine":16,"endColumn":23},{"ruleId":"598","severity":1,"message":"800","line":17,"column":10,"nodeType":"600","messageId":"601","endLine":17,"endColumn":21},{"ruleId":"598","severity":1,"message":"801","line":18,"column":10,"nodeType":"600","messageId":"601","endLine":18,"endColumn":23},{"ruleId":"598","severity":1,"message":"802","line":19,"column":10,"nodeType":"600","messageId":"601","endLine":19,"endColumn":17},{"ruleId":"598","severity":1,"message":"803","line":19,"column":19,"nodeType":"600","messageId":"601","endLine":19,"endColumn":29},{"ruleId":"598","severity":1,"message":"804","line":21,"column":10,"nodeType":"600","messageId":"601","endLine":21,"endColumn":13},{"ruleId":"598","severity":1,"message":"805","line":24,"column":10,"nodeType":"600","messageId":"601","endLine":24,"endColumn":14},{"ruleId":"598","severity":1,"message":"806","line":24,"column":16,"nodeType":"600","messageId":"601","endLine":24,"endColumn":23},{"ruleId":"625","severity":1,"message":"807","line":32,"column":6,"nodeType":"627","endLine":32,"endColumn":23,"suggestions":"808"},{"ruleId":"625","severity":1,"message":"809","line":40,"column":6,"nodeType":"627","endLine":40,"endColumn":8,"suggestions":"810"},{"ruleId":"625","severity":1,"message":"696","line":50,"column":6,"nodeType":"627","endLine":50,"endColumn":36,"suggestions":"811"},{"ruleId":"657","severity":1,"message":"658","line":54,"column":24,"nodeType":"659","messageId":"660","endLine":54,"endColumn":26},{"ruleId":"812","severity":1,"message":"813","line":156,"column":11,"nodeType":"600","messageId":"814","endLine":156,"endColumn":17},{"ruleId":"812","severity":1,"message":"815","line":158,"column":16,"nodeType":"600","messageId":"814","endLine":158,"endColumn":17},{"ruleId":"812","severity":1,"message":"813","line":166,"column":11,"nodeType":"600","messageId":"814","endLine":166,"endColumn":17},{"ruleId":"812","severity":1,"message":"815","line":168,"column":16,"nodeType":"600","messageId":"814","endLine":168,"endColumn":17},{"ruleId":"633","severity":1,"message":"643","line":188,"column":34,"nodeType":"635","messageId":"644","endLine":188,"endColumn":36},{"ruleId":"657","severity":1,"message":"658","line":190,"column":24,"nodeType":"659","messageId":"660","endLine":190,"endColumn":26},{"ruleId":"633","severity":1,"message":"643","line":199,"column":34,"nodeType":"635","messageId":"644","endLine":199,"endColumn":36},{"ruleId":"657","severity":1,"message":"658","line":201,"column":24,"nodeType":"659","messageId":"660","endLine":201,"endColumn":26},{"ruleId":"633","severity":1,"message":"643","line":210,"column":34,"nodeType":"635","messageId":"644","endLine":210,"endColumn":36},{"ruleId":"657","severity":1,"message":"658","line":212,"column":24,"nodeType":"659","messageId":"660","endLine":212,"endColumn":26},{"ruleId":"633","severity":1,"message":"643","line":261,"column":30,"nodeType":"635","messageId":"644","endLine":261,"endColumn":32},{"ruleId":"657","severity":1,"message":"658","line":268,"column":22,"nodeType":"659","messageId":"660","endLine":268,"endColumn":24},{"ruleId":"598","severity":1,"message":"816","line":324,"column":9,"nodeType":"600","messageId":"601","endLine":324,"endColumn":22},{"ruleId":"598","severity":1,"message":"817","line":327,"column":9,"nodeType":"600","messageId":"601","endLine":327,"endColumn":13},{"ruleId":"633","severity":1,"message":"643","line":338,"column":28,"nodeType":"635","messageId":"644","endLine":338,"endColumn":30},{"ruleId":"657","severity":1,"message":"658","line":339,"column":25,"nodeType":"659","messageId":"660","endLine":339,"endColumn":27},{"ruleId":"657","severity":1,"message":"658","line":345,"column":27,"nodeType":"659","messageId":"660","endLine":345,"endColumn":29},{"ruleId":"657","severity":1,"message":"730","line":350,"column":52,"nodeType":"659","messageId":"660","endLine":350,"endColumn":54},{"ruleId":"609","severity":1,"message":"718","line":628,"column":25,"nodeType":"608","endLine":628,"endColumn":63},{"ruleId":"609","severity":1,"message":"718","line":629,"column":25,"nodeType":"608","endLine":629,"endColumn":72},{"ruleId":"609","severity":1,"message":"718","line":671,"column":27,"nodeType":"608","endLine":671,"endColumn":65},{"ruleId":"609","severity":1,"message":"718","line":672,"column":27,"nodeType":"608","endLine":675,"endColumn":28},{"ruleId":"609","severity":1,"message":"718","line":690,"column":17,"nodeType":"608","endLine":690,"endColumn":55},{"ruleId":"609","severity":1,"message":"718","line":691,"column":17,"nodeType":"608","endLine":691,"endColumn":64},{"ruleId":"598","severity":1,"message":"818","line":42,"column":7,"nodeType":"600","messageId":"601","endLine":42,"endColumn":16},{"ruleId":"598","severity":1,"message":"819","line":91,"column":10,"nodeType":"600","messageId":"601","endLine":91,"endColumn":23},{"ruleId":"598","severity":1,"message":"820","line":97,"column":10,"nodeType":"600","messageId":"601","endLine":97,"endColumn":27},{"ruleId":"598","severity":1,"message":"821","line":97,"column":29,"nodeType":"600","messageId":"601","endLine":97,"endColumn":49},{"ruleId":"598","severity":1,"message":"822","line":98,"column":10,"nodeType":"600","messageId":"601","endLine":98,"endColumn":28},{"ruleId":"598","severity":1,"message":"823","line":98,"column":30,"nodeType":"600","messageId":"601","endLine":98,"endColumn":51},{"ruleId":"598","severity":1,"message":"824","line":100,"column":24,"nodeType":"600","messageId":"601","endLine":100,"endColumn":39},{"ruleId":"598","severity":1,"message":"825","line":107,"column":9,"nodeType":"600","messageId":"601","endLine":107,"endColumn":17},{"ruleId":"598","severity":1,"message":"826","line":110,"column":9,"nodeType":"600","messageId":"601","endLine":110,"endColumn":30},{"ruleId":"625","severity":1,"message":"827","line":132,"column":6,"nodeType":"627","endLine":132,"endColumn":20,"suggestions":"828"},{"ruleId":"625","severity":1,"message":"654","line":134,"column":13,"nodeType":"635","endLine":142,"endColumn":4},{"ruleId":"625","severity":1,"message":"757","line":142,"column":6,"nodeType":"627","endLine":142,"endColumn":12,"suggestions":"829"},{"ruleId":"625","severity":1,"message":"654","line":162,"column":13,"nodeType":"635","endLine":167,"endColumn":4},{"ruleId":"625","severity":1,"message":"830","line":167,"column":6,"nodeType":"627","endLine":167,"endColumn":14,"suggestions":"831"},{"ruleId":"625","severity":1,"message":"759","line":171,"column":6,"nodeType":"627","endLine":171,"endColumn":30,"suggestions":"832"},{"ruleId":"598","severity":1,"message":"833","line":174,"column":9,"nodeType":"600","messageId":"601","endLine":174,"endColumn":24},{"ruleId":"598","severity":1,"message":"834","line":176,"column":9,"nodeType":"600","messageId":"601","endLine":176,"endColumn":12},{"ruleId":"598","severity":1,"message":"835","line":177,"column":9,"nodeType":"600","messageId":"601","endLine":177,"endColumn":17},{"ruleId":"633","severity":1,"message":"643","line":178,"column":42,"nodeType":"635","messageId":"644","endLine":178,"endColumn":44},{"ruleId":"598","severity":1,"message":"836","line":235,"column":9,"nodeType":"600","messageId":"601","endLine":235,"endColumn":27},{"ruleId":"633","severity":1,"message":"643","line":264,"column":29,"nodeType":"635","messageId":"644","endLine":264,"endColumn":31},{"ruleId":"633","severity":1,"message":"643","line":282,"column":29,"nodeType":"635","messageId":"644","endLine":282,"endColumn":31},{"ruleId":"657","severity":1,"message":"658","line":355,"column":46,"nodeType":"659","messageId":"660","endLine":355,"endColumn":48},{"ruleId":"598","severity":1,"message":"837","line":462,"column":9,"nodeType":"600","messageId":"601","endLine":462,"endColumn":29},{"ruleId":"598","severity":1,"message":"838","line":485,"column":11,"nodeType":"600","messageId":"601","endLine":485,"endColumn":15},{"ruleId":"657","severity":1,"message":"658","line":536,"column":21,"nodeType":"659","messageId":"660","endLine":536,"endColumn":23},{"ruleId":"633","severity":1,"message":"643","line":551,"column":33,"nodeType":"635","messageId":"644","endLine":551,"endColumn":35},{"ruleId":"657","severity":1,"message":"730","line":600,"column":28,"nodeType":"659","messageId":"660","endLine":600,"endColumn":30},{"ruleId":"598","severity":1,"message":"839","line":619,"column":9,"nodeType":"600","messageId":"601","endLine":619,"endColumn":25},{"ruleId":"657","severity":1,"message":"658","line":625,"column":21,"nodeType":"659","messageId":"660","endLine":625,"endColumn":23},{"ruleId":"609","severity":1,"message":"718","line":759,"column":25,"nodeType":"608","endLine":759,"endColumn":28},{"ruleId":"609","severity":1,"message":"718","line":884,"column":23,"nodeType":"608","endLine":884,"endColumn":51},{"ruleId":"609","severity":1,"message":"718","line":894,"column":23,"nodeType":"608","endLine":894,"endColumn":51},{"ruleId":"657","severity":1,"message":"658","line":974,"column":45,"nodeType":"659","messageId":"660","endLine":974,"endColumn":47},{"ruleId":"657","severity":1,"message":"658","line":975,"column":46,"nodeType":"659","messageId":"660","endLine":975,"endColumn":48},{"ruleId":"657","severity":1,"message":"658","line":976,"column":46,"nodeType":"659","messageId":"660","endLine":976,"endColumn":48},{"ruleId":"657","severity":1,"message":"658","line":977,"column":46,"nodeType":"659","messageId":"660","endLine":977,"endColumn":48},{"ruleId":"657","severity":1,"message":"658","line":989,"column":45,"nodeType":"659","messageId":"660","endLine":989,"endColumn":47},{"ruleId":"657","severity":1,"message":"658","line":990,"column":46,"nodeType":"659","messageId":"660","endLine":990,"endColumn":48},{"ruleId":"657","severity":1,"message":"658","line":991,"column":46,"nodeType":"659","messageId":"660","endLine":991,"endColumn":48},{"ruleId":"657","severity":1,"message":"658","line":992,"column":46,"nodeType":"659","messageId":"660","endLine":992,"endColumn":48},{"ruleId":"625","severity":1,"message":"840","line":32,"column":6,"nodeType":"627","endLine":32,"endColumn":8,"suggestions":"841"},{"ruleId":"625","severity":1,"message":"842","line":67,"column":6,"nodeType":"627","endLine":67,"endColumn":17,"suggestions":"843"},{"ruleId":"625","severity":1,"message":"844","line":83,"column":6,"nodeType":"627","endLine":83,"endColumn":27,"suggestions":"845"},{"ruleId":"633","severity":1,"message":"634","line":86,"column":71,"nodeType":"635","messageId":"636","endLine":86,"endColumn":73},{"ruleId":"633","severity":1,"message":"643","line":327,"column":45,"nodeType":"635","messageId":"644","endLine":327,"endColumn":47},{"ruleId":"633","severity":1,"message":"643","line":339,"column":45,"nodeType":"635","messageId":"644","endLine":339,"endColumn":47},{"ruleId":"657","severity":1,"message":"658","line":367,"column":32,"nodeType":"659","messageId":"660","endLine":367,"endColumn":34},{"ruleId":"598","severity":1,"message":"846","line":10,"column":9,"nodeType":"600","messageId":"601","endLine":10,"endColumn":27},{"ruleId":"847","severity":1,"message":"848","line":41,"column":7,"nodeType":"849","messageId":"660","endLine":41,"endColumn":14},{"ruleId":"625","severity":1,"message":"696","line":47,"column":6,"nodeType":"627","endLine":47,"endColumn":8,"suggestions":"850"},{"ruleId":"598","severity":1,"message":"851","line":13,"column":10,"nodeType":"600","messageId":"601","endLine":13,"endColumn":26},{"ruleId":"633","severity":1,"message":"634","line":30,"column":69,"nodeType":"635","messageId":"636","endLine":30,"endColumn":71},{"ruleId":"625","severity":1,"message":"852","line":42,"column":6,"nodeType":"627","endLine":42,"endColumn":33,"suggestions":"853"},{"ruleId":"633","severity":1,"message":"643","line":55,"column":30,"nodeType":"635","messageId":"644","endLine":55,"endColumn":32},{"ruleId":"625","severity":1,"message":"854","line":58,"column":6,"nodeType":"627","endLine":58,"endColumn":19,"suggestions":"855"},{"ruleId":"657","severity":1,"message":"730","line":305,"column":40,"nodeType":"659","messageId":"660","endLine":305,"endColumn":42},{"ruleId":"657","severity":1,"message":"658","line":34,"column":12,"nodeType":"659","messageId":"660","endLine":34,"endColumn":14},{"ruleId":"657","severity":1,"message":"658","line":37,"column":12,"nodeType":"659","messageId":"660","endLine":37,"endColumn":14},{"ruleId":"625","severity":1,"message":"856","line":47,"column":6,"nodeType":"627","endLine":47,"endColumn":12,"suggestions":"857"},{"ruleId":"625","severity":1,"message":"858","line":53,"column":6,"nodeType":"627","endLine":53,"endColumn":41,"suggestions":"859"},{"ruleId":"657","severity":1,"message":"658","line":79,"column":22,"nodeType":"659","messageId":"660","endLine":79,"endColumn":24},{"ruleId":"633","severity":1,"message":"643","line":131,"column":20,"nodeType":"635","messageId":"644","endLine":131,"endColumn":22},{"ruleId":"860","severity":1,"message":"861","line":167,"column":9,"nodeType":"608","endLine":177,"endColumn":10},{"ruleId":"625","severity":1,"message":"862","line":20,"column":28,"nodeType":"627","endLine":20,"endColumn":62},{"ruleId":"598","severity":1,"message":"863","line":1,"column":25,"nodeType":"600","messageId":"601","endLine":1,"endColumn":33},{"ruleId":"847","severity":1,"message":"864","line":247,"column":13,"nodeType":"849","messageId":"660","endLine":247,"endColumn":25},{"ruleId":"598","severity":1,"message":"726","line":21,"column":27,"nodeType":"600","messageId":"601","endLine":21,"endColumn":45},{"ruleId":"625","severity":1,"message":"865","line":34,"column":6,"nodeType":"627","endLine":34,"endColumn":8,"suggestions":"866"},{"ruleId":"598","severity":1,"message":"729","line":36,"column":9,"nodeType":"600","messageId":"601","endLine":36,"endColumn":21},{"ruleId":"633","severity":1,"message":"634","line":42,"column":18,"nodeType":"635","messageId":"636","endLine":42,"endColumn":20},{"ruleId":"633","severity":1,"message":"634","line":65,"column":70,"nodeType":"635","messageId":"636","endLine":65,"endColumn":72},{"ruleId":"633","severity":1,"message":"643","line":73,"column":29,"nodeType":"635","messageId":"644","endLine":73,"endColumn":31},{"ruleId":"633","severity":1,"message":"643","line":106,"column":29,"nodeType":"635","messageId":"644","endLine":106,"endColumn":31},{"ruleId":"598","severity":1,"message":"867","line":11,"column":8,"nodeType":"600","messageId":"601","endLine":11,"endColumn":23},{"ruleId":"625","severity":1,"message":"868","line":14,"column":6,"nodeType":"627","endLine":14,"endColumn":16,"suggestions":"869"},{"ruleId":"633","severity":1,"message":"643","line":18,"column":24,"nodeType":"635","messageId":"644","endLine":18,"endColumn":26},{"ruleId":"633","severity":1,"message":"643","line":26,"column":24,"nodeType":"635","messageId":"644","endLine":26,"endColumn":26},{"ruleId":"657","severity":1,"message":"658","line":88,"column":57,"nodeType":"659","messageId":"660","endLine":88,"endColumn":59},{"ruleId":"625","severity":1,"message":"870","line":35,"column":6,"nodeType":"627","endLine":35,"endColumn":8,"suggestions":"871"},{"ruleId":"633","severity":1,"message":"643","line":135,"column":30,"nodeType":"635","messageId":"644","endLine":135,"endColumn":32},"no-unused-vars","'ThreeColumnView' is defined but never used.","Identifier","unusedVar","'Layout' is defined but never used.","'useEffect' is defined but never used.","'LOGS_ADD' is defined but never used.","'isAuthenticate' is assigned a value but never used.","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'updatingKeyApi' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["872","873"],"Unnecessary escape character: \\/.",["874","875"],"'GET_FOLDER' is defined but never used.","'GET_UNREAD_MAIL' is defined but never used.","'createGlobalStyle' is defined but never used.","'total' is assigned a value but never used.","'nextClick' is assigned a value but never used.","'setDataNextPrevClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllMails', 'getUnreadCount', and 'prevFilter'. Either include them or remove the dependency array.","ArrayExpression",["876"],"React Hook useEffect has missing dependencies: 'filterOptions.search_data' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["877"],"React Hook useEffect has a missing dependency: 'getUnreadCount'. Either include it or remove the dependency array.",["878"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getAllMails'. Either include it or remove the dependency array.",["879"],"React Hook useEffect has missing dependencies: 'callAutoRefreshAll', 'callAutoRefreshCrashed', 'callAutoRefreshUnread', 'limit', and 'switchUser'. Either include them or remove the dependency array.",["880"],"React Hook useEffect has a missing dependency: 'fetchMostFrequentStatus'. Either include it or remove the dependency array.",["881"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","no-self-assign","'page' is assigned to itself.","selfAssignment","'urlPrevious' is assigned a value but never used.","'urlNext' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'getPrevClick', 'popupMail', and 'updateMail'. Either include them or remove the dependency array.",["882"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.","'activeModule' is assigned a value but never used.","'setActiveModule' is assigned a value but never used.","'toast' is defined but never used.","'Switch' is defined but never used.","'isDisabled' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'limitOfMail' and 'updatingKeyApi'. Either include them or remove the dependency array.",["883"],"React Hook useEffect has missing dependencies: 'getAllStations' and 'getPreferences'. Either include them or remove the dependency array.",["884"],"React Hook useEffect has a missing dependency: 'station'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setImportantStaionList' needs the current value of 'station'.",["885"],"React Hook useEffect has a missing dependency: 'station'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHideStaionList' needs the current value of 'station'.",["886"],["887"],"'desginationId' is assigned a value but never used.","'updatePreferenceMailPerPage' is assigned a value but never used.","'limit' is defined but never used.","'handleChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'NavLink' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"888","text":"889"},"'isFolderExist' is assigned a value but never used.","'star' is assigned a value but never used.","'newMailData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["890"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["891"],"React Hook useEffect has a missing dependency: 'filterMailData.length'. Either include it or remove the dependency array.",["892"],"React Hook useEffect has a missing dependency: 'designationId'. Either include it or remove the dependency array.",["893"],["894"],["895"],"'active' is assigned a value but never used.","'handleFolderCached' is assigned a value but never used.","'logDataValue' is defined but never used.","'MAIL_ACTIONS' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["896"],"React Hook useEffect has a missing dependency: 'handleProfileSection'. Either include it or remove the dependency array.",["897"],"'isActive' is assigned a value but never used.","'myId' is assigned a value but never used.","'setMyId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllFolders'. Either include it or remove the dependency array.",["898"],["899"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'getAllMails', 'props.userData', and 'selected'. Either include them or remove the dependency array.",["900"],["901"],["902"],["903"],"'useCallback' is defined but never used.","'bodyData' is assigned a value but never used.","'setDesignationList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFrequentAddresses'. Either include it or remove the dependency array.",["904"],"'handleToData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'attactype' is assigned a value but never used.","'ProgressBar' is defined but never used.","'UPDATE_MAIL_BY_ID' is defined but never used.","'DOWNLOAD_ALL' is defined but never used.","'ReactToPrint' is defined but never used.","'setOptions' is assigned a value but never used.","'designationList' is assigned a value but never used.","'apiFolderId' is assigned a value but never used.","'setApiFolderId' is assigned a value but never used.","'callApi' is assigned a value but never used.","'setCallApi' is assigned a value but never used.","'attachId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setReplyButton'. Either include it or remove the dependency array.",["905"],"React Hook useEffect has missing dependencies: 'handleOpenFolderList' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["906"],"React Hook useEffect has missing dependencies: 'limit', 'page', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["907"],"React Hook useEffect has missing dependencies: 'getFrequentAddresses' and 'getMail'. Either include them or remove the dependency array.",["908"],"React Hook useEffect has a missing dependency: 'getForlderByMailId'. Either include it or remove the dependency array.",["909"],"React Hook useEffect has a missing dependency: 'getCommentData'. Either include it or remove the dependency array.",["910"],"React Hook useEffect has a missing dependency: 'getPreDefinedComments'. Either include it or remove the dependency array.",["911"],"React Hook useEffect has missing dependencies: 'getMail' and 'props?.mailId'. Either include them or remove the dependency array.",["912"],"React Hook useEffect has a missing dependency: 'annotationData'. Either include it or remove the dependency array.",["913"],["914"],"no-duplicate-case","Duplicate case label.",["915"],"React Hook useMemo has missing dependencies: 'limit', 'openNextMail', 'page', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useMemo call and refer to those specific props inside useMemo.",["916"],"React Hook useMemo has missing dependencies: 'limit', 'openPrevMail', 'page', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useMemo call and refer to those specific props inside useMemo.",["917"],["918"],"'designationId' is assigned a value but never used.","'renderTooltip' is defined but never used.","'GET_ALL_MAIL' is defined but never used.","'visiable' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.",["919"],["920"],"'openModal' is assigned a value but never used.","no-script-url","Script URL is a form of eval.","unexpectedScriptURL","'store' is defined but never used.","Expected a 'break' statement before 'default'.","default","React Hook useEffect has a missing dependency: 'getMailshistory'. Either include it or remove the dependency array.",["921"],"'divID' is assigned a value but never used.","'divID' is assigned to itself.","React Hook useEffect has missing dependencies: 'getListOfStations' and 'props?.userData?.designations'. Either include them or remove the dependency array.",["922"],["923"],"React Hook useEffect has a missing dependency: 'handleRefreshClick'. Either include it or remove the dependency array.",["924"],"React Hook useEffect has a missing dependency: 'getSectionName'. Either include it or remove the dependency array.",["925"],"Array.prototype.filter() expects a return value from arrow function.","'searchData' is assigned a value but never used.","'setSearchData' is assigned a value but never used.","'sortTimeState' is assigned a value but never used.","'sortOpState' is assigned a value but never used.","'sortFromState' is assigned a value but never used.","'tagData' is assigned a value but never used.","'setTagData' is assigned a value but never used.","'tag' is assigned a value but never used.","'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getListOfStations' and 'props.userData'. Either include them or remove the dependency array.",["926"],"React Hook useEffect has missing dependencies: 'getListOfStations', 'props?.selected', and 'props.userData'. Either include them or remove the dependency array.",["927"],["928"],"no-redeclare","'inputs' is already defined.","redeclared","'i' is already defined.","'defaultSelect' is assigned a value but never used.","'prev' is assigned a value but never used.","'pageStyle' is assigned a value but never used.","'allAnnotation' is assigned a value but never used.","'marginNotesStatic' is assigned a value but never used.","'setmarginNotesStatic' is assigned a value but never used.","'marginButtonStatic' is assigned a value but never used.","'setmarginButtonStatic' is assigned a value but never used.","'setselectedData' is assigned a value but never used.","'printRef' is assigned a value but never used.","'commentBoxCommentData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCommentData', 'getFrequentAddresses', and 'getMail'. Either include them or remove the dependency array.",["929"],["930"],"React Hook useEffect has missing dependencies: 'getMail', 'prevStar', 'props.mailId', and 'updateMail'. Either include them or remove the dependency array.",["931"],["932"],"'anno_text_array' is assigned a value but never used.","'ary' is assigned a value but never used.","'previous' is assigned a value but never used.","'getListDesignation' is assigned a value but never used.","'handleScrollingClick' is assigned a value but never used.","'resp' is assigned a value but never used.","'getAllAnnotation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllBranches'. Either include it or remove the dependency array.",["933"],"React Hook useEffect has a missing dependency: 'selectedDesignation'. Either include it or remove the dependency array.",["934"],"React Hook useEffect has missing dependencies: 'commonAddresses', 'props', and 'selectedDesignationName'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["935"],"'handleEditorChange' is assigned a value but never used.","no-dupe-keys","Duplicate key 'plugins'.","ObjectExpression",["936"],"'previousSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setMarginNotesDynami'. Either include it or remove the dependency array.",["937"],"React Hook useEffect has missing dependencies: 'handleDefaultNotes' and 'props.selectedAnnotation.length'. Either include them or remove the dependency array.",["938"],"React Hook useEffect has a missing dependency: 'closeMarginNotes'. Either include it or remove the dependency array. If 'closeMarginNotes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["939"],"React Hook useEffect has a missing dependency: 'setLoadingDetails'. Either include it or remove the dependency array. If 'setLoadingDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["940"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","Assignments to the 'attachment_ids' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'useState' is defined but never used.","Duplicate key 'borderRadius'.","React Hook useEffect has missing dependencies: 'getFrequentAddresses' and 'getPreDefinedComments'. Either include them or remove the dependency array.",["941"],"'profileDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'addRead'. Either include it or remove the dependency array.",["942"],"React Hook useEffect has a missing dependency: 'getListDesignation'. Either include it or remove the dependency array.",["943"],{"messageId":"944","fix":"945","desc":"946"},{"messageId":"947","fix":"948","desc":"949"},{"messageId":"944","fix":"950","desc":"946"},{"messageId":"947","fix":"951","desc":"949"},{"desc":"952","fix":"953"},{"desc":"954","fix":"955"},{"desc":"956","fix":"957"},{"desc":"958","fix":"959"},{"desc":"960","fix":"961"},{"desc":"962","fix":"963"},{"desc":"964","fix":"965"},{"desc":"966","fix":"967"},{"desc":"968","fix":"969"},{"desc":"970","fix":"971"},{"desc":"972","fix":"973"},{"desc":"962","fix":"974"},[626,626]," rel=\"noreferrer\"",{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"979","fix":"980"},{"desc":"981","fix":"982"},{"desc":"983","fix":"984"},{"desc":"979","fix":"985"},{"desc":"986","fix":"987"},{"desc":"988","fix":"989"},{"desc":"990","fix":"991"},{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},{"desc":"996","fix":"997"},{"desc":"998","fix":"999"},{"desc":"1000","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"1014","fix":"1015"},{"desc":"1016","fix":"1017"},{"desc":"1018","fix":"1019"},{"desc":"1020","fix":"1021"},{"desc":"1022","fix":"1023"},{"desc":"1020","fix":"1024"},{"desc":"1025","fix":"1026"},{"desc":"1027","fix":"1028"},{"desc":"1027","fix":"1029"},{"desc":"1030","fix":"1031"},{"desc":"1032","fix":"1033"},{"desc":"1034","fix":"1035"},{"desc":"1036","fix":"1037"},{"desc":"1038","fix":"1039"},{"desc":"1040","fix":"1041"},{"desc":"1042","fix":"1043"},{"desc":"1044","fix":"1045"},{"desc":"1044","fix":"1046"},{"desc":"1047","fix":"1048"},{"desc":"1049","fix":"1050"},{"desc":"1018","fix":"1051"},{"desc":"1052","fix":"1053"},{"desc":"1020","fix":"1054"},{"desc":"1055","fix":"1056"},{"desc":"1057","fix":"1058"},{"desc":"1059","fix":"1060"},{"desc":"983","fix":"1061"},{"desc":"1062","fix":"1063"},{"desc":"1064","fix":"1065"},{"desc":"1066","fix":"1067"},{"desc":"1068","fix":"1069"},{"desc":"1070","fix":"1071"},{"desc":"1072","fix":"1073"},{"desc":"1074","fix":"1075"},"removeEscape",{"range":"1076","text":"1077"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1078","text":"1079"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1080","text":"1077"},{"range":"1081","text":"1079"},"Update the dependencies array to be: [filterOptions, getAllMails, getUnreadCount, prevFilter]",{"range":"1082","text":"1083"},"Update the dependencies array to be: [filterOptions.search_data, props]",{"range":"1084","text":"1085"},"Update the dependencies array to be: [getUnreadCount, props.switching]",{"range":"1086","text":"1087"},"Update the dependencies array to be: [getAllMails, props?.userData]",{"range":"1088","text":"1089"},"Update the dependencies array to be: [callAutoRefreshAll, callAutoRefreshCrashed, callAutoRefreshUnread, limit, props.isActiveModule, switchUser]",{"range":"1090","text":"1091"},"Update the dependencies array to be: [fetchMostFrequentStatus]",{"range":"1092","text":"1093"},"Update the dependencies array to be: [getPrevClick, inboxMailData, popupMail, updateMail]",{"range":"1094","text":"1095"},"Update the dependencies array to be: [limitOfMail, updatingKeyApi]",{"range":"1096","text":"1097"},"Update the dependencies array to be: [getAllStations, getPreferences, props.userData]",{"range":"1098","text":"1099"},"Update the dependencies array to be: [selectedHideStations, station]",{"range":"1100","text":"1101"},"Update the dependencies array to be: [selectedImportantStations, station]",{"range":"1102","text":"1103"},{"range":"1104","text":"1093"},"Update the dependencies array to be: [props, props?.userData]",{"range":"1105","text":"1106"},"Update the dependencies array to be: [props, props.backButton, props.isAction]",{"range":"1107","text":"1108"},"Update the dependencies array to be: [filterMailData.length, selectedMail]",{"range":"1109","text":"1110"},"Update the dependencies array to be: [designationId, mailData]",{"range":"1111","text":"1112"},"Update the dependencies array to be: [props]",{"range":"1113","text":"1114"},{"range":"1115","text":"1110"},"Update the dependencies array to be: [getUserData]",{"range":"1116","text":"1117"},"Update the dependencies array to be: [handleProfileSection]",{"range":"1118","text":"1119"},"Update the dependencies array to be: [getAllFolders, props?.userData]",{"range":"1120","text":"1121"},"Update the dependencies array to be: [folderList, props]",{"range":"1122","text":"1123"},"Update the dependencies array to be: [getAllMails, props.userData, props.userData.designations, selected]",{"range":"1124","text":"1125"},"Update the dependencies array to be: [getAllMails, props.searchText, props.userData, selected]",{"range":"1126","text":"1127"},"Update the dependencies array to be: [getAllMails, props.station, props.userData, selected]",{"range":"1128","text":"1129"},"Update the dependencies array to be: [getAllMails, props.sortFilter, props.userData, selected]",{"range":"1130","text":"1131"},"Update the dependencies array to be: [getFrequentAddresses]",{"range":"1132","text":"1133"},"Update the dependencies array to be: [generalCommentData, setReplyButton]",{"range":"1134","text":"1135"},"Update the dependencies array to be: [handleOpenFolderList, props]",{"range":"1136","text":"1137"},"Update the dependencies array to be: [limit, page, props]",{"range":"1138","text":"1139"},"Update the dependencies array to be: [getFrequentAddresses, getMail, props?.mailId]",{"range":"1140","text":"1141"},"Update the dependencies array to be: [getForlderByMailId, props.selectedUserMailId]",{"range":"1142","text":"1143"},"Update the dependencies array to be: [getCommentData, maildIdForComment]",{"range":"1144","text":"1145"},"Update the dependencies array to be: [getPreDefinedComments]",{"range":"1146","text":"1147"},"Update the dependencies array to be: [getMail, open, props?.mailId]",{"range":"1148","text":"1149"},"Update the dependencies array to be: [annotationData, annotationDataForPrint]",{"range":"1150","text":"1151"},"Update the dependencies array to be: [props, props.userData]",{"range":"1152","text":"1153"},{"range":"1154","text":"1151"},"Update the dependencies array to be: [limit, openNextMail, page, props]",{"range":"1155","text":"1156"},"Update the dependencies array to be: [limit, openPrevMail, page, props]",{"range":"1157","text":"1158"},{"range":"1159","text":"1158"},"Update the dependencies array to be: [getAllFolders, props?.userData?.designations]",{"range":"1160","text":"1161"},"Update the dependencies array to be: [folder, props]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [getMailshistory]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [props.filterOptions.mail_action, props.filterOptions.folder, props.filterOptions.is_sent, getListOfStations, props?.userData?.designations]",{"range":"1166","text":"1167"},"Update the dependencies array to be: [props, props?.filterOptions?.by_stations]",{"range":"1168","text":"1169"},"Update the dependencies array to be: [apiCalledCount, handleRefreshClick]",{"range":"1170","text":"1171"},"Update the dependencies array to be: [getSectionName, props.filterOptions]",{"range":"1172","text":"1173"},"Update the dependencies array to be: [getListOfStations, props?.selected, props.userData]",{"range":"1174","text":"1175"},{"range":"1176","text":"1175"},"Update the dependencies array to be: [props, props.isActiveModule3Column]",{"range":"1177","text":"1178"},"Update the dependencies array to be: [getCommentData, getFrequentAddresses, getMail, props?.mailId]",{"range":"1179","text":"1180"},{"range":"1181","text":"1149"},"Update the dependencies array to be: [getMail, isStar, prevStar, props.mailId, updateMail]",{"range":"1182","text":"1183"},{"range":"1184","text":"1151"},"Update the dependencies array to be: [getAllBranches]",{"range":"1185","text":"1186"},"Update the dependencies array to be: [props?.to, selectedDesignation]",{"range":"1187","text":"1188"},"Update the dependencies array to be: [commonAddresses, props, selectedDesignation, selectedDesignationName]",{"range":"1189","text":"1190"},{"range":"1191","text":"1114"},"Update the dependencies array to be: [props?.selectedAnnotation, setMarginNotesDynami]",{"range":"1192","text":"1193"},"Update the dependencies array to be: [handleDefaultNotes, marginNotes, props.selectedAnnotation.length]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [body, closeMarginNotes]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [colorCodeApi, getAllAnnotationApi, setLoadingDetails]",{"range":"1198","text":"1199"},"Update the dependencies array to be: [getFrequentAddresses, getPreDefinedComments]",{"range":"1200","text":"1201"},"Update the dependencies array to be: [addRead, selected]",{"range":"1202","text":"1203"},"Update the dependencies array to be: [getListDesignation]",{"range":"1204","text":"1205"},[1506,1507],"",[1506,1506],"\\",[1523,1524],[1523,1523],[5765,5780],"[filterOptions, getAllMails, getUnreadCount, prevFilter]",[7139,7141],"[filterOptions.search_data, props]",[7266,7283],"[getUnreadCount, props.switching]",[7567,7584],"[getAllMails, props?.userData]",[8949,8971],"[callAutoRefreshAll, callAutoRefreshCrashed, callAutoRefreshUnread, limit, props.isActiveModule, switchUser]",[9035,9037],"[fetchMostFrequentStatus]",[33444,33459],"[getPrevClick, inboxMailData, popupMail, updateMail]",[2499,2501],"[limitOfMail, updatingKeyApi]",[2579,2596],"[getAllStations, getPreferences, props.userData]",[2988,3010],"[selectedHideStations, station]",[3400,3427],"[selectedImportantStations, station]",[3491,3493],[2729,2746],"[props, props?.userData]",[2880,2914],"[props, props.backButton, props.isAction]",[3237,3251],"[filterMailData.length, selectedMail]",[3549,3559],"[designationId, mailData]",[3621,3623],"[props]",[3946,3960],[1531,1533],"[getUserData]",[1809,1811],"[handleProfileSection]",[1716,1733],"[getAllFolders, props?.userData]",[2418,2430],"[folderList, props]",[1640,1671],"[getAllMails, props.userData, props.userData.designations, selected]",[1791,1809],"[getAllMails, props.searchText, props.userData, selected]",[1929,1945],"[getAllMails, props.station, props.userData, selected]",[2045,2064],"[getAllMails, props.sortFilter, props.userData, selected]",[2306,2308],"[getFrequentAddresses]",[5725,5745],"[generalCommentData, setReplyButton]",[6085,6087],"[handleOpenFolderList, props]",[6548,6550],"[limit, page, props]",[7039,7053],"[getFrequentAddresses, getMail, props?.mailId]",[7166,7192],"[getForlderByMailId, props.selectedUserMailId]",[7270,7289],"[getCommentData, maildIdForComment]",[7432,7434],"[getPreDefinedComments]",[7629,7635],"[getMail, open, props?.mailId]",[7759,7783],"[annotationData, annotationDataForPrint]",[8079,8096],"[props, props.userData]",[11086,11110],[22881,22896],"[limit, openNextMail, page, props]",[23087,23111],"[limit, openPrevMail, page, props]",[23305,23329],[1993,2024],"[getAllFolders, props?.userData?.designations]",[2165,2173],"[folder, props]",[674,676],"[getMailshistory]",[2887,3004],"[props.filterOptions.mail_action, props.filterOptions.folder, props.filterOptions.is_sent, getListOfStations, props?.userData?.designations]",[3274,3309],"[props, props?.filterOptions?.by_stations]",[3813,3829],"[apiCalledCount, handleRefreshClick]",[3884,3906],"[getSectionName, props.filterOptions]",[1124,1141],"[getListOfStations, props?.selected, props.userData]",[1307,1309],[1543,1573],"[props, props.isActiveModule3Column]",[4360,4374],"[getCommentData, getFrequentAddresses, getMail, props?.mailId]",[4604,4610],[5141,5149],"[getMail, isStar, prevStar, props.mailId, updateMail]",[5204,5228],[1394,1396],"[getAllBranches]",[2395,2406],"[props?.to, selectedDesignation]",[2813,2834],"[commonAddresses, props, selectedDesignation, selectedDesignationName]",[1737,1739],[1645,1672],"[props?.selectedAnnotation, setMarginNotesDynami]",[2107,2120],"[handleDefaultNotes, marginNotes, props.selectedAnnotation.length]",[1327,1333],"[body, closeMarginNotes]",[1470,1505],"[colorCodeApi, getAllAnnotationApi, setLoadingDetails]",[1324,1326],"[getFrequentAddresses, getPreDefinedComments]",[400,410],"[addRead, selected]",[1423,1425],"[getListDesignation]"]